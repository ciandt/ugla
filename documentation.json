{
    "pipes": [
        {
            "name": "ReversePipe",
            "id": "pipe-ReversePipe-a707d3025f74356fdcc141b1b357f8dd",
            "file": "projects/ugla/src/lib/components/toast/pipes/reverse.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "reverse",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'reverse'\n})\nexport class ReversePipe implements PipeTransform {\n\n  transform(value) {\n    if (!value) {\n      return;\n    }\n    return value.reverse();\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "ToastEvent",
            "id": "interface-ToastEvent-5298a966b4824dbf3702ff23b987d658",
            "file": "projects/ugla/src/lib/components/toast/toast.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nexport class Message {\n  id: string;\n  content: string;\n  title: string;\n  type: string;\n  dismissed = false;\n  timeout: number;\n  cleanOld: boolean;\n\n  /**\n   * triggered when toast is active\n   */\n  onShown: Observable<any>;\n\n  /**\n   * triggered when toast is destroyed\n   */\n  onHidden: Observable<any>;\n\n  private _afterShow = new Subject<any>();\n  private _afterHidden = new Subject<any>();\n\n  constructor(title, content, type?, timeout?, cleanOld?) {\n    this.title = title;\n    this.content = content;\n    this.type = type || 'info';\n    this.dismissed = false;\n    this.timeout = timeout;\n    this.cleanOld = cleanOld || true;\n    this.onShown = this._afterShow.asObservable();\n    this.onHidden = this._afterHidden.asObservable();\n  }\n\n  triggerOnShow(value) {\n    this._afterShow.next(value);\n    this._afterShow.complete();\n  }\n\n  triggerOnHidden() {\n    this._afterHidden.next();\n    this._afterHidden.complete();\n  }\n}\n\nexport enum NotificationCommand {\n  CLEAR_ALL = 'clearAll',\n  CLOSE = 'close',\n  SET = 'set'\n}\n\nexport interface ToastEvent {\n  command: NotificationCommand;\n  notification?: Message;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n\n  private toastEventEmitter = new Subject<ToastEvent>();\n\n  constructor(private ngZone: NgZone) {}\n\n  /**\n   * Add a {@link Message} to notifications.\n   * @param title of message\n   * @param content of message\n   * @param type Is optional. Available options: 'success', 'error', 'warning', 'info'\n   * @param timeout time in milliseconds. Default: error notifications hasn't timeout\n   */\n  private setToastMessage(title: string, content: string, type?: string, timeout?: number) {\n    return this.ngZone.run(() => {\n      const message =  new Message(title, content, type, timeout);\n      this.toastEventEmitter.next({ command: NotificationCommand.SET, notification: message });\n      return message;\n    });\n  }\n\n  // closes a toast message\n  dismissToastMessage(message: Message) {\n    return this.ngZone.run(() => {\n      this.toastEventEmitter.next({ command: NotificationCommand.CLOSE, notification: message });\n      return message;\n    });\n  }\n\n  // closes all the toast messages\n  dismissAllToastMessages() {\n    this.ngZone.run(() => {\n      this.toastEventEmitter.next({ command: NotificationCommand.CLEAR_ALL });\n    });\n  }\n\n  getEmitter() {\n    return this.toastEventEmitter;\n  }\n\n  /**\n   * Add success message\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public success(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'success', timeout);\n  }\n\n  /**\n   * Add error message\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public error(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'error', timeout);\n  }\n\n  /**\n   * Add warning message\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public warning(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'warning', timeout);\n  }\n\n  /**\n   *\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public info(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'info', timeout);\n  }\n}\n",
            "properties": [
                {
                    "name": "command",
                    "type": "NotificationCommand",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "notification",
                    "type": "Message",
                    "optional": true,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AsideService",
            "id": "injectable-AsideService-5b8550f96224da9c033ead0c779f5ddd",
            "file": "projects/ugla/src/lib/components/aside/aside.service.ts",
            "properties": [
                {
                    "name": "toggledSubject",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "toggled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\n@Injectable({\n    providedIn: 'root'\n  })\nexport class AsideService {\n\n  toggledSubject = new Subject();\n  toggled() {\n    this.toggledSubject.next()\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "LightboxService",
            "id": "injectable-LightboxService-601c656c577b5f00cc453e1131ddcf3d",
            "file": "projects/ugla/src/lib/components/lightbox/lightbox.service.ts",
            "properties": [
                {
                    "name": "actionIconElement",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "content",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "filesUrlElement",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "page",
                    "type": "HTMLElement",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 117
                },
                {
                    "name": "generateImage",
                    "args": [
                        {
                            "name": "filesUrl",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "filesUrl",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateImageIcon",
                    "args": [
                        {
                            "name": "icon",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "icon",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isImage",
                    "args": [
                        {
                            "name": "fileUrl",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "fileUrl",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPdf",
                    "args": [
                        {
                            "name": "fileUrl",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 135,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "fileUrl",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keydownHandler",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "filesUrl",
                            "type": "string[]"
                        },
                        {
                            "name": "closeOut",
                            "type": "boolean",
                            "defaultValue": "false"
                        },
                        {
                            "name": "actionIcon",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "position",
                                    "type": "string"
                                }
                            ]
                        },
                        {
                            "name": "imageIcon",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "filesUrl",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "closeOut",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionIcon",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "position",
                                    "type": "string"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "imageIcon",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prev",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LightboxService {\n  filesUrlElement: HTMLElement;\n  actionIconElement: HTMLElement;\n  content: HTMLElement;\n  page: HTMLElement;\n\n  constructor() { }\n\n  open(filesUrl: string[], closeOut: boolean = false, actionIcon?: (position: string) => void, imageIcon?: string) {\n    const lightbox = document.createElement('div');\n    lightbox.setAttribute('class', 'lightbox');\n\n    if (closeOut) {\n      lightbox.addEventListener('click', (event) => this.close());\n    }\n\n    this.content = document.createElement('div');\n    this.content.setAttribute('class', 'content');\n\n    const close = document.createElement('button');\n    close.setAttribute('class', 'close');\n    close.addEventListener('click', (event) => this.close());\n\n    const icon = document.createElement('i');\n    icon.setAttribute('class', 'material-icons');\n    icon.textContent = 'close';\n\n    close.append(icon);\n    this.content.appendChild(close);\n\n    this.generateImage(filesUrl); // generate images\n\n    if (this.filesUrlElement !== undefined) {\n      const total = this.filesUrlElement.childElementCount;\n\n      this.content.appendChild(this.filesUrlElement);\n\n      if (total > 1) {\n        const navigation = document.createElement('div');\n        navigation.setAttribute('class', 'navigation');\n\n        const buttonRight = document.createElement('button');\n        buttonRight.setAttribute('class', 'arrow');\n        const iconRight = document.createElement('i');\n        iconRight.setAttribute('class', 'material-icons');\n        iconRight.textContent = 'navigate_next';\n        buttonRight.appendChild(iconRight);\n        buttonRight.addEventListener('click', (event) => this.next());\n\n        const buttonLeft = document.createElement('button');\n        buttonLeft.setAttribute('class', 'arrow');\n        const iconLeft = document.createElement('i');\n        iconLeft.setAttribute('class', 'material-icons');\n        iconLeft.textContent = 'navigate_before';\n        buttonLeft.appendChild(iconLeft);\n        buttonLeft.addEventListener('click', (event) => this.prev());\n\n        navigation.appendChild(buttonLeft);\n        navigation.appendChild(buttonRight);\n        this.content.appendChild(navigation);\n\n        this.page = document.createElement('div');\n        this.page.setAttribute('class', 'page');\n        this.page.textContent = `1 of ${this.filesUrlElement.childElementCount.toString()}`;\n\n        this.content.appendChild(this.page);\n      }\n    }\n\n    if (actionIcon) {\n      const button = document.createElement('button');\n      button.setAttribute('class', 'action');\n      button.addEventListener('click', (event) => {\n        const position = this.content.querySelector('.selected').getAttribute('data-position');\n\n        actionIcon(position);\n        this.close();\n      });\n\n      this.generateImageIcon(imageIcon);\n\n      if (this.actionIconElement) {\n        button.append(this.actionIconElement);\n      } else {\n        console.error('Lightbox Directive – You must add an icon.');\n      }\n\n      this.content.appendChild(button);\n    }\n\n    lightbox.appendChild(this.content);\n    const body = document.getElementsByTagName('app-root')[0];\n    body.insertBefore(lightbox, body.firstChild);\n\n    document.addEventListener('keydown', ($event) => this.keydownHandler($event));\n\n    return false;\n  }\n\n  keydownHandler($event: any) {\n    const hasSlide = this.filesUrlElement.childElementCount > 1;\n\n    if ($event.key === 'Escape') {\n      this.close();\n    } else if ($event.key === 'ArrowRight' && hasSlide) {\n      this.next();\n    } else if ($event.key === 'ArrowLeft' && hasSlide) {\n      this.prev();\n    }\n  }\n\n  close() {\n    document.querySelectorAll('.lightbox').forEach((event) => {\n      event.remove();\n    });\n\n\n    return false;\n  }\n\n  private isImage(fileUrl: string) {\n    if (fileUrl.indexOf('png') > -1 ||\n       fileUrl.indexOf('jpg') > -1 ||\n       fileUrl.indexOf('jpeg') > -1 ||\n       fileUrl.indexOf('bmp') > -1) {\n      return true;\n    }\n  }\n\n  private isPdf(fileUrl: string) {\n    return fileUrl.indexOf('pdf') > -1;\n  }\n\n  private generateImage(filesUrl: string[]) {\n    this.filesUrlElement = document.createElement('div');\n    this.filesUrlElement.setAttribute('class', 'slide');\n\n    if (filesUrl) {\n      filesUrl.forEach((fileUrl, index) => {\n        let element: HTMLElement;\n        let type: string;\n\n        if (fileUrl.indexOf('type') > -1) {\n          type = fileUrl.substr(fileUrl.indexOf('type')).split('=')[1];\n          fileUrl = fileUrl.substring(fileUrl.indexOf('&type'), -1);\n        } else {\n          const items = fileUrl.split('.');\n          type = items[items.length - 1];\n        }\n\n        if (this.isImage(type)) {\n          element = document.createElement('img');\n        } else if (this.isPdf(type)) {\n          element = document.createElement('embed');\n          element.setAttribute('width', '100%');\n          element.setAttribute('height', '100%');\n        }\n\n        element.setAttribute('class', 'slide-item');\n        element.setAttribute('src', fileUrl);\n        element.setAttribute('data-position', (index + 1).toString());\n\n        if (index === 0) {\n          element.classList.add('selected');\n        }\n\n        this.filesUrlElement.appendChild(element);\n      });\n    }\n  }\n\n  private generateImageIcon(icon: string) {\n    this.actionIconElement = document.createElement('i');\n    this.actionIconElement.setAttribute('class', 'material-icons');\n    this.actionIconElement.textContent = icon;\n  }\n\n  private next() {\n    const current = this.content.querySelector('.selected');\n\n    if (current.nextElementSibling) {\n      current.nextElementSibling.classList.add('selected');\n      current.classList.remove('selected');\n    } else {\n      current.parentElement.firstElementChild.classList.add('selected');\n      current.classList.remove('selected');\n    }\n\n    const currentPage = this.content.querySelector('.selected').getAttribute('data-position');\n    this.page.textContent = `${currentPage} of ${this.filesUrlElement.childElementCount.toString()}`;\n  }\n\n  private prev() {\n    const current = this.content.querySelector('.selected');\n\n    if (current.previousElementSibling) {\n      current.previousElementSibling.classList.add('selected');\n      current.classList.remove('selected');\n    } else {\n      current.parentElement.lastElementChild.classList.add('selected');\n      current.classList.remove('selected');\n    }\n\n    const currentPage = this.content.querySelector('.selected').getAttribute('data-position');\n    this.page.textContent = `${currentPage} of ${this.filesUrlElement.childElementCount.toString()}`;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "LoadingService",
            "id": "injectable-LoadingService-18023805c37ce09eaefd1589ebbf3042",
            "file": "projects/ugla/src/lib/components/loading/loading.service.ts",
            "properties": [
                {
                    "name": "instances",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loadingComponent",
                    "defaultValue": "'loadingComponent'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "registerInstance",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "instance",
                            "type": "LoadingComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "instance",
                            "type": "LoadingComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeInstance",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "instance",
                            "type": "LoadingComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "instance",
                            "type": "LoadingComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "transparency",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "transparency",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { LoadingComponent } from './loading.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n  loadingComponent = 'loadingComponent';\n\n  private instances: {[key: string]: LoadingComponent} = {};\n\n  public registerInstance(name: string, instance: LoadingComponent) {\n    this.instances[name] = instance;\n  }\n\n  public removeInstance(name: string, instance: LoadingComponent) {\n    if (this.instances[name] === instance) {\n      delete this.instances[name];\n    }\n  }\n\n  public hide() {\n    this.instances[this.loadingComponent].onHide();\n  }\n\n  public show(transparency?: boolean) {\n    this.instances[this.loadingComponent].onShow(transparency);\n  }\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-20e2b7e9840d9c52167e0953a0fd3f94",
            "file": "projects/ugla/src/lib/components/modal/modal.service.ts",
            "properties": [
                {
                    "name": "modal",
                    "type": "Modal",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "modalEventEmitter",
                    "defaultValue": "new Subject<Modal>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "hasIcon",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Modal",
                    "typeParameters": [],
                    "line": 47,
                    "description": "<p>Open an error modal.</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 904,
                                "end": 909,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 898,
                                "end": 903,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 933,
                                "end": 937,
                                "flags": 0,
                                "escapedText": "text"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 927,
                                "end": 932,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 961,
                                "end": 968,
                                "flags": 0,
                                "escapedText": "hasIcon"
                            },
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "pos": 955,
                                "end": 960,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional, default is true</p>\n"
                        }
                    ]
                },
                {
                    "name": "getModalEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "hasIcon",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Modal",
                    "typeParameters": [],
                    "line": 67,
                    "description": "<p>Open an info modal.</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1436,
                                "end": 1441,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1430,
                                "end": 1435,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1465,
                                "end": 1469,
                                "flags": 0,
                                "escapedText": "text"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1459,
                                "end": 1464,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1493,
                                "end": 1500,
                                "flags": 0,
                                "escapedText": "hasIcon"
                            },
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "pos": 1487,
                                "end": 1492,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional, default is true</p>\n"
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        },
                        {
                            "name": "hasIcon",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Modal",
                    "typeParameters": [],
                    "line": 89,
                    "description": "<p>Open a modal.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1906,
                                "end": 1911,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1900,
                                "end": 1905,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1935,
                                "end": 1939,
                                "flags": 0,
                                "escapedText": "text"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1929,
                                "end": 1934,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1963,
                                "end": 1967,
                                "flags": 0,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1957,
                                "end": 1962,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Available options: &#39;success&#39;, &#39;error&#39;, &#39;warning&#39;, &#39;info&#39;</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2037,
                                "end": 2044,
                                "flags": 0,
                                "escapedText": "hasIcon"
                            },
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "pos": 2031,
                                "end": 2036,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional, default is true</p>\n"
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "hasIcon",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Modal",
                    "typeParameters": [],
                    "line": 37,
                    "description": "<p>Open a success modal.</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 636,
                                "end": 641,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 630,
                                "end": 635,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 665,
                                "end": 669,
                                "flags": 0,
                                "escapedText": "text"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 659,
                                "end": 664,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 693,
                                "end": 700,
                                "flags": 0,
                                "escapedText": "hasIcon"
                            },
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "pos": 687,
                                "end": 692,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional, default is true</p>\n"
                        }
                    ]
                },
                {
                    "name": "warning",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "text",
                            "type": "string"
                        },
                        {
                            "name": "hasIcon",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Modal",
                    "typeParameters": [],
                    "line": 57,
                    "description": "<p>Open a warning modal.</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1169,
                                "end": 1174,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1163,
                                "end": 1168,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1198,
                                "end": 1202,
                                "flags": 0,
                                "escapedText": "text"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1192,
                                "end": 1197,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1226,
                                "end": 1233,
                                "flags": 0,
                                "escapedText": "hasIcon"
                            },
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "pos": 1220,
                                "end": 1225,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Optional, default is true</p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\nexport class Modal {\n  title: string;\n  text: string;\n  type: string;\n  hasIcon: boolean;\n  open: boolean;\n\n  constructor(title, text, open?, type?, hasIcon?) {\n    this.title = title;\n    this.text = text;\n    this.type = type || 'info';\n    this.hasIcon = (hasIcon === undefined) ? true : hasIcon;\n    this.open = (open === undefined) ? true : open;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n\n  modal: Modal;\n  private modalEventEmitter = new Subject<Modal>();\n\n  constructor() {\n  }\n\n  /**\n   * Open a success modal.\n   * @param title of message\n   * @param text of message\n   * @param hasIcon Optional, default is true\n   */\n  public success(title: string, text: string, hasIcon?: boolean) {\n    return this.open(title, text, 'success', hasIcon);\n  }\n\n  /**\n   * Open an error modal.\n   * @param title of message\n   * @param text of message\n   * @param hasIcon Optional, default is true\n   */\n  public error(title: string, text: string, hasIcon?: boolean) {\n    return this.open(title, text, 'error', hasIcon);\n  }\n\n  /**\n   * Open a warning modal.\n   * @param title of message\n   * @param text of message\n   * @param hasIcon Optional, default is true\n   */\n  public warning(title: string, text: string, hasIcon?: boolean) {\n    return this.open(title, text, 'warning', hasIcon);\n  }\n\n  /**\n   * Open an info modal.\n   * @param title of message\n   * @param text of message\n   * @param hasIcon Optional, default is true\n   */\n  public info(title: string, text: string, hasIcon?: boolean) {\n    return this.open(title, text, 'info', hasIcon);\n  }\n\n  public closeModal() {\n    this.modal.open = false;\n    this.modalEventEmitter.next(this.modal);\n    document.body.classList.remove('no-scroll');\n  }\n\n\n  getModalEmitter() {\n    return this.modalEventEmitter;\n  }\n\n  /**\n   * Open a modal.\n   * @param title of message\n   * @param text of message\n   * @param type Available options: 'success', 'error', 'warning', 'info'\n   * @param hasIcon Optional, default is true\n   */\n  private open(title: string, text: string, type: string, hasIcon?: boolean) {\n    this.modal = new Modal(title, text, true, type, hasIcon);\n    document.body.classList.add('no-scroll');\n    this.modal.open = true;\n    this.modalEventEmitter.next(this.modal);\n    return this.modal;\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 26
            },
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-5298a966b4824dbf3702ff23b987d658",
            "file": "projects/ugla/src/lib/components/toast/toast.service.ts",
            "properties": [
                {
                    "name": "toastEventEmitter",
                    "defaultValue": "new Subject<ToastEvent>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dismissAllToastMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "dismissToastMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "Message"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Message",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "content",
                            "type": "string"
                        },
                        {
                            "name": "timeout",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 118,
                    "description": "<p>Add error message</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2791,
                                "end": 2796,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2785,
                                "end": 2790,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2820,
                                "end": 2827,
                                "flags": 0,
                                "escapedText": "content"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2814,
                                "end": 2819,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2851,
                                "end": 2858,
                                "flags": 0,
                                "escapedText": "timeout"
                            },
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "pos": 2845,
                                "end": 2850,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>to close</p>\n"
                        }
                    ]
                },
                {
                    "name": "getEmitter",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "content",
                            "type": "string"
                        },
                        {
                            "name": "timeout",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "description": "",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3305,
                                "end": 3310,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3299,
                                "end": 3304,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3334,
                                "end": 3341,
                                "flags": 0,
                                "escapedText": "content"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3328,
                                "end": 3333,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3365,
                                "end": 3372,
                                "flags": 0,
                                "escapedText": "timeout"
                            },
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "pos": 3359,
                                "end": 3364,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>to close</p>\n"
                        }
                    ]
                },
                {
                    "name": "setToastMessage",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "content",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "description": "<p>Add a {@link Message} to notifications.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1448,
                                "end": 1453,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1442,
                                "end": 1447,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1477,
                                "end": 1484,
                                "flags": 0,
                                "escapedText": "content"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1471,
                                "end": 1476,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1508,
                                "end": 1512,
                                "flags": 0,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 1502,
                                "end": 1507,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Is optional. Available options: &#39;success&#39;, &#39;error&#39;, &#39;warning&#39;, &#39;info&#39;</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1595,
                                "end": 1602,
                                "flags": 0,
                                "escapedText": "timeout"
                            },
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "pos": 1589,
                                "end": 1594,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>time in milliseconds. Default: error notifications hasn&#39;t timeout</p>\n"
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "content",
                            "type": "string"
                        },
                        {
                            "name": "timeout",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "description": "<p>Add success message</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2524,
                                "end": 2529,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2518,
                                "end": 2523,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2553,
                                "end": 2560,
                                "flags": 0,
                                "escapedText": "content"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 2547,
                                "end": 2552,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2584,
                                "end": 2591,
                                "flags": 0,
                                "escapedText": "timeout"
                            },
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "pos": 2578,
                                "end": 2583,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>to close</p>\n"
                        }
                    ]
                },
                {
                    "name": "warning",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        },
                        {
                            "name": "content",
                            "type": "string"
                        },
                        {
                            "name": "timeout",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "description": "<p>Add warning message</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3056,
                                "end": 3061,
                                "flags": 0,
                                "escapedText": "title"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3050,
                                "end": 3055,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3085,
                                "end": 3092,
                                "flags": 0,
                                "escapedText": "content"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 3079,
                                "end": 3084,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of message</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3116,
                                "end": 3123,
                                "flags": 0,
                                "escapedText": "timeout"
                            },
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "pos": 3110,
                                "end": 3115,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>to close</p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nexport class Message {\n  id: string;\n  content: string;\n  title: string;\n  type: string;\n  dismissed = false;\n  timeout: number;\n  cleanOld: boolean;\n\n  /**\n   * triggered when toast is active\n   */\n  onShown: Observable<any>;\n\n  /**\n   * triggered when toast is destroyed\n   */\n  onHidden: Observable<any>;\n\n  private _afterShow = new Subject<any>();\n  private _afterHidden = new Subject<any>();\n\n  constructor(title, content, type?, timeout?, cleanOld?) {\n    this.title = title;\n    this.content = content;\n    this.type = type || 'info';\n    this.dismissed = false;\n    this.timeout = timeout;\n    this.cleanOld = cleanOld || true;\n    this.onShown = this._afterShow.asObservable();\n    this.onHidden = this._afterHidden.asObservable();\n  }\n\n  triggerOnShow(value) {\n    this._afterShow.next(value);\n    this._afterShow.complete();\n  }\n\n  triggerOnHidden() {\n    this._afterHidden.next();\n    this._afterHidden.complete();\n  }\n}\n\nexport enum NotificationCommand {\n  CLEAR_ALL = 'clearAll',\n  CLOSE = 'close',\n  SET = 'set'\n}\n\nexport interface ToastEvent {\n  command: NotificationCommand;\n  notification?: Message;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n\n  private toastEventEmitter = new Subject<ToastEvent>();\n\n  constructor(private ngZone: NgZone) {}\n\n  /**\n   * Add a {@link Message} to notifications.\n   * @param title of message\n   * @param content of message\n   * @param type Is optional. Available options: 'success', 'error', 'warning', 'info'\n   * @param timeout time in milliseconds. Default: error notifications hasn't timeout\n   */\n  private setToastMessage(title: string, content: string, type?: string, timeout?: number) {\n    return this.ngZone.run(() => {\n      const message =  new Message(title, content, type, timeout);\n      this.toastEventEmitter.next({ command: NotificationCommand.SET, notification: message });\n      return message;\n    });\n  }\n\n  // closes a toast message\n  dismissToastMessage(message: Message) {\n    return this.ngZone.run(() => {\n      this.toastEventEmitter.next({ command: NotificationCommand.CLOSE, notification: message });\n      return message;\n    });\n  }\n\n  // closes all the toast messages\n  dismissAllToastMessages() {\n    this.ngZone.run(() => {\n      this.toastEventEmitter.next({ command: NotificationCommand.CLEAR_ALL });\n    });\n  }\n\n  getEmitter() {\n    return this.toastEventEmitter;\n  }\n\n  /**\n   * Add success message\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public success(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'success', timeout);\n  }\n\n  /**\n   * Add error message\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public error(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'error', timeout);\n  }\n\n  /**\n   * Add warning message\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public warning(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'warning', timeout);\n  }\n\n  /**\n   *\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public info(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'info', timeout);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ngZone",
                        "type": "NgZone"
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "ngZone",
                        "type": "NgZone",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UglaRulesService",
            "id": "injectable-UglaRulesService-95657da3748644318c48c35c790c3770",
            "file": "projects/ugla-rules/src/lib/ugla-rules.service.ts",
            "properties": [
                {
                    "name": "application",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "applicationAcronym",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "feature",
                    "type": "Feature",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "featureAcronym",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "operations",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "feature",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 141,
                    "description": "<p>CREATE permission</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3133,
                                "end": 3140,
                                "flags": 0,
                                "escapedText": "feature"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 3127,
                                "end": 3132,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>– Optional Feature&#39;s acronym</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3176,
                                "end": 3183,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<ul>\n<li>Return if has a CREATE permission</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "createRules",
                    "args": [
                        {
                            "name": "rules",
                            "type": "any[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "description": "<p>Create a Application object</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 593,
                                "end": 598,
                                "flags": 0,
                                "escapedText": "rules"
                            },
                            "type": "any[]",
                            "tagName": {
                                "pos": 587,
                                "end": 592,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is array applications returned jwt token</p>\n"
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "feature",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 160,
                    "description": "<p>DELETE permission</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3619,
                                "end": 3626,
                                "flags": 0,
                                "escapedText": "feature"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 3613,
                                "end": 3618,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>– Optional Feature&#39;s acronym</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3662,
                                "end": 3669,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<ul>\n<li>Return if has a DELETE permission</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "feature",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 122,
                    "description": "<p>EDIT permission</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2652,
                                "end": 2659,
                                "flags": 0,
                                "escapedText": "feature"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 2646,
                                "end": 2651,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>– Optional Feature&#39;s acronym</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2695,
                                "end": 2701,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<ul>\n<li>Return if has a EDIT permission</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "getFeature",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 76,
                    "description": "<p>Get a feature acronym</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1634,
                                "end": 1641,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>string - feature acrnym</p>\n"
                        }
                    ]
                },
                {
                    "name": "getOperations",
                    "args": [
                        {
                            "name": "featureAcronym",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "[]",
                    "typeParameters": [],
                    "line": 84,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "featureAcronym",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFeature",
                    "args": [
                        {
                            "name": "featureAcronym",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "description": "<p>Set feature on specific object</p>\n",
                    "jsdoctags": [
                        {
                            "name": "featureAcronym",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOperations",
                    "args": [
                        {
                            "name": "featureAcronym",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "featureAcronym",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "view",
                    "args": [
                        {
                            "name": "feature",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 103,
                    "description": "<p>VIEW permission</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2173,
                                "end": 2180,
                                "flags": 0,
                                "escapedText": "feature"
                            },
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "pos": 2167,
                                "end": 2172,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>– Optional Feature&#39;s acronym</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2216,
                                "end": 2222,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<ul>\n<li>Return if has a VIEW permission</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Application } from './models/application';\nimport { Optional, Injectable } from '@angular/core';\nimport { Feature } from './models/feature';\n\nexport class RulesConfig {\n  acronym = null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UglaRulesService {\n  applicationAcronym: string;\n  featureAcronym: string;\n  application: Application;\n  feature: Feature;\n  operations: any[];\n\n  constructor(@Optional() config: RulesConfig) {\n    this.applicationAcronym = config.acronym;\n    if (!config.acronym) {\n      return;\n    }\n  }\n\n  /**\n   * Create a Application object\n   * @param rules is array applications returned jwt token\n   */\n  createRules(rules: any[]) {\n    rules.forEach(item => {\n      if (item.acronym === this.applicationAcronym) {\n        this.application = new Application(\n          item.code,\n          item.acronym,\n          item.name,\n          []\n        );\n\n        item.features.forEach(fe => {\n          const feature = new Feature(\n            fe.code,\n            fe.acronym,\n            fe.name,\n            fe.parent,\n            fe.operations\n          );\n          this.application.features.push(feature);\n        });\n      }\n    });\n  }\n\n  /**\n   * Set feature on specific object\n   * @param string - Feature's acronym\n   */\n  setFeature(featureAcronym: string) {\n    this.featureAcronym = featureAcronym;\n\n    if (this.application !== undefined) {\n      this.application.features.forEach(item => {\n        if (item.acronym === featureAcronym) {\n          this.feature = item;\n        }\n      });\n\n      this.setOperations(featureAcronym);\n    }\n  }\n\n  /**\n   * Get a feature acronym\n   * @returns string - feature acrnym\n   */\n  getFeature() {\n    return this.featureAcronym;\n  }\n\n  private setOperations(featureAcronym: string) {\n    this.operations = this.getOperations(featureAcronym);\n  }\n\n  private getOperations(featureAcronym: string) {\n    let operations: [];\n\n    if (this.application) {\n      this.application.features.forEach(item => {\n        if (item.acronym === featureAcronym) {\n          operations = item.operations;\n        }\n      });\n    }\n\n    return operations;\n  }\n\n  /**\n   * VIEW permission\n   * @param feature – Optional Feature's acronym\n   * @return - Return if has a VIEW permission\n   */\n  view(feature?: string): boolean {\n    let operations = this.operations;\n\n    if (!this.operations && feature === undefined) {\n      return false;\n    }\n\n    if (feature !== undefined) {\n      operations = this.getOperations(feature);\n    }\n\n    return operations !== undefined ? operations.find(v => v.acronym === 'VW') !== undefined : false;\n  }\n\n  /**\n   * EDIT permission\n   * @param feature – Optional Feature's acronym\n   * @return - Return if has a EDIT permission\n   */\n  edit(feature?: string): boolean {\n    let operations = this.operations;\n\n    if (!this.operations && feature === undefined) {\n      return false;\n    }\n\n    if (feature !== undefined) {\n      operations = this.getOperations(feature);\n    }\n\n    return operations !== undefined ? operations.find(v => v.acronym === 'ED') !== undefined : false;\n  }\n\n  /**\n   * CREATE permission\n   * @param feature – Optional Feature's acronym\n   * @returns - Return if has a CREATE permission\n   */\n  create(feature?: string): boolean {\n    let operations = this.operations;\n\n    if (!this.operations && feature === undefined) {\n      return false;\n    }\n\n    if (feature !== undefined) {\n      operations = this.getOperations(feature);\n    }\n\n    return operations !== undefined ? operations.find(v => v.acronym === 'CR') !== undefined : false;\n  }\n\n  /**\n   * DELETE permission\n   * @param feature – Optional Feature's acronym\n   * @returns - Return if has a DELETE permission\n   */\n  delete(feature?: string): boolean {\n    let operations = this.operations;\n\n    if (!this.operations && feature === undefined) {\n      return false;\n    }\n\n    if (feature !== undefined) {\n      operations = this.getOperations(feature);\n    }\n\n    return operations !== undefined ? operations.find(v => v.acronym === 'DE') !== undefined : false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "config",
                        "type": "RulesConfig"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "RulesConfig",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UglaService",
            "id": "injectable-UglaService-1c57d20aacc3239c442fe8d990304302",
            "file": "projects/ugla/src/lib/ugla.service.ts",
            "properties": [
                {
                    "name": "_headerShadow",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Set if the header has shadow</p>\n",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_theme",
                    "defaultValue": "Themes.WHITE",
                    "type": "Themes",
                    "optional": false,
                    "description": "<p>Set default theme</p>\n",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_version",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Set version</p>\n",
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "metaTheme",
                    "defaultValue": "document.createElement('meta')",
                    "type": "",
                    "optional": false,
                    "description": "<p>Create a meta tag about theme</p>\n",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "metaVersion",
                    "defaultValue": "document.createElement('meta')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "browseIdentify",
                    "args": [],
                    "optional": false,
                    "returnType": "\"opera\" | \"chrome\" | \"safari\" | \"firefox\" | \"ie\" | \"unknown-browse\"",
                    "typeParameters": [],
                    "line": 88,
                    "description": "<p>Browse identify\nreturn a classe with browse name</p>\n"
                },
                {
                    "name": "hasToolBar",
                    "args": [
                        {
                            "name": "toolbar",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "description": "<p>Add class do body if there&#39;s toolbar on the page</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2949,
                                "end": 2956,
                                "flags": 0,
                                "escapedText": "toolbar"
                            },
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 2943,
                                "end": 2948,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>false | element</p>\n"
                        }
                    ]
                },
                {
                    "name": "meta",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "description": "<p>Create meta tag and include theme class on body</p>\n"
                },
                {
                    "name": "soIdentify",
                    "args": [],
                    "optional": false,
                    "returnType": "\"windows\" | \"macos\" | \"unix\" | \"linux\" | \"unknown-os\"",
                    "typeParameters": [],
                    "line": 108,
                    "description": "<p>Operation System Identify\nreturn a class with so name</p>\n"
                }
            ],
            "description": "<p>Injectable</p>\n<p>Use this service to set the default value</p>\n",
            "sourceCode": "import { Injectable, Optional, Output, EventEmitter } from '@angular/core';\nimport { Themes } from './enum/themes.enum';\nimport { VERSION } from './config';\n\n/**\n * Theme configuration default\n */\nexport class ThemeConfig {\n  /**\n   * Theme default\n   */\n  themeName = Themes.WHITE;\n}\n\n/**\n * Injectable\n *\n * Use this service to set the default value\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UglaService {\n\n  /**\n   * Emitter for header shadow changed\n   */\n  @Output() changedHeaderShadow = new EventEmitter<boolean>();\n\n  /**\n   * Set default theme\n   */\n  private _theme: Themes = Themes.WHITE;\n\n  /**\n   * Set version\n   */\n  private _version: string;\n\n  /**\n   * Set if the header has shadow\n   */\n  private _headerShadow: boolean;\n\n  /**\n   * Create a meta tag about theme\n   */\n  private metaTheme = document.createElement('meta');\n  private metaVersion = document.createElement('meta');\n\n  /**\n   * Receives the configuration set on app.module.ts\n   *\n   * @param config: ThemeConfig\n   */\n  constructor(@Optional() config: ThemeConfig) {\n    if (config) {\n      this._theme = config.themeName;\n      this._version = VERSION;\n      this.meta();\n    }\n  }\n\n  /**\n   * Create meta tag and include theme class on body\n   */\n  meta() {\n    this.metaTheme.setAttribute('name', 'ugla-theme');\n    this.metaTheme.setAttribute('content', this._theme);\n\n    document.head.appendChild(this.metaTheme);\n    document.body.classList.add(this._theme);\n\n    this.metaVersion.setAttribute('name', 'ugla-version');\n    this.metaVersion.setAttribute('content', this._version);\n\n    document.head.appendChild(this.metaVersion);\n    document.body.classList.add(this._version);\n\n    document.body.classList.add(this.browseIdentify());\n    document.body.classList.add(this.soIdentify());\n  }\n\n  /**\n   * Browse identify\n   * return a classe with browse name\n   */\n  browseIdentify() {\n    if ((navigator.userAgent.indexOf('Opera') || navigator.userAgent.indexOf('OPR')) !== -1 ) {\n      return 'opera';\n    } else if (navigator.userAgent.indexOf('Chrome') !== -1 ) {\n      return 'chrome';\n    } else if (navigator.userAgent.indexOf('Safari') !== -1) {\n      return 'safari';\n    } else if (navigator.userAgent.indexOf('Firefox') !== -1 )  {\n      return 'firefox';\n    } else if ((navigator.userAgent.indexOf('MSIE') !== -1 )) {\n      return 'ie';\n    } else {\n      return 'unknown-browse';\n    }\n  }\n\n  /**\n   * Operation System Identify\n   * return a class with so name\n   */\n  soIdentify() {\n    if (navigator.appVersion.indexOf('Win') !== -1) {\n      return 'windows';\n    } else if (navigator.appVersion.indexOf('Mac') !== -1) {\n      return 'macos';\n    } else if (navigator.appVersion.indexOf('X11') !== -1) {\n      return 'unix';\n    } else if (navigator.appVersion.indexOf('Linux') !== -1) {\n      return 'linux';\n    } else {\n      return 'unknown-os';\n    }\n  }\n\n  /**\n   * Add class do body if there's toolbar on the page\n   * @param toolbar false | element\n   */\n  hasToolBar(toolbar = false) {\n    if (toolbar) {\n      document.body.classList.add('has-toolbar');\n    } else {\n      document.body.classList.remove('has-toolbar');\n    }\n  }\n\n  /**\n   * Get theme\n   */\n  get theme() {\n    return this._theme;\n  }\n\n  /**\n   * Get version\n   */\n  get version() {\n    return this._version;\n  }\n\n  /**\n   * Get color of the theme\n   */\n  get color() {\n    const splitted = this._theme.split('-');\n    return splitted[splitted.length - 1];\n  }\n\n  /**\n   * Set the header shadow indicator value\n   */\n  set headerShadow(visible: boolean) {\n    this._headerShadow = visible;\n    this.changedHeaderShadow.emit(visible);\n  }\n\n  /**\n   * Get the value of header shadow indicator\n   */\n  get headerShadow(): boolean {\n    return this._headerShadow;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the configuration set on app.module.ts</p>\n",
                "args": [
                    {
                        "name": "config",
                        "type": "ThemeConfig"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 987,
                            "end": 993,
                            "flags": 0,
                            "escapedText": "config"
                        },
                        "type": "ThemeConfig",
                        "tagName": {
                            "pos": 981,
                            "end": 986,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ThemeConfig</p>\n"
                    }
                ]
            },
            "accessors": {
                "theme": {
                    "name": "theme",
                    "getSignature": {
                        "name": "theme",
                        "type": "",
                        "returnType": "",
                        "line": 137,
                        "description": "<p>Get theme</p>\n"
                    }
                },
                "version": {
                    "name": "version",
                    "getSignature": {
                        "name": "version",
                        "type": "",
                        "returnType": "",
                        "line": 144,
                        "description": "<p>Get version</p>\n"
                    }
                },
                "color": {
                    "name": "color",
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "",
                        "line": 151,
                        "description": "<p>Get color of the theme</p>\n"
                    }
                },
                "headerShadow": {
                    "name": "headerShadow",
                    "setSignature": {
                        "name": "headerShadow",
                        "type": "void",
                        "args": [
                            {
                                "name": "visible",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 159,
                        "description": "<p>Set the header shadow indicator value</p>\n",
                        "jsdoctags": [
                            {
                                "name": "visible",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "headerShadow",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 167,
                        "description": "<p>Get the value of header shadow indicator</p>\n"
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "Application",
            "id": "class-Application-0b3444588448d5cc9dc8eda114f64693",
            "file": "projects/ugla-rules/src/lib/models/application.ts",
            "type": "class",
            "sourceCode": "import { Feature } from './feature';\n\nexport class Application {\n  code: number;\n  acronym: string;\n  name: string;\n  features: Feature[];\n\n  constructor(code: number, acronym: string, name: string, features?: Feature[]) {\n    this.code = code;\n    this.acronym = acronym;\n    this.name = name;\n    this.features = (features) ? features : [];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "code",
                        "type": "number"
                    },
                    {
                        "name": "acronym",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "features",
                        "type": "Feature[]",
                        "optional": true
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "code",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "acronym",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "features",
                        "type": "Feature[]",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "acronym",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "code",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "features",
                    "type": "Feature[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AsideItem",
            "id": "class-AsideItem-117e95b21804258c9932083431f29729",
            "file": "projects/ugla/src/lib/models/aside-item.ts",
            "type": "class",
            "sourceCode": "export class AsideItem {\n  public description: string;\n  public url: string;\n  public active: boolean;\n  public visible: boolean;\n  public hideMobile: boolean;\n  public icon: string;\n  public submenu: AsideItem[];\n  public open = false;\n\n  /**\n   * @param description - menu text\n   * @param url - redirect URL\n   * @param visible - if false, the menu item will not be shown\n   * @param hideMobile - default: false. If true, should hide on mobile devices\n   * @param iocon - default: ''\n   */\n  constructor(description: string, url: string, visible?: boolean, hideMobile?: boolean, icon?: string, submenu?: AsideItem[]) {\n    this.description = description;\n    this.url = url;\n    this.visible = (visible !== undefined) ? visible : true;\n    this.hideMobile = (hideMobile !== undefined) ? hideMobile : false;\n    this.icon = (icon !== undefined) ? icon : null;\n    this.submenu = (submenu !== undefined) ? submenu : null;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "visible",
                        "type": "boolean",
                        "optional": true
                    },
                    {
                        "name": "hideMobile",
                        "type": "boolean",
                        "optional": true
                    },
                    {
                        "name": "icon",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "submenu",
                        "type": "AsideItem[]",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 256,
                            "end": 267,
                            "flags": 0,
                            "escapedText": "description"
                        },
                        "type": "string",
                        "tagName": {
                            "pos": 250,
                            "end": 255,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>menu text</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 292,
                            "end": 295,
                            "flags": 0,
                            "escapedText": "url"
                        },
                        "type": "string",
                        "tagName": {
                            "pos": 286,
                            "end": 291,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>redirect URL</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 323,
                            "end": 330,
                            "flags": 0,
                            "escapedText": "visible"
                        },
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "pos": 317,
                            "end": 322,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>if false, the menu item will not be shown</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 387,
                            "end": 397,
                            "flags": 0,
                            "escapedText": "hideMobile"
                        },
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "pos": 381,
                            "end": 386,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>default: false. If true, should hide on mobile devices</li>\n</ul>\n"
                    },
                    {
                        "name": "icon",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "submenu",
                        "type": "AsideItem[]",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hideMobile",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submenu",
                    "type": "AsideItem[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "visible",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Auth",
            "id": "class-Auth-d07ac91cc35de77b6c8f65aec62a4ee1",
            "file": "projects/ugla/src/lib/models/auth.ts",
            "type": "class",
            "sourceCode": "export class Auth {\n  public user: string;\n  public pass: string;\n\n  constructor(user: string, pass: string) {\n    this.user = user;\n    this.pass = pass;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "user",
                        "type": "string"
                    },
                    {
                        "name": "pass",
                        "type": "string"
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pass",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "pass",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CheckboxColumnItem",
            "id": "class-CheckboxColumnItem-cce6c5f8a1f54833da901c6d5dbd7d2f",
            "file": "projects/ugla/src/lib/models/checkbox/checkbox-column-item.ts",
            "type": "class",
            "sourceCode": "export class CheckboxColumnItem<T> {\n\n  /**\n   * Property to indicate if the item is selected\n   */\n  selected = false;\n  /**\n   * Original type value of item\n   */\n  value: T;\n\n  /**\n   * @ignore\n   */\n  constructor(value: T) {\n    this.value = value;\n  }\n}\n",
            "properties": [
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Property to indicate if the item is selected</p>\n",
                    "line": 9
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "<p>Original type value of item</p>\n",
                    "line": 13
                }
            ],
            "description": "<p>Class for item of checkbox of specified type.</p>\n",
            "rawdescription": "Class for item of checkbox of specified type.",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CheckboxListColumn",
            "id": "class-CheckboxListColumn-55dc2221a0ac60ff51e1214926d969f1",
            "file": "projects/ugla/src/lib/models/checkbox/checkbox-list-column.ts",
            "type": "class",
            "sourceCode": "import { CheckboxColumnItem } from './checkbox-column-item';\n\n/**\n * Class for list of items of checkbox of specified type.\n */\nexport class CheckboxListColumn<T> extends Array<CheckboxColumnItem<T>> {\n\n  /**\n   * @ignore\n   */\n  private constructor(list: T[]) {\n    super();\n  }\n\n  /**\n   * Converts the list of items of specified type into a CheckboxListColumn\n   * @param list of CheckboxListColumn\n   */\n  static create<T>(list: T[]): CheckboxListColumn<T> {\n    const cp = Object.create(CheckboxListColumn.prototype);\n    list.forEach(e => cp.push(new CheckboxColumnItem(e)));\n    return cp;\n  }\n\n  /**\n   * Check if any item of the list is selected\n   */\n  isAnySelected(): boolean {\n    return super.some((e: CheckboxColumnItem<T>) => e.selected);\n  }\n\n  /**\n   * Get all selected items of the list\n   */\n  getSelected(): Array<T> {\n    return super.filter(e => e.selected).map(e => e.value);\n  }\n\n}\n",
            "properties": [],
            "description": "<p>Class for list of items of checkbox of specified type.</p>\n",
            "rawdescription": "Class for list of items of checkbox of specified type.",
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "list",
                            "type": "T[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "CheckboxListColumn<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 19,
                    "description": "<p>Converts the list of items of specified type into a CheckboxListColumn</p>\n",
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 375,
                                "end": 379,
                                "flags": 0,
                                "escapedText": "list"
                            },
                            "type": "T[]",
                            "tagName": {
                                "pos": 369,
                                "end": 374,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of CheckboxListColumn</p>\n"
                        }
                    ]
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<T>",
                    "typeParameters": [],
                    "line": 35,
                    "description": "<p>Get all selected items of the list</p>\n"
                },
                {
                    "name": "isAnySelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 28,
                    "description": "<p>Check if any item of the list is selected</p>\n"
                }
            ],
            "indexSignatures": [],
            "extends": "Array",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CodeName",
            "id": "class-CodeName-1ade4847b54f3e1e5cc0e67309d4f73c",
            "file": "projects/ugla/src/lib/models/code-name.ts",
            "type": "class",
            "sourceCode": "export class CodeName {\n  public code: number;\n  public name: string;\n\n  static fromJSON(objs?: any[]): CodeName[] {\n    const results: CodeName[] = [];\n    for (let index = 0; index < objs.length; index++) {\n      results.push(new CodeName(objs[index].code, objs[index].name));\n    }\n\n    return results;\n  }\n\n  constructor(code: number, name: string) {\n    this.code = code;\n    this.name = name;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "code",
                        "type": "number"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "code",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "code",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fromJSON",
                    "args": [
                        {
                            "name": "objs",
                            "type": "any[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "CodeName[]",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "objs",
                            "type": "any[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Feature",
            "id": "class-Feature-62f47cf8349347755e0bd9e47ae59eba",
            "file": "projects/ugla-rules/src/lib/models/feature.ts",
            "type": "class",
            "sourceCode": "export class Feature {\n  code: number;\n  acronym: string;\n  name: string;\n  parent: number;\n  operations: [];\n\n  constructor(code: number, acronym: string, name: string, parent?: number, operations?: []) {\n    this.code = code;\n    this.acronym = acronym;\n    this.name = name;\n    this.parent = (parent) ? parent : null;\n    this.operations = (operations) ? operations : [];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "code",
                        "type": "number"
                    },
                    {
                        "name": "acronym",
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "parent",
                        "type": "number",
                        "optional": true
                    },
                    {
                        "name": "operations",
                        "type": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "code",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "acronym",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parent",
                        "type": "number",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "operations",
                        "type": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "acronym",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "code",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "operations",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "parent",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Header",
            "id": "class-Header-6f4a79bdbe729dcdc19e93264489e193",
            "file": "projects/ugla/src/lib/models/header.ts",
            "type": "class",
            "sourceCode": "import { People } from './people';\nimport { Menu } from './menu';\n\nexport class Header {\n  public brandName: string;\n  public people: People;\n  public menu: Menu;\n  public homePath?: string;\n  public brandImage: string;\n  public hasLink = true;\n\n  constructor(brandName: string, brandImage: string, homePath?: string, hasLink?: boolean) {\n    this.brandImage =  (!!brandImage) ? brandImage : '';\n    this.brandName = (!!brandName) ? brandName : '';\n\n    this.hasLink = hasLink !== undefined ? hasLink : this.hasLink;\n\n    if (this.hasLink) {\n      this.homePath = (!!homePath) ? homePath : 'home';\n    } else {\n      this.homePath = '';\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "brandName",
                        "type": "string"
                    },
                    {
                        "name": "brandImage",
                        "type": "string"
                    },
                    {
                        "name": "homePath",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "hasLink",
                        "type": "boolean",
                        "optional": true
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "brandName",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "brandImage",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "homePath",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hasLink",
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "brandImage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "brandName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hasLink",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "homePath",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "menu",
                    "type": "Menu",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "people",
                    "type": "People",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Link",
            "id": "class-Link-f8430c31b0e7647f6640d7507c4cdfc8",
            "file": "projects/ugla/src/lib/models/link.ts",
            "type": "class",
            "sourceCode": "export class Link {\n  public description: string;\n  public path: string;\n  public active: boolean;\n  public label: string;\n  public id: string;\n\n  constructor(description: string, path?: string, active?: boolean, label?: string, id?: string) {\n    this.description = description;\n    this.path = path || null;\n    this.active = active || false;\n    this.label = label || description;\n    this.id = id;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "active",
                        "type": "boolean",
                        "optional": true
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "description",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "active",
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "label",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "List",
            "id": "class-List-78b7f5c66ec5bc6d21c5a957b76375a9",
            "file": "projects/ugla/src/lib/models/list.ts",
            "type": "class",
            "sourceCode": "import { Link } from './link';\n\nexport class List {\n  public name: string;\n  public links: Link[];\n\n  constructor(name: string, links?: Link[]) {\n    this.name = name;\n    this.links = links;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "links",
                        "type": "Link[]",
                        "optional": true
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "links",
                        "type": "Link[]",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "links",
                    "type": "Link[]",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ListOptionsItem",
            "id": "class-ListOptionsItem-35cec6ee3d16f9d1970b63de9ebbdad7",
            "file": "projects/ugla/src/lib/models/items-options.ts",
            "type": "class",
            "sourceCode": "export class ListOptionsItem {\n  name: string;\n  active: boolean;\n\n  constructor(name: string = null, active: boolean = true) {\n    this.name = name;\n    this.active = active;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "defaultValue": "null"
                    },
                    {
                        "name": "active",
                        "type": "boolean",
                        "defaultValue": "true"
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "defaultValue": "null",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "active",
                        "type": "boolean",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Menu",
            "id": "class-Menu-99df68b3ac8bcc64770b9282629aa152",
            "file": "projects/ugla/src/lib/models/menu.ts",
            "type": "class",
            "sourceCode": "import { MenuItem } from './menu-item';\n\nexport class Menu {\n  public items: MenuItem[];\n\n  constructor(items: MenuItem[]) {\n    this.items = items.filter(item => item.visible);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "items",
                        "type": "MenuItem[]"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "items",
                        "type": "MenuItem[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "items",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MenuItem",
            "id": "class-MenuItem-c33df112588cd477e2836b785de1b76e",
            "file": "projects/ugla/src/lib/models/menu-item.ts",
            "type": "class",
            "sourceCode": "import { Menu } from './menu';\nexport class MenuItem {\n  public description: string;\n  public url: string;\n  public active: boolean;\n  public visible: boolean;\n  public hideMobile: boolean;\n  public icon: string;\n\n  /**\n   * @param description - menu text\n   * @param url - redirect URL\n   * @param visible - if false, the menu item will not be shown\n   * @param hideMobile - default: false. If true, should hide on mobile devices\n   * @param iocon - default: ''\n   */\n  constructor(description: string, url: string, visible?: boolean, hideMobile?: boolean, icon?: string) {\n    this.description = description;\n    this.url = url;\n    this.visible = (visible !== undefined) ? visible : true;\n    this.hideMobile = (hideMobile !== undefined) ? hideMobile : false;\n    this.icon = (icon !== undefined) ? icon : null;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "visible",
                        "type": "boolean",
                        "optional": true
                    },
                    {
                        "name": "hideMobile",
                        "type": "boolean",
                        "optional": true
                    },
                    {
                        "name": "icon",
                        "type": "string",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 232,
                            "end": 243,
                            "flags": 0,
                            "escapedText": "description"
                        },
                        "type": "string",
                        "tagName": {
                            "pos": 226,
                            "end": 231,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>menu text</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 268,
                            "end": 271,
                            "flags": 0,
                            "escapedText": "url"
                        },
                        "type": "string",
                        "tagName": {
                            "pos": 262,
                            "end": 267,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>redirect URL</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 299,
                            "end": 306,
                            "flags": 0,
                            "escapedText": "visible"
                        },
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "pos": 293,
                            "end": 298,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>if false, the menu item will not be shown</li>\n</ul>\n"
                    },
                    {
                        "name": {
                            "pos": 363,
                            "end": 373,
                            "flags": 0,
                            "escapedText": "hideMobile"
                        },
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "pos": 357,
                            "end": 362,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<ul>\n<li>default: false. If true, should hide on mobile devices</li>\n</ul>\n"
                    },
                    {
                        "name": "icon",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hideMobile",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "visible",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Message",
            "id": "class-Message-5298a966b4824dbf3702ff23b987d658",
            "file": "projects/ugla/src/lib/components/toast/toast.service.ts",
            "type": "class",
            "sourceCode": "import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nexport class Message {\n  id: string;\n  content: string;\n  title: string;\n  type: string;\n  dismissed = false;\n  timeout: number;\n  cleanOld: boolean;\n\n  /**\n   * triggered when toast is active\n   */\n  onShown: Observable<any>;\n\n  /**\n   * triggered when toast is destroyed\n   */\n  onHidden: Observable<any>;\n\n  private _afterShow = new Subject<any>();\n  private _afterHidden = new Subject<any>();\n\n  constructor(title, content, type?, timeout?, cleanOld?) {\n    this.title = title;\n    this.content = content;\n    this.type = type || 'info';\n    this.dismissed = false;\n    this.timeout = timeout;\n    this.cleanOld = cleanOld || true;\n    this.onShown = this._afterShow.asObservable();\n    this.onHidden = this._afterHidden.asObservable();\n  }\n\n  triggerOnShow(value) {\n    this._afterShow.next(value);\n    this._afterShow.complete();\n  }\n\n  triggerOnHidden() {\n    this._afterHidden.next();\n    this._afterHidden.complete();\n  }\n}\n\nexport enum NotificationCommand {\n  CLEAR_ALL = 'clearAll',\n  CLOSE = 'close',\n  SET = 'set'\n}\n\nexport interface ToastEvent {\n  command: NotificationCommand;\n  notification?: Message;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n\n  private toastEventEmitter = new Subject<ToastEvent>();\n\n  constructor(private ngZone: NgZone) {}\n\n  /**\n   * Add a {@link Message} to notifications.\n   * @param title of message\n   * @param content of message\n   * @param type Is optional. Available options: 'success', 'error', 'warning', 'info'\n   * @param timeout time in milliseconds. Default: error notifications hasn't timeout\n   */\n  private setToastMessage(title: string, content: string, type?: string, timeout?: number) {\n    return this.ngZone.run(() => {\n      const message =  new Message(title, content, type, timeout);\n      this.toastEventEmitter.next({ command: NotificationCommand.SET, notification: message });\n      return message;\n    });\n  }\n\n  // closes a toast message\n  dismissToastMessage(message: Message) {\n    return this.ngZone.run(() => {\n      this.toastEventEmitter.next({ command: NotificationCommand.CLOSE, notification: message });\n      return message;\n    });\n  }\n\n  // closes all the toast messages\n  dismissAllToastMessages() {\n    this.ngZone.run(() => {\n      this.toastEventEmitter.next({ command: NotificationCommand.CLEAR_ALL });\n    });\n  }\n\n  getEmitter() {\n    return this.toastEventEmitter;\n  }\n\n  /**\n   * Add success message\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public success(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'success', timeout);\n  }\n\n  /**\n   * Add error message\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public error(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'error', timeout);\n  }\n\n  /**\n   * Add warning message\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public warning(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'warning', timeout);\n  }\n\n  /**\n   *\n   * @param title of message\n   * @param content of message\n   * @param timeout to close\n   */\n  public info(title: string, content: string, timeout?: number) {\n    return this.setToastMessage(title, content, 'info', timeout);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "title",
                        "type": ""
                    },
                    {
                        "name": "content",
                        "type": ""
                    },
                    {
                        "name": "type",
                        "type": "",
                        "optional": true
                    },
                    {
                        "name": "timeout",
                        "type": "",
                        "optional": true
                    },
                    {
                        "name": "cleanOld",
                        "type": "",
                        "optional": true
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "content",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeout",
                        "type": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cleanOld",
                        "type": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_afterHidden",
                    "defaultValue": "new Subject<any>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_afterShow",
                    "defaultValue": "new Subject<any>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "cleanOld",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dismissed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "onHidden",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "<p>triggered when toast is destroyed</p>\n",
                    "line": 21
                },
                {
                    "name": "onShown",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "<p>triggered when toast is active</p>\n",
                    "line": 16
                },
                {
                    "name": "timeout",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "triggerOnHidden",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "triggerOnShow",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Modal",
            "id": "class-Modal-20e2b7e9840d9c52167e0953a0fd3f94",
            "file": "projects/ugla/src/lib/components/modal/modal.service.ts",
            "type": "class",
            "sourceCode": "import {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\nexport class Modal {\n  title: string;\n  text: string;\n  type: string;\n  hasIcon: boolean;\n  open: boolean;\n\n  constructor(title, text, open?, type?, hasIcon?) {\n    this.title = title;\n    this.text = text;\n    this.type = type || 'info';\n    this.hasIcon = (hasIcon === undefined) ? true : hasIcon;\n    this.open = (open === undefined) ? true : open;\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ModalService {\n\n  modal: Modal;\n  private modalEventEmitter = new Subject<Modal>();\n\n  constructor() {\n  }\n\n  /**\n   * Open a success modal.\n   * @param title of message\n   * @param text of message\n   * @param hasIcon Optional, default is true\n   */\n  public success(title: string, text: string, hasIcon?: boolean) {\n    return this.open(title, text, 'success', hasIcon);\n  }\n\n  /**\n   * Open an error modal.\n   * @param title of message\n   * @param text of message\n   * @param hasIcon Optional, default is true\n   */\n  public error(title: string, text: string, hasIcon?: boolean) {\n    return this.open(title, text, 'error', hasIcon);\n  }\n\n  /**\n   * Open a warning modal.\n   * @param title of message\n   * @param text of message\n   * @param hasIcon Optional, default is true\n   */\n  public warning(title: string, text: string, hasIcon?: boolean) {\n    return this.open(title, text, 'warning', hasIcon);\n  }\n\n  /**\n   * Open an info modal.\n   * @param title of message\n   * @param text of message\n   * @param hasIcon Optional, default is true\n   */\n  public info(title: string, text: string, hasIcon?: boolean) {\n    return this.open(title, text, 'info', hasIcon);\n  }\n\n  public closeModal() {\n    this.modal.open = false;\n    this.modalEventEmitter.next(this.modal);\n    document.body.classList.remove('no-scroll');\n  }\n\n\n  getModalEmitter() {\n    return this.modalEventEmitter;\n  }\n\n  /**\n   * Open a modal.\n   * @param title of message\n   * @param text of message\n   * @param type Available options: 'success', 'error', 'warning', 'info'\n   * @param hasIcon Optional, default is true\n   */\n  private open(title: string, text: string, type: string, hasIcon?: boolean) {\n    this.modal = new Modal(title, text, true, type, hasIcon);\n    document.body.classList.add('no-scroll');\n    this.modal.open = true;\n    this.modalEventEmitter.next(this.modal);\n    return this.modal;\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "title",
                        "type": ""
                    },
                    {
                        "name": "text",
                        "type": ""
                    },
                    {
                        "name": "open",
                        "type": "",
                        "optional": true
                    },
                    {
                        "name": "type",
                        "type": "",
                        "optional": true
                    },
                    {
                        "name": "hasIcon",
                        "type": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "title",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "text",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "open",
                        "type": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hasIcon",
                        "type": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "hasIcon",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "open",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Options",
            "id": "class-Options-261c0a6e64d82bdf1d8714ed66aaad43",
            "file": "projects/ugla/src/lib/models/options.ts",
            "type": "class",
            "sourceCode": "export class Options {\n  public value: string;\n  public description: string;\n  public checked: boolean;\n  public color: string;\n  public groupName: string;\n\n  constructor(description: string, value: string, checked?: boolean, color?: string, groupName?: string) {\n    this.value = value;\n    this.description = description;\n    this.checked = checked;\n    this.color = color;\n    this.groupName = groupName;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "description",
                        "type": "string"
                    },
                    {
                        "name": "value",
                        "type": "string"
                    },
                    {
                        "name": "checked",
                        "type": "boolean",
                        "optional": true
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "groupName",
                        "type": "string",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "description",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checked",
                        "type": "boolean",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "groupName",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "groupName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "People",
            "id": "class-People-83a0054b65cd19279187abf77b2b6a8b",
            "file": "projects/ugla/src/lib/models/people.ts",
            "type": "class",
            "sourceCode": "export class People {\n  public name: string;\n  public email: string;\n  public photo: string;\n\n  constructor(name: string, email: string, photo: string) {\n    this.name = name;\n    this.email = email;\n    this.photo = photo;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "name": "photo",
                        "type": "string"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "email",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "photo",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "photo",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RulesConfig",
            "id": "class-RulesConfig-95657da3748644318c48c35c790c3770",
            "file": "projects/ugla-rules/src/lib/ugla-rules.service.ts",
            "type": "class",
            "sourceCode": "import { Application } from './models/application';\nimport { Optional, Injectable } from '@angular/core';\nimport { Feature } from './models/feature';\n\nexport class RulesConfig {\n  acronym = null;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UglaRulesService {\n  applicationAcronym: string;\n  featureAcronym: string;\n  application: Application;\n  feature: Feature;\n  operations: any[];\n\n  constructor(@Optional() config: RulesConfig) {\n    this.applicationAcronym = config.acronym;\n    if (!config.acronym) {\n      return;\n    }\n  }\n\n  /**\n   * Create a Application object\n   * @param rules is array applications returned jwt token\n   */\n  createRules(rules: any[]) {\n    rules.forEach(item => {\n      if (item.acronym === this.applicationAcronym) {\n        this.application = new Application(\n          item.code,\n          item.acronym,\n          item.name,\n          []\n        );\n\n        item.features.forEach(fe => {\n          const feature = new Feature(\n            fe.code,\n            fe.acronym,\n            fe.name,\n            fe.parent,\n            fe.operations\n          );\n          this.application.features.push(feature);\n        });\n      }\n    });\n  }\n\n  /**\n   * Set feature on specific object\n   * @param string - Feature's acronym\n   */\n  setFeature(featureAcronym: string) {\n    this.featureAcronym = featureAcronym;\n\n    if (this.application !== undefined) {\n      this.application.features.forEach(item => {\n        if (item.acronym === featureAcronym) {\n          this.feature = item;\n        }\n      });\n\n      this.setOperations(featureAcronym);\n    }\n  }\n\n  /**\n   * Get a feature acronym\n   * @returns string - feature acrnym\n   */\n  getFeature() {\n    return this.featureAcronym;\n  }\n\n  private setOperations(featureAcronym: string) {\n    this.operations = this.getOperations(featureAcronym);\n  }\n\n  private getOperations(featureAcronym: string) {\n    let operations: [];\n\n    if (this.application) {\n      this.application.features.forEach(item => {\n        if (item.acronym === featureAcronym) {\n          operations = item.operations;\n        }\n      });\n    }\n\n    return operations;\n  }\n\n  /**\n   * VIEW permission\n   * @param feature – Optional Feature's acronym\n   * @return - Return if has a VIEW permission\n   */\n  view(feature?: string): boolean {\n    let operations = this.operations;\n\n    if (!this.operations && feature === undefined) {\n      return false;\n    }\n\n    if (feature !== undefined) {\n      operations = this.getOperations(feature);\n    }\n\n    return operations !== undefined ? operations.find(v => v.acronym === 'VW') !== undefined : false;\n  }\n\n  /**\n   * EDIT permission\n   * @param feature – Optional Feature's acronym\n   * @return - Return if has a EDIT permission\n   */\n  edit(feature?: string): boolean {\n    let operations = this.operations;\n\n    if (!this.operations && feature === undefined) {\n      return false;\n    }\n\n    if (feature !== undefined) {\n      operations = this.getOperations(feature);\n    }\n\n    return operations !== undefined ? operations.find(v => v.acronym === 'ED') !== undefined : false;\n  }\n\n  /**\n   * CREATE permission\n   * @param feature – Optional Feature's acronym\n   * @returns - Return if has a CREATE permission\n   */\n  create(feature?: string): boolean {\n    let operations = this.operations;\n\n    if (!this.operations && feature === undefined) {\n      return false;\n    }\n\n    if (feature !== undefined) {\n      operations = this.getOperations(feature);\n    }\n\n    return operations !== undefined ? operations.find(v => v.acronym === 'CR') !== undefined : false;\n  }\n\n  /**\n   * DELETE permission\n   * @param feature – Optional Feature's acronym\n   * @returns - Return if has a DELETE permission\n   */\n  delete(feature?: string): boolean {\n    let operations = this.operations;\n\n    if (!this.operations && feature === undefined) {\n      return false;\n    }\n\n    if (feature !== undefined) {\n      operations = this.getOperations(feature);\n    }\n\n    return operations !== undefined ? operations.find(v => v.acronym === 'DE') !== undefined : false;\n  }\n}\n",
            "properties": [
                {
                    "name": "acronym",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Select",
            "id": "class-Select-8203f8bed6006a391409dd65f36b04fb",
            "file": "projects/ugla/src/lib/models/select.ts",
            "type": "class",
            "sourceCode": "import { Options } from './options';\n\nexport class Select {\n  public name: string;\n  public id: string;\n  public labelBackgroundColor: string;\n  public labelColor: string;\n  public options: Options[];\n\n  constructor(name: string, options: Options[], labelColor?: string, labelBackgroundColor?: string) {\n    this.name = name;\n    this.id = `select-${name}`;\n    this.options = options;\n    this.labelColor = labelColor;\n    this.labelBackgroundColor = labelBackgroundColor;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "options",
                        "type": "Options[]"
                    },
                    {
                        "name": "labelColor",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "labelBackgroundColor",
                        "type": "string",
                        "optional": true
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "Options[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "labelColor",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "labelBackgroundColor",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "labelBackgroundColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "labelColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "options",
                    "type": "Options[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Table",
            "id": "class-Table-54a2063e78f1e1e6921180ae01490a60",
            "file": "projects/ugla/src/lib/models/table/table.ts",
            "type": "class",
            "sourceCode": "import { TableHeader } from './table-header';\nimport { TableRow } from './table-row';\n\nexport class Table {\n  name: string;\n  fixed: boolean;\n  header: TableHeader[];\n  data: TableRow[];\n\n  constructor(name: string, fixed: boolean, header: TableHeader[], data: TableRow[]) {\n    this.name = name;\n    this.fixed = fixed;\n    this.header = header;\n    this.data = data;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "fixed",
                        "type": "boolean"
                    },
                    {
                        "name": "header",
                        "type": "TableHeader[]"
                    },
                    {
                        "name": "data",
                        "type": "TableRow[]"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fixed",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "header",
                        "type": "TableHeader[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "TableRow[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "data",
                    "type": "TableRow[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "fixed",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "header",
                    "type": "TableHeader[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableColumn",
            "id": "class-TableColumn-667ea5cbd93ad20bc0fc53b2af89960f",
            "file": "projects/ugla/src/lib/models/table/table-column.ts",
            "type": "class",
            "sourceCode": "export class TableColumn {\n  text: string;\n  options?: {\n    type?: string,\n    color?: string,\n    align?: string\n  };\n\n  constructor(text: string, options?: {type?: string, color?: string, align?: string}) {\n    this.text = text;\n    this.options = options === undefined ? null : options;\n    this.options.align = options.align === undefined ? '' : options.align;\n    this.options.color = options.color === undefined ? '' : options.color;\n    this.options.type = options.type === undefined ? '' : options.type;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "text",
                        "type": "string"
                    },
                    {
                        "name": "options",
                        "type": "literal type",
                        "optional": true
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "text",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "literal type",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "options",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableHeader",
            "id": "class-TableHeader-6ae2d3707eb5100d70611c8beef127f8",
            "file": "projects/ugla/src/lib/models/table/table-header.ts",
            "type": "class",
            "sourceCode": "export class TableHeader {\n  text: string;\n  size: number;\n  align: string;\n\n  constructor(text: string, size: number, align: string) {\n    this.text = text;\n    this.size = size;\n    this.align = align;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "text",
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "type": "number"
                    },
                    {
                        "name": "align",
                        "type": "string"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "text",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "size",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "align",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "align",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "size",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableRow",
            "id": "class-TableRow-beb6baf1bed6d5059af8ff88abf4a6da",
            "file": "projects/ugla/src/lib/models/table/table-row.ts",
            "type": "class",
            "sourceCode": "import { TableColumn } from './table-column';\n\nexport class TableRow {\n  columns: TableColumn[];\n\n  constructor(columns: TableColumn[]) {\n    this.columns = columns;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "columns",
                        "type": "TableColumn[]"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "columns",
                        "type": "TableColumn[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "columns",
                    "type": "TableColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ThemeConfig",
            "id": "class-ThemeConfig-1c57d20aacc3239c442fe8d990304302",
            "file": "projects/ugla/src/lib/ugla.service.ts",
            "type": "class",
            "sourceCode": "import { Injectable, Optional, Output, EventEmitter } from '@angular/core';\nimport { Themes } from './enum/themes.enum';\nimport { VERSION } from './config';\n\n/**\n * Theme configuration default\n */\nexport class ThemeConfig {\n  /**\n   * Theme default\n   */\n  themeName = Themes.WHITE;\n}\n\n/**\n * Injectable\n *\n * Use this service to set the default value\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UglaService {\n\n  /**\n   * Emitter for header shadow changed\n   */\n  @Output() changedHeaderShadow = new EventEmitter<boolean>();\n\n  /**\n   * Set default theme\n   */\n  private _theme: Themes = Themes.WHITE;\n\n  /**\n   * Set version\n   */\n  private _version: string;\n\n  /**\n   * Set if the header has shadow\n   */\n  private _headerShadow: boolean;\n\n  /**\n   * Create a meta tag about theme\n   */\n  private metaTheme = document.createElement('meta');\n  private metaVersion = document.createElement('meta');\n\n  /**\n   * Receives the configuration set on app.module.ts\n   *\n   * @param config: ThemeConfig\n   */\n  constructor(@Optional() config: ThemeConfig) {\n    if (config) {\n      this._theme = config.themeName;\n      this._version = VERSION;\n      this.meta();\n    }\n  }\n\n  /**\n   * Create meta tag and include theme class on body\n   */\n  meta() {\n    this.metaTheme.setAttribute('name', 'ugla-theme');\n    this.metaTheme.setAttribute('content', this._theme);\n\n    document.head.appendChild(this.metaTheme);\n    document.body.classList.add(this._theme);\n\n    this.metaVersion.setAttribute('name', 'ugla-version');\n    this.metaVersion.setAttribute('content', this._version);\n\n    document.head.appendChild(this.metaVersion);\n    document.body.classList.add(this._version);\n\n    document.body.classList.add(this.browseIdentify());\n    document.body.classList.add(this.soIdentify());\n  }\n\n  /**\n   * Browse identify\n   * return a classe with browse name\n   */\n  browseIdentify() {\n    if ((navigator.userAgent.indexOf('Opera') || navigator.userAgent.indexOf('OPR')) !== -1 ) {\n      return 'opera';\n    } else if (navigator.userAgent.indexOf('Chrome') !== -1 ) {\n      return 'chrome';\n    } else if (navigator.userAgent.indexOf('Safari') !== -1) {\n      return 'safari';\n    } else if (navigator.userAgent.indexOf('Firefox') !== -1 )  {\n      return 'firefox';\n    } else if ((navigator.userAgent.indexOf('MSIE') !== -1 )) {\n      return 'ie';\n    } else {\n      return 'unknown-browse';\n    }\n  }\n\n  /**\n   * Operation System Identify\n   * return a class with so name\n   */\n  soIdentify() {\n    if (navigator.appVersion.indexOf('Win') !== -1) {\n      return 'windows';\n    } else if (navigator.appVersion.indexOf('Mac') !== -1) {\n      return 'macos';\n    } else if (navigator.appVersion.indexOf('X11') !== -1) {\n      return 'unix';\n    } else if (navigator.appVersion.indexOf('Linux') !== -1) {\n      return 'linux';\n    } else {\n      return 'unknown-os';\n    }\n  }\n\n  /**\n   * Add class do body if there's toolbar on the page\n   * @param toolbar false | element\n   */\n  hasToolBar(toolbar = false) {\n    if (toolbar) {\n      document.body.classList.add('has-toolbar');\n    } else {\n      document.body.classList.remove('has-toolbar');\n    }\n  }\n\n  /**\n   * Get theme\n   */\n  get theme() {\n    return this._theme;\n  }\n\n  /**\n   * Get version\n   */\n  get version() {\n    return this._version;\n  }\n\n  /**\n   * Get color of the theme\n   */\n  get color() {\n    const splitted = this._theme.split('-');\n    return splitted[splitted.length - 1];\n  }\n\n  /**\n   * Set the header shadow indicator value\n   */\n  set headerShadow(visible: boolean) {\n    this._headerShadow = visible;\n    this.changedHeaderShadow.emit(visible);\n  }\n\n  /**\n   * Get the value of header shadow indicator\n   */\n  get headerShadow(): boolean {\n    return this._headerShadow;\n  }\n}\n",
            "properties": [
                {
                    "name": "themeName",
                    "defaultValue": "Themes.WHITE",
                    "type": "",
                    "optional": false,
                    "description": "<p>Theme default</p>\n",
                    "line": 12
                }
            ],
            "description": "<p>Theme configuration default</p>\n",
            "rawdescription": "Theme configuration default",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "CheckboxColumnDirective",
            "id": "directive-CheckboxColumnDirective-ead21334b7af9ee9b1781762d984266f",
            "file": "projects/ugla/src/lib/directives/checkbox-column.directive.ts",
            "type": "directive",
            "description": "<p>Directive for checkbox column - check all</p>\n<p>For parent checkbox, use directive:</p>\n",
            "sourceCode": "import { Directive, Input, HostListener, ElementRef, Renderer2, OnInit, EventEmitter, Output, AfterViewInit } from '@angular/core';\nimport { CheckboxColumnItem } from '../models';\n\n/**\n * Directive for checkbox column - check all\n *\n * For parent checkbox, use directive:\n *\n * @example\n * <ugl-checkbox\n *   [name]=\"'checkbox'\"\n *   uglCheckboxColumn\n *   #selectAll=\"checkboxColumn\"\n *   [items]=\"items\"\n *   (checkboxColumnChange)=\"checkAll($event)\">\n * </ugl-checkbox>\n *\n * // For children checkboxes, convert list into a CheckboxListColumn, to be used in interator:\n * this.items = CheckboxListColumn.create<any>(listItems);\n *\n * // Then, use change method of directive on component:\n * <div *ngFor=\"let item of items; let idx = index;\">\n *    <ugl-checkbox\n *      [name]=\"'checkbox-item-' + idx\"\n *      [isChecked]=\"item.selected\"\n *      (checked)=\"selectAll.changeItem($event, item)\">\n *    </ugl-checkbox>\n * </div>\n *\n */\n@Directive({\n  selector: '[uglCheckboxColumn]',\n  exportAs: 'checkboxColumn'\n})\nexport class CheckboxColumnDirective<V, T extends CheckboxColumnItem<V>> implements OnInit, AfterViewInit {\n\n  /**\n   * HTMLInputElement of parent checkbox\n   */\n  private parent: HTMLInputElement;\n\n  /**\n   * Emitter for check/uncheck of parent checkbox\n   */\n  @Output() checkboxColumnChange = new EventEmitter<boolean>();\n\n  /**\n   * Array of children items of specified type\n   */\n  private _items: Array<T>;\n\n  /**\n   * Input for children items\n   */\n  @Input()\n  set items(items: Array<T>) {\n    this._items = items;\n    setTimeout(() => {\n      this.checkboxColumnChange.emit(this.countItemsSelected() > 0);\n    });\n  }\n\n  /**\n   * Get children items\n   */\n  get items() {\n    return this._items;\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(private elementRef: ElementRef,\n              private renderer: Renderer2) {\n  }\n\n  /**\n   * Set initials configurations\n   */\n  ngOnInit() {\n  }\n\n  /**\n   * Set configurations after view is initializes\n   */\n  ngAfterViewInit() {\n    this.parent = this.elementRef.nativeElement.firstElementChild.firstElementChild as HTMLInputElement;\n  }\n\n  /**\n   * Method on change of item of list.\n   * Emitts the new value of item, and call function to change the parent status.\n   *\n   * @param event true | false\n   * @param item class item\n   */\n  changeItem(event: boolean, item: T) {\n    item.selected = event;\n    this.changeColumnSelection();\n    this.checkboxColumnChange.emit(item.selected);\n  }\n\n  /**\n   * Uncheck all items\n   */\n  uncheckAll() { this.toggleCheck(false); }\n\n  /**\n   * Check all items\n   */\n  checkAll() { this.toggleCheck(true); }\n\n  /**\n   * Toggle check on parent click\n   * @param checked true | false\n   */\n  private toggleCheck(checked: boolean) {\n    if (this.parent) {\n      this.parent.checked = checked;\n      this.renderer.setProperty(this.parent, 'indeterminate', false);\n\n      if (this._items) {\n        this._items.forEach(e => e.selected = checked);\n      }\n    }\n  }\n\n  /**\n   * Host listener for change selection of parent\n   */\n  @HostListener('change')\n  private changeSelection() {\n    this.toggleColumnSelection();\n    this.checkboxColumnChange.emit(this.parent.checked);\n  }\n\n  /**\n   * Set the status of children, based on parent selection\n   */\n  private toggleColumnSelection() {\n    const newState = this.parent.checked;\n    this._items.forEach(i => i.selected = newState);\n  }\n\n  /**\n   * On children click, change status of parent element\n   */\n  private changeColumnSelection() {\n    const count = this.countItemsSelected();\n    const isAllSelected = count === this._items.length;\n    this.parent.checked = isAllSelected;\n    this.renderer.setProperty(this.parent, 'indeterminate', count !== 0 && !isAllSelected);\n  }\n\n  /**\n   * Count the selected items\n   */\n  private countItemsSelected() {\n    if (this._items && this._items.length) {\n      return this._items.filter(i => i.selected).length;\n    }\n    return 0;\n  }\n\n}\n",
            "selector": "[uglCheckboxColumn]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "items",
                    "description": "<p>Input for children items</p>\n",
                    "line": 56,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "checkboxColumnChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Emitter for check/uncheck of parent checkbox</p>\n",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "change",
                    "args": [],
                    "argsDecorator": [],
                    "description": "<p>Host listener for change selection of parent</p>\n",
                    "line": 132
                }
            ],
            "propertiesClass": [
                {
                    "name": "_items",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "<p>Array of children items of specified type</p>\n",
                    "line": 50,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "parent",
                    "type": "HTMLInputElement",
                    "optional": false,
                    "description": "<p>HTMLInputElement of parent checkbox</p>\n",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeColumnSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>On children click, change status of parent element</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "changeItem",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean"
                        },
                        {
                            "name": "item",
                            "type": "T"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "description": "<p>Method on change of item of list.\nEmitts the new value of item, and call function to change the parent status.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2249,
                                "end": 2254,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "boolean",
                            "tagName": {
                                "pos": 2243,
                                "end": 2248,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>true | false</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2280,
                                "end": 2284,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "T",
                            "tagName": {
                                "pos": 2274,
                                "end": 2279,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>class item</p>\n"
                        }
                    ]
                },
                {
                    "name": "checkAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "description": "<p>Check all items</p>\n"
                },
                {
                    "name": "countItemsSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 158,
                    "description": "<p>Count the selected items</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "description": "<p>Set configurations after view is initializes</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "description": "<p>Set initials configurations</p>\n"
                },
                {
                    "name": "toggleCheck",
                    "args": [
                        {
                            "name": "checked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "description": "<p>Toggle check on parent click</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2666,
                                "end": 2673,
                                "flags": 0,
                                "escapedText": "checked"
                            },
                            "type": "boolean",
                            "tagName": {
                                "pos": 2660,
                                "end": 2665,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>true | false</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggleColumnSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>Set the status of children, based on parent selection</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "uncheckAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "description": "<p>Uncheck all items</p>\n"
                }
            ],
            "jsdoctags": [
                {
                    "pos": 278,
                    "end": 288,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 278,
                        "end": 279,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 279,
                        "end": 286,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-checkbox\n[name]=\"'checkbox'\"\nuglCheckboxColumn\n#selectAll=\"checkboxColumn\"\n[items]=\"items\"\n(checkboxColumnChange)=\"checkAll($event)\">\n</ugl-checkbox>\n\n// For children checkboxes, convert list into a CheckboxListColumn, to be used in interator:\nthis.items = CheckboxListColumn.create<any>(listItems);\n\n// Then, use change method of directive on component:\n<div *ngFor=\"let item of items; let idx = index;\">\n<ugl-checkbox\n[name]=\"'checkbox-item-' + idx\"\n[isChecked]=\"item.selected\"\n(checked)=\"selectAll.changeItem($event, item)\">\n</ugl-checkbox>\n</div>"
                }
            ],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "items": {
                    "name": "items",
                    "setSignature": {
                        "name": "items",
                        "type": "void",
                        "args": [
                            {
                                "name": "items",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "description": "<p>Input for children items</p>\n",
                        "jsdoctags": [
                            {
                                "name": "items",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "items",
                        "type": "",
                        "returnType": "",
                        "line": 66,
                        "description": "<p>Get children items</p>\n"
                    }
                }
            }
        },
        {
            "name": "ClickOutsideDirective",
            "id": "directive-ClickOutsideDirective-a5bbe617a3026ac259972b3eeff11c47",
            "file": "projects/ugla/src/lib/directives/click-outsite.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {Directive, ElementRef, Output, EventEmitter, HostListener} from '@angular/core';\n\n@Directive({\n    selector: '[uglClickOutside]'\n})\nexport class ClickOutsideDirective {\n    constructor(private _elementRef: ElementRef) {\n    }\n\n    @Output()\n    public uglClickOutside = new EventEmitter<MouseEvent>();\n\n    @HostListener('document:click', ['$event', '$event.target'])\n    public onClick(event: MouseEvent, targetElement: HTMLElement): void {\n      if (!targetElement) {\n        return;\n      }\n\n      const clickedInside = this._elementRef.nativeElement.contains(targetElement);\n      if (!clickedInside) {\n        this.uglClickOutside.emit(event);\n        event.preventDefault();\n      }\n    }\n}\n",
            "selector": "[uglClickOutside]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "uglClickOutside",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "targetElement",
                            "type": "HTMLElement"
                        }
                    ],
                    "argsDecorator": [
                        "$event",
                        "$event.target"
                    ],
                    "line": 14
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "_elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "CrDirective",
            "id": "directive-CrDirective-06e3ebdf67a1ecc0d34047dc1f92fe18",
            "file": "projects/ugla-rules/src/lib/directives/cr.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { UglaRulesService } from './../ugla-rules.service';\nimport { Directive, OnInit, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[uglCr]'\n})\nexport class CrDirective implements OnInit {\n\n  constructor(private rules: UglaRulesService,\n              private element: ElementRef) {}\n\n  ngOnInit() {\n    if (!this.rules.create()) {\n      this.element.nativeElement.remove();\n    }\n  }\n}\n",
            "selector": "[uglCr]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "rules",
                        "type": "UglaRulesService"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "rules",
                        "type": "UglaRulesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DeDirective",
            "id": "directive-DeDirective-2401a55c0854bdef4c49c40561ae391b",
            "file": "projects/ugla-rules/src/lib/directives/de.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { UglaRulesService } from './../ugla-rules.service';\nimport { Directive, OnInit, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[uglDe]'\n})\nexport class DeDirective implements OnInit {\n  constructor(private rules: UglaRulesService,\n              private element: ElementRef) {}\n\n  ngOnInit() {\n    if (!this.rules.delete()) {\n      this.element.nativeElement.remove();\n    }\n  }\n}\n",
            "selector": "[uglDe]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "rules",
                        "type": "UglaRulesService"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "rules",
                        "type": "UglaRulesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "EdDirective",
            "id": "directive-EdDirective-fb74d01320d962a0ea5a94dcdb3d3778",
            "file": "projects/ugla-rules/src/lib/directives/ed.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { UglaRulesService } from './../ugla-rules.service';\nimport { Directive, OnInit, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[uglEd]'\n})\nexport class EdDirective implements OnInit {\n  constructor(private rules: UglaRulesService,\n              private element: ElementRef) {}\n\n  ngOnInit() {\n    if (!this.rules.edit()) {\n      this.element.nativeElement.remove();\n    }\n  }\n}\n",
            "selector": "[uglEd]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "rules",
                        "type": "UglaRulesService"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "rules",
                        "type": "UglaRulesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "GridDirective",
            "id": "directive-GridDirective-af48cc9271f7e8f15c51a7c1db9ec9f6",
            "file": "projects/ugla/src/lib/directives/grid.directive.ts",
            "type": "directive",
            "description": "<p>Directive for create a grid</p>\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnInit, Renderer2 } from '@angular/core';\n\n/**\n * Directive for create a grid\n *\n * @example\n * // Create a grid div:\n * <div uglGrid [grid]=\"true\" [col]=\"'2'\" [colSm]=\"'3'\"></div>\n * // Generated html:\n * <div class=\"grid col-2 col-sm-3\"></div>\n *\n */\n@Directive({\n  selector: '[uglGrid]'\n})\nexport class GridDirective implements OnInit {\n  @Input() set grid(grid: boolean) {\n    this._grid = grid;\n    this.classes.push('grid');\n  }\n\n  get grid(): boolean {\n    return this._grid;\n  }\n\n  @Input() set col(col: number) {\n    this._col = col;\n    this.classes.push(`col-${this.col}`);\n  }\n\n  get col(): number {\n    return this._col;\n  }\n\n  @Input() set colSm(colSm: number) {\n    this._colSm = colSm;\n    this.classes.push(`col-sm-${this.colSm}`);\n  }\n\n  get colSm(): number {\n    return this._colSm;\n  }\n\n  @Input() set gap(gap: number) {\n    this._gap = gap;\n    this.classes.push(`gap-${this.gap}`);\n  }\n\n  get gap(): number {\n    return this._gap;\n  }\n\n  @Input() set gapSm(gapSm: number) {\n    this._gapSm = gapSm;\n    this.classes.push(`gap-sm-${this.gapSm}`);\n  }\n\n  get gapSm(): number {\n    return this._gapSm;\n  }\n\n  @Input() set span(span: number) {\n    this._span = span;\n    this.classes.push(`span-${this.span}`);\n  }\n\n  get span(): number {\n    return this._span;\n  }\n\n  @Input() set spanSm(spanSm: number) {\n    this._spanSm = spanSm;\n    this.classes.push(`span-sm-${this.spanSm}`);\n  }\n\n  get spanSm(): number {\n    return this._spanSm;\n  }\n\n  @Input() set customCol(customCol: string) {\n    this._customCol = customCol;\n    this.element.nativeElement.style.gridTemplateColumns = this.customCol;\n  }\n\n  get customCol(): string {\n    return this._customCol;\n  }\n\n  private _grid: boolean;\n  private _col: number;\n  private _colSm: number;\n  private _gap: number;\n  private _gapSm: number;\n  private _span: number;\n  private _spanSm: number;\n  private _customCol: string;\n\n  private classes = [];\n\n  constructor(private element: ElementRef) {}\n\n  ngOnInit() {\n    const classes =  this.element.nativeElement.classList;\n    this.element.nativeElement.classList.value = `${this.classes.join(' ')} ${classes.value}`;\n  }\n}\n",
            "selector": "[uglGrid]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "col",
                    "line": 26,
                    "type": "number"
                },
                {
                    "name": "colSm",
                    "line": 35,
                    "type": "number"
                },
                {
                    "name": "customCol",
                    "line": 80,
                    "type": "string"
                },
                {
                    "name": "gap",
                    "line": 44,
                    "type": "number"
                },
                {
                    "name": "gapSm",
                    "line": 53,
                    "type": "number"
                },
                {
                    "name": "grid",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "span",
                    "line": 62,
                    "type": "number"
                },
                {
                    "name": "spanSm",
                    "line": 71,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_col",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_colSm",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_customCol",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_gap",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_gapSm",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_grid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_span",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_spanSm",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "classes",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                }
            ],
            "jsdoctags": [
                {
                    "pos": 123,
                    "end": 133,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 123,
                        "end": 124,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 124,
                        "end": 131,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "// Create a grid div:\n<div uglGrid [grid]=\"true\" [col]=\"'2'\" [colSm]=\"'3'\"></div>\n// Generated html:\n<div class=\"grid col-2 col-sm-3\"></div>"
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 98,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "grid": {
                    "name": "grid",
                    "setSignature": {
                        "name": "grid",
                        "type": "void",
                        "args": [
                            {
                                "name": "grid",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "grid",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "grid",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 22
                    }
                },
                "col": {
                    "name": "col",
                    "setSignature": {
                        "name": "col",
                        "type": "void",
                        "args": [
                            {
                                "name": "col",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "col",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "col",
                        "type": "number",
                        "returnType": "number",
                        "line": 31
                    }
                },
                "colSm": {
                    "name": "colSm",
                    "setSignature": {
                        "name": "colSm",
                        "type": "void",
                        "args": [
                            {
                                "name": "colSm",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "colSm",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "colSm",
                        "type": "number",
                        "returnType": "number",
                        "line": 40
                    }
                },
                "gap": {
                    "name": "gap",
                    "setSignature": {
                        "name": "gap",
                        "type": "void",
                        "args": [
                            {
                                "name": "gap",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "gap",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "gap",
                        "type": "number",
                        "returnType": "number",
                        "line": 49
                    }
                },
                "gapSm": {
                    "name": "gapSm",
                    "setSignature": {
                        "name": "gapSm",
                        "type": "void",
                        "args": [
                            {
                                "name": "gapSm",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "gapSm",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "gapSm",
                        "type": "number",
                        "returnType": "number",
                        "line": 58
                    }
                },
                "span": {
                    "name": "span",
                    "setSignature": {
                        "name": "span",
                        "type": "void",
                        "args": [
                            {
                                "name": "span",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "span",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "span",
                        "type": "number",
                        "returnType": "number",
                        "line": 67
                    }
                },
                "spanSm": {
                    "name": "spanSm",
                    "setSignature": {
                        "name": "spanSm",
                        "type": "void",
                        "args": [
                            {
                                "name": "spanSm",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "spanSm",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "spanSm",
                        "type": "number",
                        "returnType": "number",
                        "line": 76
                    }
                },
                "customCol": {
                    "name": "customCol",
                    "setSignature": {
                        "name": "customCol",
                        "type": "void",
                        "args": [
                            {
                                "name": "customCol",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 80,
                        "jsdoctags": [
                            {
                                "name": "customCol",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "customCol",
                        "type": "string",
                        "returnType": "string",
                        "line": 85
                    }
                }
            }
        },
        {
            "name": "LightboxDirective",
            "id": "directive-LightboxDirective-6c22a2e4fed786a97b8c3c71c4b718d8",
            "file": "projects/ugla/src/lib/directives/lightbox.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, Input, HostListener, Output, EventEmitter } from '@angular/core';\nimport { LightboxService } from '../components';\n\n@Directive({\n  selector: '[uglLightbox]'\n})\nexport class LightboxDirective {\n  constructor(private lightboxService: LightboxService) { }\n\n  @Output() actionIcon = new EventEmitter<string>();\n\n  @Input() closeOut = false;\n  @Input() imageIcon: string;\n  @Input() filesUrl: string[];\n\n  @HostListener('click', ['$event']) onClick($event: any) {\n    if (this.actionIcon.observers.length > 0) {\n      this.lightboxService.open(\n        this.filesUrl,\n        this.closeOut,\n        (position) => this.actionIcon.emit(position),\n        this.imageIcon\n      );\n    } else {\n      this.lightboxService.open(this.filesUrl, this.closeOut);\n    }\n  }\n}\n",
            "selector": "[uglLightbox]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "closeOut",
                    "defaultValue": "false",
                    "line": 12
                },
                {
                    "name": "filesUrl",
                    "line": 14,
                    "type": "string[]"
                },
                {
                    "name": "imageIcon",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "actionIcon",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 16
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "lightboxService",
                        "type": "LightboxService"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "lightboxService",
                        "type": "LightboxService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-e76a18bc5ac064ff10f2c1b125cacc61",
            "file": "projects/ugla/src/lib/directives/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, Input, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';\nimport Tooltip from 'tooltip.js';\nimport { Options, TitleFunction } from 'tooltip.js';\n\n@Directive({\n  selector: '[uglTooltip]',\n  exportAs: 'uglTooltip'\n})\nexport class TooltipDirective implements AfterViewInit {\n  _tooltip: any;\n\n  /**\n   * Default tooltip options\n   */\n  _options: Options = {\n    placement: 'top',\n    title: undefined,\n    trigger: 'hover focus',\n    closeOnClickOutside: true,\n  };\n\n  /**\n   * Set the tooltip title value\n   */\n  @Input('uglTooltipTitle') title?: string | HTMLElement | TitleFunction;\n\n  /**\n   * Set the tooltip options value\n   */\n  @Input('uglTooltip')\n  set options(value: {} | Options) {\n    if (value) {\n      this._options = Object.assign(this._options as object, value);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(private elementRef: ElementRef) {}\n\n  /**\n   * Set configurations after view is initializes\n   */\n  ngAfterViewInit() {\n    if (this.title) {\n      this._options.title = this.title;\n    }\n    this._tooltip = new Tooltip((this.elementRef.nativeElement as HTMLElement), this._options);\n  }\n\n  /**\n   * Set a new tooltip instance\n   */\n  private newTooltipInstance(value: string | HTMLElement | TitleFunction) {\n    if (this._tooltip) {\n      this._tooltip.updateTitleContent(value.toString());\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.title.currentValue !== changes.title.previousValue) {\n      this._options.title = changes.title.currentValue;\n      this.newTooltipInstance(this._options.title);\n    }\n  }\n}\n",
            "selector": "[uglTooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "uglTooltip",
                    "description": "<p>Set the tooltip options value</p>\n",
                    "line": 31,
                    "type": ""
                },
                {
                    "name": "uglTooltipTitle",
                    "description": "<p>Set the tooltip title value</p>\n",
                    "line": 25,
                    "type": "string | HTMLElement | TitleFunction"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_options",
                    "defaultValue": "{\n    placement: 'top',\n    title: undefined,\n    trigger: 'hover focus',\n    closeOnClickOutside: true,\n  }",
                    "type": "Options",
                    "optional": false,
                    "description": "<p>Default tooltip options</p>\n",
                    "line": 15
                },
                {
                    "name": "_tooltip",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "newTooltipInstance",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | HTMLElement | TitleFunction"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "description": "<p>Set a new tooltip instance</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | HTMLElement | TitleFunction",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "description": "<p>Set configurations after view is initializes</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "options": {
                    "name": "options",
                    "setSignature": {
                        "name": "options",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "description": "<p>Set the tooltip options value</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "VwDirective",
            "id": "directive-VwDirective-fb3a56281e7a7cced80e1a065cf4bc36",
            "file": "projects/ugla-rules/src/lib/directives/vw.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { UglaRulesService } from './../ugla-rules.service';\nimport { Directive, OnInit, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[uglVw]'\n})\nexport class VwDirective implements OnInit {\n  constructor(private rules: UglaRulesService,\n              private element: ElementRef) {}\n\n  ngOnInit() {\n    if (!this.rules.view()) {\n      this.element.nativeElement.remove();\n    }\n  }\n}\n",
            "selector": "[uglVw]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "rules",
                        "type": "UglaRulesService"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "rules",
                        "type": "UglaRulesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e8e704b2183a31bce8aa7aea0875166b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "header",
                    "defaultValue": "new Header('Ugla', './assets/imgs/logo.png', 'home', true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isAutenticated",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "menu",
                    "defaultValue": "new Menu([\n    new MenuItem('Home', null, true)\n  ])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "people",
                    "defaultValue": "new People('Jack Connor', 'jack.connor@ugla.dev', './assets/imgs/people.png')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "select",
                    "defaultValue": "new Select('language', [\n    new Options('Select a language', '-1'),\n    new Options('Portuguese PT-BR', 'pt-br'),\n    new Options('English EN', 'en'),\n    new Options('日本人', 'jp'),\n    new Options('汉语', 'ch_st'),\n    new Options('漢語', 'ch_tr')\n  ])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "hideMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "selectLanguage",
                    "args": [
                        {
                            "name": "language",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { UglaRulesService } from './../../projects/ugla-rules/src/lib/ugla-rules.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Header, People, Menu, MenuItem, Select, Options, UglaService, ToastService } from 'projects/ugla/src';\nimport { Router, NavigationEnd } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n\n  constructor(\n    private ugla: UglaService,\n    private rules: UglaRulesService) {\n    }\n\n  isAutenticated = true;\n\n  header = new Header('Ugla', './assets/imgs/logo.png', 'home', true);\n\n  people = new People('Jack Connor', 'jack.connor@ugla.dev', './assets/imgs/people.png');\n\n  menu = new Menu([\n    new MenuItem('Home', null, true)\n  ]);\n\n  select = new Select('language', [\n    new Options('Select a language', '-1'),\n    new Options('Portuguese PT-BR', 'pt-br'),\n    new Options('English EN', 'en'),\n    new Options('日本人', 'jp'),\n    new Options('汉语', 'ch_st'),\n    new Options('漢語', 'ch_tr')\n  ]);\n\n  ngOnInit() {\n    this.rules.createRules([\n      {\n        code: 1,\n        name: 'Expense Managment',\n        acronym: 'EXPENSE',\n        features: [\n          {\n            code: 1,\n            name: 'INTEGRATIONS',\n            acronym: 'INT',\n            parent: null,\n            applicationCode: 1,\n            operations: [\n              {\n                code: 2,\n                name: 'VIEW',\n                acronym: 'VW'\n              },\n              {\n                code: 3,\n                name: 'EDIT',\n                acronym: 'ED'\n              }\n            ]\n          },\n          {\n            code: 2,\n            name: 'Client Reimbursement',\n            acronym: 'CLI',\n            parent: null,\n            applicationCode: 2,\n            operations: [\n              {\n                code: 2,\n                name: 'VIEW',\n                acronym: 'VW'\n              }\n            ]\n          }\n        ]\n      }\n    ]);\n    this.header.people = this.people;\n    this.header.menu = this.menu;\n    this.ugla.headerShadow = true;\n    this.ugla.hasToolBar();\n  }\n\n  hideMenu() {\n    this.isAutenticated = false;\n  }\n\n  logout() {\n    this.isAutenticated = false;\n  }\n\n  selectLanguage(language) {\n    console.log(`Language selected is ${language.description} and the code is ${language.value}`);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~projects/ugla/src/sass/index';\n\n.link-external {\n  display: flex;\n  margin-right: 10px;\n  font-size: 1rem;\n  font-weight: 600;\n  color: color('_others','light');\n  text-decoration: none;\n  align-content: center;\n  align-items: center;\n\n  > i {\n    margin-left: 5px;\n    font-size: 1.25rem;\n  }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    },
                    {
                        "name": "rules",
                        "type": "UglaRulesService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "ugla",
                        "type": "UglaService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rules",
                        "type": "UglaRulesService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>\n<ugl-loading ></ugl-loading>\n<ugl-toast></ugl-toast>\n"
        },
        {
            "name": "AsideComponent",
            "id": "component-AsideComponent-28a8fdd6e6c9f494df51963b23c0cf13",
            "file": "projects/ugla/src/lib/components/aside/aside.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-aside",
            "styleUrls": [
                "./aside.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aside.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "altPhoto",
                    "defaultValue": "'foto'",
                    "line": 18
                },
                {
                    "name": "iconLinks",
                    "defaultValue": "['keyboard_arrow_right', 'keyboard_arrow_down', 'keyboard_arrow_up']",
                    "line": 17
                },
                {
                    "name": "iconLogout",
                    "defaultValue": "'power_settings_new'",
                    "line": 16
                },
                {
                    "name": "menu",
                    "line": 14,
                    "type": "AsideItem[]"
                },
                {
                    "name": "people",
                    "line": 13,
                    "type": "People"
                },
                {
                    "name": "textLogout",
                    "defaultValue": "'Logout'",
                    "line": 15
                }
            ],
            "outputsClass": [
                {
                    "name": "logoutAction",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "toggleMenu",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getIcon",
                    "args": [
                        {
                            "name": "index",
                            "type": "string"
                        },
                        {
                            "name": "subindex",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subindex",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "resizeContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86
                },
                {
                    "name": "toggleClass",
                    "args": [
                        {
                            "name": "list",
                            "type": "any"
                        },
                        {
                            "name": "add",
                            "type": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "add",
                            "type": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSubmenu",
                    "args": [
                        {
                            "name": "index",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, ElementRef, AfterViewInit } from '@angular/core';\nimport { People } from './../../models/people';\nimport { AsideItem } from './../../models/aside-item';\nimport { AsideService } from './aside.service';\n\n@Component({\n  selector: 'ugl-aside',\n  templateUrl: './aside.component.html',\n  styleUrls: ['./aside.component.scss']\n})\nexport class AsideComponent implements OnInit, AfterViewInit {\n\n  @Input() people: People;\n  @Input() menu: AsideItem[];\n  @Input() textLogout = 'Logout';\n  @Input() iconLogout = 'power_settings_new';\n  @Input() iconLinks = ['keyboard_arrow_right', 'keyboard_arrow_down', 'keyboard_arrow_up'];\n  @Input() altPhoto = 'foto';\n\n  @Output() logoutAction = new EventEmitter<any>();\n\n  toggleMenu = true;\n\n  constructor(private el: ElementRef, private asideService: AsideService) { }\n\n  ngOnInit() {\n    const path = location.pathname;\n    this.menu.forEach((item, index) => {\n      item.visible = (item.submenu && item.submenu.length > 0) || item.url != null;\n      if (item.submenu) {\n        item.submenu.forEach(subitem => {\n          if (subitem.url === path) {\n            item.open = true;\n          }\n        });\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    this.resizeContent();\n  }\n\n  logout() {\n    this.logoutAction.emit();\n  }\n\n  toggleSubmenu(index: string) {\n    this.menu[index].open = !this.menu[index].open;\n  }\n\n  getIcon(index: string, subindex?: string) {\n    let hasSubmenu = this.menu[index].submenu !== null;\n\n    if (this.menu[index].submenu !== null) {\n      hasSubmenu = this.menu[index].submenu.find(s => s.visible) !== null;\n    }\n\n    let noSubmenuHasUrl = false;\n    if (!hasSubmenu) {\n      noSubmenuHasUrl = this.menu[index].url !== null;\n    }\n\n    if (subindex !== undefined) {\n      hasSubmenu = this.menu[index].submenu[subindex].submenu !== null;\n    }\n\n    let open = false;\n\n    if (!this.menu[index].hasOwnProperty('open')) {\n      this.menu[index].open = false;\n      open = false;\n    } else {\n      open = this.menu[index].open;\n    }\n\n    if (!hasSubmenu || noSubmenuHasUrl) {\n      return this.iconLinks[0];\n    } else if (!open) {\n      return this.iconLinks[1];\n    } else {\n      return this.iconLinks[2];\n    }\n  }\n\n  toggle() {\n    this.toggleMenu = !this.toggleMenu;\n    this.resizeContent();\n    this.asideService.toggled();\n  }\n\n  resizeContent() {\n    const sections = document.getElementsByClassName('has-aside');\n    const breadcrumb = document.getElementsByClassName('breadcrumb');\n\n    if (!this.toggleMenu) {\n      this.toggleClass(sections, true);\n      this.toggleClass(breadcrumb, true);\n    } else {\n      this.toggleClass(sections, false);\n      this.toggleClass(breadcrumb, false);\n    }\n  }\n\n  toggleClass(list: any, add = false) {\n    if (add) {\n      for (let i = 0; i <= list.length; i++) {\n        if (list.item(i) !== null) {\n          list.item(i).classList.add('aside-small');\n        }\n      }\n    } else {\n      for (let i = 0; i <= list.length; i++) {\n        if (list.item(i) !== null) {\n          list.item(i).classList.remove('aside-small');\n        }\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\naside {\n  position: fixed;\n  width: 200px;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  background-color: color(_others, light);\n  box-shadow: 0 2px 4px 0 color(_others, dark-alpha);\n  z-index: map-get($z-index, 'menu');\n\n  &.closed {\n    display: flex;\n    width: 34px;\n    height: 34px;\n    align-items: center;\n    justify-content: center;\n    box-shadow: none;\n  }\n\n  @include mobile() {\n    width: 100%;\n  }\n}\n\nheader {\n  display: flex;\n  padding: 10px 5px;\n  background-color: color(_aquamarine, medium);\n  align-items: center;\n\n  .closed & {\n    width: 34px;\n    height: 34px;\n  }\n\n  img {\n    width: 42px;\n    height: 42px;\n    border: 1px solid color(_gray, extra-light);\n    border-radius: 100%;\n\n    .closed & {\n      display: none;\n    }\n  }\n\n  .infos {\n    span {\n      display: block;\n      padding-left: 5px;\n      color: color(_others, light);\n    }\n\n    .name {\n      font-size: 14px;\n      font-weight: 600;\n\n      @include mobile() {\n        font-size: 16px;\n      }\n    }\n\n    .email {\n      font-size: 12px;\n      font-weight: 400;\n\n      @include mobile() {\n        font-size: 14px;\n      }\n    }\n\n    .closed & {\n      display: none;\n    }\n  }\n}\n\nul {\n  position: relative;\n  height: calc(100vh - 102px);\n  margin: 0;\n  padding: 10px;\n  overflow-y: auto;\n  list-style: none;\n\n  .closed & {\n    display: none;\n  }\n\n  li {\n    > ul {\n      height: auto;\n      padding: 0;\n      margin-left: 10px;\n    }\n  }\n\n  a {\n    display: flex;\n    margin: 10px 0;\n    font-size: 14px;\n    font-weight: 400;\n    color: color(_gray, dark);\n    text-decoration: none;\n    justify-content: space-between;\n\n    &.submenu {\n      font-weight: 600;\n      color: color(_gray, dark);\n    }\n\n    @include mobile() {\n      font-size: 16px;\n    }\n\n    &:first-child {\n      margin-top: 0;\n    }\n\n    &:hover,\n    &.active {\n      color: color(_aquamarine, medium);\n    }\n\n    .material-icons {\n      font-size: 14px;\n\n      @include mobile() {\n        font-size: 16px;\n      }\n    }\n  }\n}\n\n.logout {\n  display: flex;\n  width: 100%;\n  height: 40px;\n  padding: 0 10px;\n  font-size: 1rem;\n  font-weight: 600;\n  color: color(_others, light);\n  text-align: center;\n  border: 0;\n  background-color: color(_red, medium);\n  cursor: pointer;\n  align-items: center;\n\n  @include mobile() {\n    font-size: 16px;\n  }\n\n  .material-icons {\n    margin-right: 10px;\n  }\n\n  .closed & {\n    display: none;\n  }\n}\n\n.menu {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 34px;\n  height: 34px;\n  border: 0;\n  background-color: transparent;\n  cursor: pointer;\n\n  > .material-icons {\n    font-size: 1.5rem;\n    color: color(_others, light);\n  }\n}\n",
                    "styleUrl": "./aside.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef"
                    },
                    {
                        "name": "asideService",
                        "type": "AsideService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asideService",
                        "type": "AsideService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<aside [ngClass]=\"{'closed': !toggleMenu}\">\n  <header>\n    <button class=\"menu\" (click)=\"toggle()\">\n      <span class=\"material-icons\">menu</span>\n    </button>\n    <img [src]=\"people.photo\" [alt]=\"people.name + ' ' + altPhoto\" tabindex='0'>\n    <div class=\"infos\" tabindex='0'>\n      <span class=\"name\">{{ people.name }}</span>\n      <span class=\"email\">{{ people.email }}</span>\n    </div>\n  </header>\n  <ul tabindex='0'>\n    <li *ngFor=\"let item of menu; let idx = index\">\n      <a [routerLink]=\"item.url\" *ngIf=\"item.visible\"\n          [routerLinkActive]=\"item.url ? 'active' : ''\"\n          [routerLinkActiveOptions]=\"{exact: true}\"\n          class=\"gtm-menu-item\"\n          (click)=\"toggleSubmenu(idx)\"\n          [ngClass]=\"{'submenu' : item.submenu, 'active': item.open}\"\n          [id]=\"'aside-menu-' + idx\">{{ item.description }}<span class=\"material-icons\">{{ item.icon || getIcon(idx) }}</span></a>\n      <ul *ngIf=\"item.submenu && item.open !== undefined && item.open\">\n        <li *ngFor=\"let subitem of item.submenu; let jx = index\">\n          <a [routerLink]=\"subitem.url\" *ngIf=\"subitem.visible\"\n              [routerLinkActive]=\"'active'\"\n              [routerLinkActiveOptions]=\"{exact: true}\"\n              class=\"gtm-menu-subitem\"\n              [id]=\"'aside-submenu-' + jx\">{{ subitem.description }}<span class=\"material-icons\">{{ subitem.icon || getIcon(idx, jx) }}</span></a>\n        </li>\n      </ul>\n    </li>\n  </ul>\n  <button (click)=\"logout()\" class=\"logout\" tabindex='0'>\n    <span class=\"material-icons\">{{ iconLogout }}</span> {{ textLogout }}\n  </button>\n</aside>\n"
        },
        {
            "name": "BackPanelComponent",
            "id": "component-BackPanelComponent-391af047a9dbd2a6c0e235608033c1ed",
            "file": "projects/ugla/src/lib/components/panels/back-panel/back-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-back-panel",
            "styleUrls": [
                "./back-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./back-panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backButtonLabel",
                    "defaultValue": "Form.BACK_BUTTON_LABEL",
                    "line": 12
                },
                {
                    "name": "ngClass",
                    "line": 13,
                    "type": "NgClass"
                }
            ],
            "outputsClass": [
                {
                    "name": "backButtonClicked",
                    "defaultValue": "new EventEmitter<any>()",
                    "description": "<p>Emit the back button click</p>\n",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "back",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Form } from '../../../enum';\nimport { NgClass } from '@angular/common';\n\n@Component({\n  selector: 'ugl-back-panel',\n  templateUrl: './back-panel.component.html',\n  styleUrls: ['./back-panel.component.scss']\n})\nexport class BackPanelComponent {\n\n  @Input() backButtonLabel = Form.BACK_BUTTON_LABEL;\n  @Input() ngClass: NgClass;\n\n  /**\n   * Emit the back button click\n   */\n  @Output() backButtonClicked = new EventEmitter<any>();\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  back() {\n    this.backButtonClicked.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../sass/index';\n\n.back-panel {\n  .container {\n    @include desktop {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n  }\n\n  .panel-header,\n  .panel-content {\n    @include desktop {\n      width: 400px;\n    }\n  }\n}\n\n:host ::ng-deep {\n  #back-button {\n    font-size: .875rem;\n    font-weight: 600;\n    margin: 1rem 0;\n\n    @include desktop {\n      width: 120px;\n\n      i {\n        font-size: 1.5rem;\n        line-height: .83;\n      }\n    }\n\n    @include mobile {\n      margin: .5 0;\n    }\n  }\n}\n",
                    "styleUrl": "./back-panel.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<section class=\"back-panel\" [ngClass]=\"ngClass\">\n  <div class=\"container container--central container--white\">\n    <div class=\"panel-header\">\n      <ugl-button\n        (click)=\"back()\"\n        [color]=\"'gray'\"\n        [id]=\"'back-button'\"\n        [style]=\"'icon'\"\n        [title]=\"backButtonLabel\"\n        [wave]=\"true\"\n        class=\"mobile-only\">\n        <i class=\"material-icons\" [id]=\"'lock'\" aria-hidden=\"true\">keyboard_arrow_left</i>\n      </ugl-button>\n      <ugl-button\n        (click)=\"back()\"\n        [color]=\"'white'\"\n        [id]=\"'back-button'\"\n        [size]=\"'small'\"\n        [style]=\"'border'\"\n        [title]=\"backButtonLabel\"\n        [wave]=\"true\"\n        class=\"desktop-only\">\n        <i class=\"material-icons\" aria-hidden=\"true\">keyboard_arrow_left</i> {{ backButtonLabel }}\n      </ugl-button>\n    </div>\n    <div class=\"panel-content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</section>\n"
        },
        {
            "name": "BannerComponent",
            "id": "component-BannerComponent-97f4c484ba6c528821fab6b6fe6b5659",
            "file": "projects/ugla/src/lib/components/banner/banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-banner",
            "styleUrls": [
                "./banner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./banner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closeButtonTitle",
                    "defaultValue": "Form.CLOSE_BUTTON_LABEL",
                    "line": 27
                },
                {
                    "name": "color",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "message",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "open",
                    "defaultValue": "true",
                    "line": 28
                },
                {
                    "name": "title",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeBanner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "getClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "openBanner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Banner component</p>\n<p>This component generates a banner that is shown on top of all elements</p>\n",
            "rawdescription": "Banner component\n\nThis component generates a banner that is shown on top of all elements",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, AfterViewInit, ElementRef } from '@angular/core';\nimport { UglaService } from '../../ugla.service';\nimport { Form } from '../../enum';\n\n/**\n * Banner component\n *\n * This component generates a banner that is shown on top of all elements\n *\n * @example\n * <ugl-banner [title]=\"'Title'\" [message]=\"'Description'\" [color]=\"'yellow'\"></ugl-banner>\n */\n@Component({\n  selector: 'ugl-banner',\n  templateUrl: './banner.component.html',\n  styleUrls: ['./banner.component.scss']\n})\nexport class BannerComponent implements AfterViewInit {\n\n  constructor(private ugla: UglaService, private element: ElementRef) {\n    this.color = !!this.color ? this.color : this.ugla.color;\n  }\n\n  @Input() title: string;\n  @Input() message: string;\n  @Input() color: string;\n  @Input() closeButtonTitle = Form.CLOSE_BUTTON_LABEL;\n  @Input() open = true;\n\n  @Output() close: EventEmitter<any> = new EventEmitter();\n\n  ngAfterViewInit() {\n    this.element.nativeElement.querySelector('h2').focus();\n  }\n\n  getClasses() {\n    return `${this.color} ${this.open ? '' : 'closed'}`;\n  }\n\n  openBanner() {\n    this.open = true;\n  }\n\n  closeBanner() {\n    this.open = false;\n    this.close.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n.banner {\n  position: fixed;\n  width: 100%;\n  padding: 30px;\n  top: 0;\n  right: 0;\n  z-index: map-get($z-index, 'banner');\n\n  @include mobile {\n    padding: 15px;\n  }\n\n  &.closed {\n    display: none;\n  }\n\n  @each $theme in $themes {\n    &.#{$theme} {\n      background-color: color(_#{$theme}, 'medium');\n    }\n  }\n\n  h2 {\n    margin: 0;\n    padding-right: 10px;\n    padding-bottom: 10px;\n    font-size: 2rem;\n    font-weight: 600;\n    color: color(_others, light);\n\n    @include mobile {\n      padding-right: 24px;\n      font-size: 1.14rem;\n    }\n  }\n\n  p {\n    margin: 0;\n    font-size: 2rem;\n    color: color(_others, light);\n\n    @include mobile {\n      font-size: 1rem;\n    }\n  }\n\n  i {\n    font-size: 1.5rem;\n    color: color(_others, light);\n\n    @include mobile {\n      font-size: 1.71rem;\n    }\n  }\n\n  .close {\n    position: absolute;\n    width: 24px;\n    height: 24px;\n    margin: 15px;\n    top: 0;\n    right: 0;\n    float: right;\n    border: 0;\n    background: transparent;\n    cursor: pointer;\n    outline: none;\n    -webkit-appearance: none;\n\n    &:hover {\n      border-radius: 50px;\n      background: rgba(0, 0, 0, .08);\n      transition: background 0s;\n    }\n\n    &:active {\n      background: rgba(0, 0, 0, .16);\n      transition: background .8s;\n    }\n  }\n}\n",
                    "styleUrl": "./banner.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 300,
                    "end": 310,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 300,
                        "end": 301,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 301,
                        "end": 308,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-banner [title]=\"'Title'\" [message]=\"'Description'\" [color]=\"'yellow'\"></ugl-banner>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "ugla",
                        "type": "UglaService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"banner\" aria-describedby=\"description\" aria-labelledby=\"title\" [ngClass]=\"getClasses()\">\n  <h2 id=\"title\" tabindex=\"1\">{{title}}</h2>\n  <p id=\"description\" [innerHtml]=\"message\" tabindex=\"1\"></p>\n  <button id=\"close-button\" (click)=\"closeBanner()\" [attr.aria-label]=\"closeButtonTitle\" class=\"close\" tabindex=\"1\" [title]=\"closeButtonTitle\">\n    <i class=\"material-icons\" aria-hidden=\"true\">close</i>\n  </button>\n</div>\n"
        },
        {
            "name": "BrandComponent",
            "id": "component-BrandComponent-26b1cd7d3f46b49e6e3d572f02d604b9",
            "file": "projects/ugla/src/lib/components/brand/brand.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-brand",
            "styleUrls": [
                "./brand.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./brand.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "brandImage",
                    "description": "<p>Brand image</p>\n",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "brandName",
                    "description": "<p>Receives the brand&#39;s name</p>\n",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "path",
                    "description": "<p>Receives the path to redirect</p>\n",
                    "line": 32,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Insert the theme name on html component</p>\n",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Brand component</p>\n<p>This component genate brand Logo and brand Name</p>\n",
            "rawdescription": "Brand component\n\nThis component genate brand Logo and brand Name",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * Brand component\n *\n * This component genate brand Logo and brand Name\n *\n * @example\n * <ugl-brand [path]=\"home\" [brandName]=\"BRAND_NAME\"></ugl-brand>\n */\n@Component({\n  selector: 'ugl-brand',\n  templateUrl: './brand.component.html',\n  styleUrls: ['./brand.component.scss']\n})\nexport class BrandComponent {\n\n  /**\n   * Receives the brand's name\n   */\n  @Input() brandName: string;\n\n  /**\n   * Brand image\n   */\n  @Input() brandImage: string;\n\n  /**\n   * Receives the path to redirect\n   */\n  @Input() path: string;\n\n  /**\n   * Insert the theme name on html component\n   */\n  public theme: string;\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   */\n  constructor(private ugla: UglaService) {\n    this.theme = ugla.theme;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white.scss';\n@import './theme-colored.scss';\n",
                    "styleUrl": "./brand.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 184,
                    "end": 194,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 184,
                        "end": 185,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 185,
                        "end": 192,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-brand [path]=\"home\" [brandName]=\"BRAND_NAME\"></ugl-brand>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 759,
                            "end": 763,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 753,
                            "end": 758,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    }
                ]
            },
            "templateData": "<a *ngIf=\"!!path\" [href]=\"path\"  class=\"brand\" [ngClass]=\"theme\" [title]=\"'Logo ' + brandName\" tabindex=\"1\" id=\"brand\">\n  <img [src]=\"brandImage\" [alt]=\"'Logo' + brandName\">\n  <span [innerHtml]=\"brandName\" *ngIf=\"brandName !== ''\"></span>\n</a>\n \n<span *ngIf=\"!(!!path)\"  class=\"brand\" [ngClass]=\"theme\" [title]=\"'Logo ' + brandName\" tabindex=\"1\" id=\"brand\">\n  <img [src]=\"brandImage\" [alt]=\"'Logo' + brandName\">\n  <span [innerHtml]=\"brandName\" *ngIf=\"brandName !== ''\"></span>\n</span>\n     "
        },
        {
            "name": "BreadcrumbComponent",
            "id": "component-BreadcrumbComponent-868ac5bafab51e0bc0dc3f67ce2e9c60",
            "file": "projects/ugla/src/lib/components/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumb.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "menu",
                    "line": 11,
                    "type": "Menu"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Menu } from './../../models/menu';\nimport { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ugl-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss']\n})\nexport class BreadcrumbComponent implements OnInit {\n\n  @Input() menu: Menu;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n.breadcrumb {\n  position: fixed;\n  display: flex;\n  width: 100%;\n  padding: 8px 1rem;\n  top: 0;\n  background-color: color(_others, body);\n  z-index: map-get($z-index, 'toolbar');\n  align-items: center;\n\n  &.aside-small {\n    margin-left: 32px;\n  }\n\n  @include mobile() {\n    display: none;\n  }\n\n  > div {\n    display: flex;\n    align-items: center;\n  }\n\n  a {\n    height: 20px;\n    font-size: 1rem;\n    color: color(_aquamarine, medium);\n    align-items: center;\n\n    &.no-link {\n      text-decoration: none;\n      font-weight: 600;\n    }\n\n    &:hover {\n      font-weight: 600;\n    }\n\n    &.dashboard {\n      display: flex;\n      align-items: center;\n      text-decoration: none;\n\n      > .material-icons {\n        font-size: 18px;\n        color: color(_aquamarine, medium);\n      }\n    }\n  }\n}\n\n.material-icons {\n  font-size: 14px;\n  color: color(_gray, medium);\n}\n",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"breadcrumb\">\n  <a href=\"/dev\" class=\"dashboard\"><span class=\"material-icons\">dashboard</span></a>\n  <span class=\"material-icons\">chevron_right</span>\n  <div *ngFor=\"let item of menu?.items; let idx = index; let last = last\">\n    <a [routerLink]=\"item.url\"\n      [routerLinkActive]=\"'active'\"\n      [routerLinkActiveOptions]=\"{exact: true}\"\n      class=\"gtm-menu-item\"\n      [ngClass]=\"{'no-link': last}\"\n      [id]=\"'breadcrumb-' + idx\">{{ item.description }}</a>\n      <span class=\"material-icons\" *ngIf=\"!last\">chevron_right</span>\n  </div>\n</nav>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-eddb1c30463003a7438e264f4ca68a41-1",
            "file": "projects/ugla/src/lib/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "description": "<p>Set color: white, aquamarine, red, purple</p>\n<p>Default: aquarine</p>\n",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "description": "<p>Has disabled</p>\n<p>Default: false</p>\n",
                    "line": 74,
                    "type": "boolean"
                },
                {
                    "name": "floating",
                    "defaultValue": "false",
                    "description": "<p>Indicates if button should be floating</p>\n<p>Default: false</p>\n",
                    "line": 95
                },
                {
                    "name": "id",
                    "description": "<p>Text to attribute id</p>\n",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "rotated",
                    "defaultValue": "false",
                    "line": 97
                },
                {
                    "name": "size",
                    "description": "<p>Set size: large, medium, small, min-small</p>\n<p>Default: &#39;&#39;</p>\n",
                    "line": 34,
                    "type": "string"
                },
                {
                    "name": "style",
                    "description": "<p>Set style: fill, border, icon</p>\n<p>Default: fill</p>\n",
                    "line": 53,
                    "type": "string"
                },
                {
                    "name": "tabindex",
                    "description": "<p>Element tabindex</p>\n<p>Default: 0</p>\n",
                    "line": 88,
                    "type": "number"
                },
                {
                    "name": "theme",
                    "description": "<p>Receives the theme&#39;s name</p>\n",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "title",
                    "description": "<p>Text to title</p>\n<p>Default: &#39;&#39;</p>\n",
                    "line": 67,
                    "type": "string"
                },
                {
                    "name": "type",
                    "description": "<p>Types: submit, button</p>\n<p>Default: button</p>\n",
                    "line": 81,
                    "type": "string"
                },
                {
                    "name": "wave",
                    "description": "<p>Has wave effect?</p>\n<p>Default: true</p>\n",
                    "line": 60,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "action",
                    "defaultValue": "new EventEmitter<any>()",
                    "description": "<p>Function to action</p>\n",
                    "line": 102,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickedButton",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "description": "<p>Set initials configurations</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Button</p>\n",
            "rawdescription": "Button",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, SimpleChanges, OnChanges, EventEmitter, Output } from '@angular/core';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * Button\n *\n * @example\n * <ugl-button\n *    [id]=\"'id'\"\n *    [type]=\"TYPE\"\n *    [theme]=\"THEME\"\n *    [style]=\"STYLE\"\n *    [wave]=\"false\"\n *    [title]=\"TITLE\"\n *    [disabled]=\"false\">TEXT</ugl-button>\n */\n@Component({\n  selector: 'ugl-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit, OnChanges {\n\n  /**\n   * Text to attribute id\n   */\n  @Input() id: string;\n\n  /**\n   * Set size: large, medium, small, min-small\n   *\n   * Default: ''\n   */\n  @Input() size: string;\n\n  /**\n   * Receives the theme's name\n   */\n  @Input() theme: string;\n\n  /**\n   * Set color: white, aquamarine, red, purple\n   *\n   * Default: aquarine\n   */\n  @Input() color: string;\n\n  /**\n   * Set style: fill, border, icon\n   *\n   * Default: fill\n   */\n  @Input() style: string;\n\n  /**\n   * Has wave effect?\n   *\n   * Default: true\n   */\n  @Input() wave: boolean;\n\n  /**\n   * Text to title\n   *\n   * Default: ''\n   */\n  @Input() title: string;\n\n  /**\n   * Has disabled\n   *\n   * Default: false\n   */\n  @Input() disabled: boolean;\n\n  /**\n   * Types: submit, button\n   *\n   * Default: button\n   */\n  @Input() type: string;\n\n  /**\n   * Element tabindex\n   *\n   * Default: 0\n   */\n  @Input() tabindex: number;\n\n  /**\n   * Indicates if button should be floating\n   *\n   * Default: false\n   */\n  @Input() floating = false;\n\n  @Input() rotated = false;\n\n  /**\n   * Function to action\n   */\n  @Output() action = new EventEmitter<any>();\n\n  /**\n   * @ignore\n   */\n  public groupClass = '';\n\n  /**\n   * @ignore\n   */\n  constructor() {\n  }\n\n  /**\n   * Set initials configurations\n   */\n  ngOnInit() {\n    this.size = (this.size === undefined) ? '' : this.size;\n    this.style = (this.style === undefined) ? 'fill' : this.style;\n    this.color = (this.color === undefined) ? 'aquamarine' : this.color;\n    this.disabled = (this.disabled === undefined) ? false : this.disabled;\n    this.type = (this.type === undefined) ? 'button' : this.type;\n    this.tabindex = (this.tabindex === undefined) ? 0 : this.tabindex;\n\n    if (this.theme !== undefined && this.theme !== 'theme-white') {\n      this.color = 'white';\n    }\n\n    const isIcon = this.style === 'icon' ? `btn-icon btn-${this.style}-${this.color}` : `btn btn-${this.style}-${this.color}`;\n\n    this.groupClass = `${this.size} ${isIcon}`;\n    this.groupClass = (this.wave) ? `${this.groupClass} wave` : this.groupClass;\n    this.groupClass = (this.floating) ? `${this.groupClass} floating` : this.groupClass;\n    this.groupClass = (this.rotated) ? `${this.groupClass} rotated` : this.groupClass;\n  }\n\n  clickedButton(event: any) {\n    this.action.emit(event);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const COLOR = 'color';\n\n    if (changes[COLOR] !== undefined ) {\n      this.color = changes[COLOR].currentValue;\n      const isIcon = this.style === 'icon' ? `btn-icon btn-${this.style}-${this.color}` : `btn btn-${this.style}-${this.color}`;\n      this.groupClass = `${this.size} ${isIcon}`;\n      this.groupClass = (this.wave) ? `${this.groupClass} wave` : this.groupClass;\n    }\n\n    if (changes.rotated !== undefined) {\n      if (changes.rotated.currentValue) {\n        this.groupClass = (changes.rotated.currentValue) ? `${this.groupClass} rotated` : this.groupClass;\n      } else {\n        if (this.groupClass.indexOf('rotated') > -1) {\n          this.groupClass = this.groupClass.substring(this.groupClass.indexOf('rotated'), 0).trim();\n        }\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 177,
                    "end": 187,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 177,
                        "end": 178,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 178,
                        "end": 185,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-button\n[id]=\"'id'\"\n[type]=\"TYPE\"\n[theme]=\"THEME\"\n[style]=\"STYLE\"\n[wave]=\"false\"\n[title]=\"TITLE\"\n[disabled]=\"false\">TEXT</ugl-button>"
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button [id]=\"id\" [type]=\"type\" [ngClass]=\"groupClass\" [title]=\"title\" [disabled]=\"disabled\" tabindex=\"{{ disabled ? '-1' : tabindex }}\" (click)=\"clickedButton($event)\">\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-23a29cedc4004d245c6bef0919624018",
            "file": "projects/ugla/src/lib/components/cards/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "colorIcon",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "icon",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "iconTitle",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "one",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "three",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "two",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "actionCard",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "actionIcon",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handlerCard",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerIcon",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'ugl-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit, OnChanges {\n  @Input() one: string;\n  @Input() two: string;\n  @Input() three: string;\n  @Input() icon: string;\n  @Input() colorIcon: string;\n  @Input() iconTitle: string;\n  @Output() actionCard = new EventEmitter<any>();\n  @Output() actionIcon = new EventEmitter<any>();\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.one = (changes.one) ? changes.one.currentValue : this.one;\n    this.two = (changes.two) ? changes.two.currentValue : this.two;\n    this.three = (changes.three) ? changes.three.currentValue : this.three;\n    this.icon = (changes.icon) ? changes.icon.currentValue : this.icon;\n    this.colorIcon = (changes.colorIcon) ? changes.colorIcon.currentValue : this.colorIcon;\n    this.iconTitle = (changes.iconTitle) ? changes.iconTitle.currentValue : this.iconTitle;\n  }\n\n  handlerCard(event: any) {\n    this.actionCard.emit(event);\n  }\n\n  handlerIcon(event: any) {\n    this.actionIcon.emit(event);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../sass/index';\n\n.card {\n  display: flex;\n  padding: 10px;\n  border-radius: 5px;\n  background-color: color(_others, light);\n  cursor: pointer;\n  box-shadow: 2px 2px 4px color(_others, shadow);\n  transform: .5s all;\n\n  &:hover {\n    box-shadow: 4px 4px 6px color(_others, shadow);\n    transform: .5s all;\n  }\n\n  .row {\n    width: calc(100% - 48px);\n    margin-right: 24px;\n    align-self: center;\n  }\n\n  .line {\n    display: block;\n  }\n\n  .one {\n    font-size: 16px;\n    font-weight: 600;\n    color: color(_gray, dark);\n  }\n\n  .two {\n    margin-top: 4px;\n    font-size: 14px;\n    color: color(_gray, light);\n  }\n\n  .three {\n    margin-top: 2px;\n    font-size: 12px;\n    color: color(_gray, light);\n  }\n\n  .material-icons {\n    height: 24px;\n    font-size: 1.5rem;\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"card\">\n  <div class=\"row\" (click)=\"handlerCard($event)\">\n    <p class=\"line one truncate\" *ngIf=\"one\">{{ one }}</p>\n    <p class=\"line two truncate\" *ngIf=\"two\">{{ two }}</p>\n    <p class=\"line three truncate\" *ngIf=\"three\">{{ three }}</p>\n  </div>\n  <span class=\"material-icons\"\n    [title]=\"iconTitle\"\n    [ngClass]=\"'color-' + colorIcon\"\n    (click)=\"handlerIcon($event)\">{{ icon }}</span>\n</div>\n"
        },
        {
            "name": "CardInfoPhotoComponent",
            "id": "component-CardInfoPhotoComponent-c406b6e85000b192ccac19ff7f23c253",
            "file": "projects/ugla/src/lib/components/cards/card-info-photo/card-info-photo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-card-info-photo",
            "styleUrls": [
                "./card-info-photo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-info-photo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonLabel",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "clicked",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "infos",
                    "line": 12,
                    "type": "string[]"
                },
                {
                    "name": "photo",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "smallCard",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "title",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "action",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "buttonClicked",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ugl-card-info-photo',\n  templateUrl: './card-info-photo.component.html',\n  styleUrls: ['./card-info-photo.component.scss']\n})\nexport class CardInfoPhotoComponent implements OnInit {\n\n  @Input() photo: string;\n  @Input() title: string;\n  @Input() infos: string[];\n  @Input() clicked: boolean;\n  @Output() action = new EventEmitter<any>();\n\n  @Input() buttonLabel: string;\n  @Output() buttonClicked = new EventEmitter<any>();\n\n  @Input() smallCard: boolean;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  handler() {\n    this.action.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../sass/index';\n\n.card {\n  border-radius: 5px;\n  background-color: color(_others, light);\n  overflow: hidden;\n\n  &.clicked {\n    cursor: pointer;\n    transition: box-shadow .5s;\n\n    &:hover {\n      transition: box-shadow .5s;\n      box-shadow: 2px 2px 4px color(_others, shadow);\n    }\n  }\n\n  .infos {\n    padding: 5px 10px 10px;\n  }\n\n  img {\n    width: 100%;\n  }\n\n  h3 {\n    margin: 0;\n    font-size: 1rem;\n    font-weight: bold;\n    text-align: center;\n  }\n\n  p {\n    font-size: 1rem;\n    text-align: center;\n  }\n\n  .button-container {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    margin-bottom: 15px;\n  }\n}\n\n.small-card {\n  max-height: 206;\n  max-width: 268px;\n  box-shadow: 2px 2px 4px color(_others, shadow);\n\n  h3 {\n    font-size: 1.2rem !important;\n    color: #5F5F5F !important;\n  }\n}\n",
                    "styleUrl": "./card-info-photo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\" (click)=\"handler()\" [ngClass]=\"{'clicked': clicked, 'small-card': smallCard}\">\n  <img [src]=\"photo\" [alt]=\"title\">\n  <div class=\"infos\">\n    <h3>{{title}}</h3>\n    <p *ngFor=\"let info of infos\">{{ info }}</p>\n  </div>\n  <div class=\"button-container\">\n    <div *ngIf=\"buttonLabel && buttonClicked.observers.length\">\n      <ugl-button [title]=\"buttonLabel\"\n                  [size]=\"'min-small'\"\n                  [style]=\"'fill'\"\n                  (click)=\"buttonClicked.emit()\">{{buttonLabel}}</ugl-button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CardTimelineComponent",
            "id": "component-CardTimelineComponent-1692b655d20924e86958f8d7b1509986",
            "file": "projects/ugla/src/lib/components/cards/card-timeline/card-timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-card-timeline",
            "styleUrls": [
                "./card-timeline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-timeline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'grey'",
                    "description": "<p>Set the status color: aquamarine, green, red, yellow, purple, grey</p>\n<p>Default: grey</p>\n",
                    "line": 55
                },
                {
                    "name": "id",
                    "description": "<p>Set the card id</p>\n",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "info1",
                    "description": "<p>Set the info1 (region 2)</p>\n",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "info2",
                    "description": "<p>Set the info2 (region 3)</p>\n",
                    "line": 43,
                    "type": "string"
                },
                {
                    "name": "status",
                    "description": "<p>Set the status (region 4)</p>\n",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "title",
                    "description": "<p>Set the title (region 1)</p>\n",
                    "line": 33,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "cardClicked",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Emitter for card clicked.</p>\n",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCardClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "description": "<p>Function called on click of the card. Emit true.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1255,
                                "end": 1260,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 1249,
                                "end": 1254,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is null</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Card Timeline</p>\n<p>This component generates a card, emitting if the card is clicked.</p>\n",
            "rawdescription": "Card Timeline\n\nThis component generates a card, emitting if the card is clicked.",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n/**\n * Card Timeline\n *\n * This component generates a card, emitting if the card is clicked.\n *\n * @example\n * <ugl-card-timeline\n *  [id]=\"'id'\"\n *  [title]=\"'Title'\"\n *  [info1]=\"'info1'\"\n *  [info2]=\"'info2'\"\n *  [status]=\"'Status'\"\n *  [color]=\"'green'\"\n *  (cardClicked)=\"onCardClick(event)\">Extra content</ugl-card-timeline>\n */\n@Component({\n  selector: 'ugl-card-timeline',\n  templateUrl: './card-timeline.component.html',\n  styleUrls: ['./card-timeline.component.scss']\n})\nexport class CardTimelineComponent {\n\n  /**\n   * Set the card id\n   */\n  @Input() id: string;\n\n  /**\n   * Set the title (region 1)\n   */\n  @Input() title: string;\n\n  /**\n   * Set the info1 (region 2)\n   */\n  @Input() info1: string;\n\n  /**\n   * Set the info2 (region 3)\n   */\n  @Input() info2: string;\n\n  /**\n   * Set the status (region 4)\n   */\n  @Input() status: string;\n\n  /**\n   * Set the status color: aquamarine, green, red, yellow, purple, grey\n   *\n   * Default: grey\n   */\n  @Input() color = 'grey';\n\n  /**\n   * Emitter for card clicked.\n   */\n  @Output() cardClicked = new EventEmitter<boolean>();\n\n  constructor() { }\n\n  /**\n   * Function called on click of the card. Emit true.\n   * @param event is null\n   */\n  onCardClicked(event) {\n    this.cardClicked.emit(true);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../sass/index';\n\n.card-timeline {\n  padding: 2.5px 10px 2.5px 36px;\n\n  @each $color in $themes {\n    &.#{$color} {\n      .card {\n        &::before {\n          background-color: color(_#{$color}, 'medium');\n        }\n        .status {\n          color: color(_#{$color}, 'medium');\n        }\n      }\n    }\n  }\n\n  .card {\n    position: relative;\n\n    &::before {\n      content: ' ';\n      display: block;\n      position: absolute;\n      left: -26px;\n      width: 16px;\n      height: 16px;\n      top: 19px;\n      background-color: color(_others, 'dark');\n      border-radius: 100%;\n      z-index: 1;\n    }\n\n    &::after {\n      content: ' ';\n      display: block;\n      position: absolute;\n      width: 2px;\n      left: -19px;\n      top: 0px;\n      height: calc(100% + 5px);\n      background-color: color(_gray, 'extra-light');\n    }\n\n    .content {\n      display: grid;\n      grid-template-areas:\n        'title title title info1'\n        'title title title info2'\n        'status status status status'\n        'footer footer footer footer';\n      padding: 10px;\n      color: color(_others, 'dark');\n      border-radius: 5px;\n      box-shadow: 0 4px 8px 0 color(_gray, 'extra-light');\n      background-color: color(_others, 'light');\n\n      .title {\n        grid-area: title;\n        display: flex;\n        align-items: center;\n        font-size: 1rem;\n      }\n\n      .info {\n        text-align: right;\n        font-size: 0.857rem;\n\n        &-1 {\n          grid-area: info1;\n        }\n\n        &-2 {\n          grid-area: info2;\n        }\n      }\n\n      .status {\n        grid-area: status;\n        font-weight: 600;\n        font-size: 0.857rem;\n        border-top: 1px solid color(_others, 'body');\n        margin: 10px -5px 0;\n        padding: 2px 5px 0;\n      }\n\n      .more-info {\n        grid-area: footer;\n        font-size: 0.857rem;\n        color: color(_gray, 'light');\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./card-timeline.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 172,
                    "end": 182,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 172,
                        "end": 173,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 173,
                        "end": 180,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-card-timeline\n[id]=\"'id'\"\n[title]=\"'Title'\"\n[info1]=\"'info1'\"\n[info2]=\"'info2'\"\n[status]=\"'Status'\"\n[color]=\"'green'\"\n(cardClicked)=\"onCardClick(event)\">Extra content</ugl-card-timeline>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 60
            },
            "templateData": "<div class=\"card-timeline\" [id]=\"id\" [ngClass]=\"color\" tabindex=\"0\" (click)=\"onCardClicked($event)\">\n  <div class=\"card\">\n    <div class=\"content\">\n      <div class=\"title truncate-two\" [title]=\"title\">{{ title }}</div>\n      <div class=\"info info1\">{{ info1 }}</div>\n      <div class=\"info info2\">{{ info2 }}</div>\n      <div class=\"status\">{{ status }}</div>\n      <div class=\"more-info\"><ng-content></ng-content></div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-0ded98257a5aaf8a6045241618fac48d",
            "file": "projects/ugla/src/lib/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "description": "<p>Set disabled</p>\n",
                    "line": 37,
                    "type": "boolean"
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "description": "<p>Set if is checked.</p>\n<p>Default is false</p>\n",
                    "line": 49
                },
                {
                    "name": "mainText",
                    "description": "<p>Set main Text</p>\n",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "name",
                    "description": "<p>Set main Text</p>\n",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "subText",
                    "description": "<p>Set sub Text</p>\n",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "value",
                    "description": "<p>Set a value</p>\n",
                    "line": 54,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Event on clicked checked</p>\n",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "onCheck",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Checkbox</p>\n",
            "rawdescription": "Checkbox",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n/**\n * Checkbox\n *\n *\n *\n * @example\n * <ugl-checkbox\n *  [disabled]=\"false\"\n *  [mainText]=\"maintTextCheckbox2\"\n *  [subText]=\"subTextCheckbox2\">\n *  [name]=\"name\"\n * </ugl-checkbox>\n *\n */\n@Component({\n  selector: 'ugl-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.scss']\n})\nexport class CheckboxComponent implements OnInit {\n\n  /**\n   * Set main Text\n   */\n  @Input() mainText: string;\n\n  /**\n   * Set main Text\n   */\n  @Input() name: string;\n\n  /**\n   * Set disabled\n   */\n  @Input() disabled: boolean;\n\n  /**\n   * Set sub Text\n   */\n  @Input() subText: string;\n\n  /**\n   * Set if is checked.\n   *\n   * Default is false\n   */\n  @Input() isChecked = false;\n\n  /**\n   * Set a value\n   */\n  @Input() value: string;\n\n  /**\n   * Event on clicked checked\n   */\n  @Output() checked = new EventEmitter<boolean>();\n\n  constructor() { }\n\n  ngOnInit() {\n    this.disabled = (this.disabled === undefined) ? false : this.disabled;\n  }\n\n  onCheck(event: any) {\n    this.isChecked = event.target.checked;\n    this.checked.emit(event.target.checked);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n.field-check {\n  color: color(_others, dark);\n\n  input[type=checkbox] {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n\n    &:indeterminate + label:before {\n      content: 'indeterminate_check_box';\n    }\n\n    + label {\n      display: flex;\n      flex-direction: row;\n      font-size: 14px;\n      line-height: 1.8;\n      font-family: 'Source Sans Pro',  sans-serif;\n\n      .text {\n        display: flex;\n        flex-direction: column;\n        line-height: 1.4;\n      }\n\n      &::before {\n        content: 'check_box_outline_blank';\n        @extend %material-icons;\n        width: 24px;\n        height: 24px;\n        margin-right: 10px;\n        align-content: center;\n      }\n    }\n\n    &:checked {\n      +label {\n        &::before {\n          content: 'check_box_outline';\n        }\n      }\n    }\n\n    &[disabled] {\n      + label {\n       opacity: 0.5;\n       cursor: default;\n       }\n   }\n\n\n  }\n}\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 109,
                    "end": 119,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 109,
                        "end": 110,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 110,
                        "end": 117,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-checkbox\n[disabled]=\"false\"\n[mainText]=\"maintTextCheckbox2\"\n[subText]=\"subTextCheckbox2\">\n[name]=\"name\"\n</ugl-checkbox>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 59
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"field-check\" *ngIf=\"!subText\">\n  <input type=\"checkbox\" [value]=\"value\" [id]=\"'check-'+ name\"  tabindex=\"0\" [attr.aria-labelledby]=\"'check-'+ name + '-label'\"  (change)=\"onCheck($event)\" [disabled]=\"disabled\" [checked]=\"isChecked\">\n  <label [innerHTML]=\"mainText\" [for]=\"'check-'+ name\" [id]=\"'check-'+ name + '-label'\">\n  </label>\n</div>\n\n<div class=\"field-check\" *ngIf=\"subText\">\n  <input type=\"checkbox\" [value]=\"value\" [id]=\"'check-sub-'+ name\" tabindex=\"0\" [attr.aria-labelledby]=\"'check-'+ name + '-label'\" (change)=\"onCheck($event)\" [disabled]=\"disabled\" [checked]=\"isChecked\">\n  <label [for]=\"'check-sub-'+ name\" [id]=\"'check-'+ name + '-label'\" >\n    <span class=\"text\">\n      <strong>{{ mainText }}</strong>\n      <div [innerHTML]=\"subText\"></div>\n    </span>\n  </label>\n</div>\n"
        },
        {
            "name": "DatepickerComponent",
            "id": "component-DatepickerComponent-b164faf2439b2c02ff990c2b40a7f54c",
            "file": "projects/ugla/src/lib/components/datepicker/datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-datepicker",
            "styleUrls": [
                "./datepicker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./datepicker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "datePattern",
                    "description": "<p>Set a date custom date pattern.\nUsing the pattern, it&#39;s possible to parse into a valid date object.\nDefault: null</p>\n",
                    "line": 138,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "description": "<p>Is disabled?</p>\n<p>Default: false</p>\n",
                    "line": 68,
                    "type": "boolean"
                },
                {
                    "name": "invalid",
                    "description": "<p>Is invalid</p>\n<p>Default: false</p>\n",
                    "line": 82,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "description": "<p>Set label</p>\n",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "language",
                    "description": "<p>Language for date formatting</p>\n<p>Default: en</p>\n",
                    "line": 103,
                    "type": "string"
                },
                {
                    "name": "message",
                    "description": "<p>Set message</p>\n",
                    "line": 50,
                    "type": "string"
                },
                {
                    "name": "messageInvalidSelection",
                    "description": "<p>Message for invalid selection</p>\n<p>Default: Form.INVALID_SELECTION</p>\n",
                    "line": 89,
                    "type": "string"
                },
                {
                    "name": "messageRequired",
                    "description": "<p>Message for invalid selection</p>\n<p>Default: Form.REQUIRED</p>\n",
                    "line": 96,
                    "type": "string"
                },
                {
                    "name": "name",
                    "description": "<p>Set name</p>\n",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "options",
                    "description": "<p>Set a options</p>\n<p><a href=\"https://github.com/qodesmith/datepicker\">See more</a>\nDefault:</p>\n<ul>\n<li>startDate: new Date()</li>\n<li>position: &#39;br&#39;</li>\n<li>formatter: locale en-US</li>\n</ul>\n",
                    "line": 61,
                    "type": "any"
                },
                {
                    "name": "readonly",
                    "description": "<p>Allow set field readonly\nUse as needed to assure a disabled look and feel, but still readable by accessibility&#39;s screen readers.\nDefault:  false</p>\n",
                    "line": 110,
                    "type": "boolean"
                },
                {
                    "name": "required",
                    "description": "<p>Is required</p>\n<p>Default: false</p>\n",
                    "line": 75,
                    "type": "boolean"
                },
                {
                    "name": "value",
                    "description": "<p>Set initial value</p>\n",
                    "line": 34,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "onSelectValue",
                    "defaultValue": "new EventEmitter<Date>()",
                    "line": 140,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_readonly",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 171,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "classes",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Classes of the component</p>\n",
                    "line": 162,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "groupClass",
                    "type": "string",
                    "optional": false,
                    "description": "<p>List classes</p>\n",
                    "line": 145,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 169
                },
                {
                    "name": "invalidFormat",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Indicates if the format of the date is invalid</p>\n<p>Default is false</p>\n",
                    "line": 157,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "originalMessage",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Save the origin message</p>\n",
                    "line": 150,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "defaultInitDatepicker",
                    "args": [],
                    "optional": false,
                    "returnType": "{ startDate: any; position: string; }",
                    "typeParameters": [],
                    "line": 350,
                    "description": "<p>Default init datepicker options.</p>\n"
                },
                {
                    "name": "hideFromScreenReaders",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 360,
                    "description": "<p>Hide datepicker calendar from screen readers</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "newDatepickerInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 365,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 326,
                    "description": "<p>Execute on after view</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 247,
                    "description": "<p>Set initials configurations</p>\n"
                },
                {
                    "name": "onDateChange",
                    "args": [
                        {
                            "name": "picker",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "description": "<p>Event on change inputs</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3347,
                                "end": 3353,
                                "flags": 0,
                                "escapedText": "picker"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 3341,
                                "end": 3346,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a instance of Picker</p>\n"
                        }
                    ]
                },
                {
                    "name": "onFocusIn",
                    "args": [
                        {
                            "name": "instance",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "description": "<p>Event focus in</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6587,
                                "end": 6595,
                                "flags": 0,
                                "escapedText": "instance"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 6581,
                                "end": 6586,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a instance of Picker</p>\n"
                        }
                    ]
                },
                {
                    "name": "onFocusOut",
                    "args": [
                        {
                            "name": "instance",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "description": "<p>Event focus out</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6838,
                                "end": 6846,
                                "flags": 0,
                                "escapedText": "instance"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 6832,
                                "end": 6837,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a instance of Picker</p>\n"
                        }
                    ]
                },
                {
                    "name": "resetField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239
                },
                {
                    "name": "setCurrentDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312,
                    "description": "<p>Set a current date value.</p>\n"
                },
                {
                    "name": "setDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "description": "<p>Set a date</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8035,
                                "end": 8039,
                                "flags": 0,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "tagName": {
                                "pos": 8029,
                                "end": 8034,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a selected Date</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {AfterViewInit, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Form} from '../../enum';\nimport * as datepicker_ from 'js-datepicker';\nimport {UglaService} from '../../ugla.service';\nimport * as moment_ from 'moment';\n\n/**\n * @ignore\n */\nconst datepicker = datepicker_;\nconst moment = moment_;\n\n@Component({\n  selector: 'ugl-datepicker',\n  templateUrl: './datepicker.component.html',\n  styleUrls: ['./datepicker.component.scss']\n})\nexport class DatepickerComponent implements OnInit, AfterViewInit {\n\n  /**\n   * Set name\n   */\n  @Input() name: string;\n\n  /**\n   * Set label\n   */\n  @Input() label: string;\n\n  /**\n   * Set initial value\n   */\n  @Input()\n  set value(value: any) {\n    if (value) {\n      this._value = new Date(value);\n    }\n  }\n\n  get value() {\n    if (this.picker) {\n      this.picker.dateSelected = this._value;\n    }\n    return null;\n  }\n\n  /**\n   * Set message\n   */\n  @Input() message: string;\n\n  /**\n   * Set a options\n   *\n   * [See more](https://github.com/qodesmith/datepicker)\n   * Default:\n   * - startDate: new Date()\n   * - position: 'br'\n   * - formatter: locale en-US\n   */\n  @Input() options: any;\n\n  /**\n   * Is disabled?\n   *\n   * Default: false\n   */\n  @Input() disabled: boolean;\n\n  /**\n   * Is required\n   *\n   * Default: false\n   */\n  @Input() required: boolean;\n\n  /**\n   * Is invalid\n   *\n   * Default: false\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Message for invalid selection\n   *\n   * Default: Form.INVALID_SELECTION\n   */\n  @Input() messageInvalidSelection: string;\n\n  /**\n   * Message for invalid selection\n   *\n   * Default: Form.REQUIRED\n   */\n  @Input() messageRequired: string;\n\n  /**\n   * Language for date formatting\n   *\n   * Default: en\n   */\n  @Input() language: string;\n\n  /**\n   * Allow set field readonly\n   * Use as needed to assure a disabled look and feel, but still readable by accessibility's screen readers.\n   * Default:  false\n   */\n  @Input() set readonly(value: boolean) {\n    this._readonly = value;\n\n    if (this.picker) {\n      if (value) {\n        this.picker.calendar.remove();\n      } else {\n        // instantiate a new datepicker\n        this.picker.remove();\n        this.options.onSelect = (instance) => {\n          // force trigger event of input\n          const event = new Event('change');\n          instance.el.dispatchEvent(event);\n        };\n        this.newDatepickerInstance();\n      }\n    }\n  }\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  /**\n   * Set a date custom date pattern.\n   * Using the pattern, it's possible to parse into a valid date object.\n   * Default: null\n   */\n  @Input() datePattern: string;\n\n  @Output() onSelectValue = new EventEmitter<Date>();\n\n  /**\n   * List classes\n   */\n  public groupClass: string;\n\n  /**\n   * Save the origin message\n   */\n  public originalMessage: string;\n\n  /**\n   * Indicates if the format of the date is invalid\n   *\n   * Default is false\n   */\n  public invalidFormat: boolean;\n\n  /**\n   * Classes of the component\n   */\n  public classes: string;\n\n  /**\n   * @ignore\n   */\n  picker: any;\n\n  id: string;\n\n  private _value: Date;\n\n  private _readonly: boolean;\n\n  /**\n   * @ignore\n   */\n  private theme: string;\n\n  /**\n   * @ignore\n   */\n  constructor(private ugla: UglaService) {\n    this.theme = ugla.theme;\n  }\n\n  /**\n   * Event on change inputs\n   * @param picker is a instance of Picker\n   */\n  onDateChange(picker) {\n    if (picker) {\n      if (!!this.datePattern) {\n        try {\n          let momentDate: moment_.Moment;\n\n          // If date was selected using datepicker\n          if (!!picker.dateSelected) {\n            momentDate = moment(picker.dateSelected);\n            picker.el.value = momentDate.format(this.datePattern);\n          }\n\n          const dateValue = moment(picker.el.value, this.datePattern, this.language, true);\n\n          if (dateValue.isValid()) {\n            picker.setDate(dateValue.toDate(), true);\n            picker.el.value = dateValue.format(this.datePattern);\n            this.invalid = false;\n            this.message = dateValue.isValid() ? this.originalMessage : this.messageInvalidSelection;\n          } else {\n            this.invalid = !dateValue.isValid();\n            this.message = dateValue.isValid() ? this.originalMessage : this.messageInvalidSelection;\n            this.invalidFormat = dateValue.parsingFlags().invalidFormat;\n          }\n        } catch (e) {\n          this.invalid = true;\n          this.message = this.messageInvalidSelection;\n        } finally {\n          this.invalidFormat = this.invalid;\n        }\n\n      } else {\n        try {\n          const format = this.language === 'en' ? '$1/$2/$3' : '$2/$1/$3';\n          picker.setDate(new Date(picker.el.value.replace(/(\\d{2})[-/](\\d{2})[-/](\\d+)/, format)), true);\n          this.invalid = false;\n          this.message = this.originalMessage;\n        } catch (e) {\n          this.invalid = true;\n          this.message = this.messageInvalidSelection;\n        } finally {\n          this.invalidFormat = this.invalid;\n        }\n      }\n      this.onSelectValue.emit(picker.dateSelected);\n    }\n  }\n\n  resetField() {\n    this.picker.setDate(null, false);\n    this.picker.parent.classList.add('reset');\n  }\n\n  /**\n   * Set initials configurations\n   */\n  ngOnInit() {\n    this.id = 'datepicker-' + this.name;\n    this.originalMessage = this.message;\n    this.value = this.value ? this.value : '';\n    this.invalid = (this.invalid !== undefined) ? this.invalid : false;\n    this.disabled = (this.disabled !== undefined) ? this.disabled : false;\n    this.readonly = (this.readonly !== undefined) ? this.readonly : false;\n    this.messageInvalidSelection = (this.messageInvalidSelection !== undefined) ? this.messageInvalidSelection : Form.INVALID_SELECTION;\n    this.messageRequired = (this.messageRequired !== undefined) ? this.messageRequired : Form.REQUIRED;\n    this.language = (this.language !== undefined) ? this.language : 'en';\n    this.invalidFormat = (this.invalidFormat !== undefined) ? this.invalidFormat : false;\n    this.options = (this.options !== undefined) ? this.options : this.defaultInitDatepicker();\n    this.classes = `${this.theme}`;\n    this.datePattern = !!this.datePattern ? this.datePattern : this.language.indexOf('br') > -1 ? 'DD/MM/YYYY' : 'MM/DD/YYYY';\n\n    this.options.onHide = (instance) => {\n      this.onFocusOut(instance);\n    };\n\n    this.options.onSelect = (instance) => {\n      // force trigger event of input\n      const event = new Event('change');\n      instance.el.dispatchEvent(event);\n    };\n\n  }\n\n  /**\n   * Event focus in\n   * @param instance is a instance of Picker\n   */\n  onFocusIn(instance) {\n    const input: HTMLInputElement = instance.el;\n    input.setAttribute('focused', 'true');\n\n    input.parentElement.classList.remove('reset');\n  }\n\n  /**\n   * Event focus out\n   * @param instance is a instance of Picker\n   */\n  onFocusOut(instance) {\n    // Both instances will be set because they are linked by `id`.\n    const input: HTMLInputElement = instance.el;\n\n    if (input.parentElement.classList.value.indexOf('reset') > -1) {\n      this.invalid = false;\n      input.classList.remove('invalid');\n      this.message = this.originalMessage;\n    } else if (this.required && input.hasAttribute('focused')) {\n      if (input.value.length === 0) {\n        this.invalid = true;\n        this.message = this.messageRequired;\n      } else if (!this.invalid) {\n        this.invalid = false;\n        input.classList.remove('invalid');\n        this.message = this.originalMessage;\n      }\n    }\n  }\n\n  /**\n   * Set a current date value.\n   */\n  setCurrentDate() {\n    if (this._value) {\n      this.picker.setDate(this._value, true);\n      const event = new Event('change');\n      const input: HTMLInputElement = this.picker.el;\n      input.dispatchEvent(event);\n    } else {\n      this.picker.setDate(null, false);\n    }\n  }\n\n  /**\n   * Execute on after view\n   */\n  ngAfterViewInit() {\n    this.newDatepickerInstance();\n    this.setCurrentDate();\n  }\n\n  /**\n   * Set a date\n   * @param date is a selected Date\n   */\n  setDate(date: Date) {\n    if (date === null) {\n      this.picker.setDate();\n    } else {\n      this.picker.setDate(date);\n    }\n\n    const event = new Event('change');\n    const input: HTMLInputElement = this.picker.el;\n    input.dispatchEvent(event);\n  }\n\n  /**\n   * Default init datepicker options.\n   */\n  defaultInitDatepicker() {\n    return this.options = {\n      startDate: new Date(),\n      position: 'br'\n    };\n  }\n\n  /**\n   * Hide datepicker calendar from screen readers\n   */\n  private hideFromScreenReaders() {\n    document.querySelectorAll('.qs-datepicker').forEach(item => item.setAttribute('aria-hidden', 'true'));\n    document.querySelectorAll('.qs-overlay-year').forEach(item => item.setAttribute('aria-hidden', 'true'));\n  }\n\n  private newDatepickerInstance() {\n    this.picker = datepicker('#datepicker-' + this.name, this.options);\n    this.hideFromScreenReaders();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white';\n@import './theme-colored';\n",
                    "styleUrl": "./datepicker.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "description": "<p>Set initial value</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                },
                "readonly": {
                    "name": "readonly",
                    "setSignature": {
                        "name": "readonly",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 110,
                        "description": "<p>Allow set field readonly\nUse as needed to assure a disabled look and feel, but still readable by accessibility&#39;s screen readers.\nDefault:  false</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "readonly",
                        "type": "",
                        "returnType": "",
                        "line": 129
                    }
                }
            },
            "templateData": "<div class=\"datepicker date\" [ngClass]=\"classes\">\n  <input (change)=\"onDateChange(this.picker)\"\n         (focusin)=\"onFocusIn(this.picker)\"\n         (focusout)=\"onFocusOut(this.picker)\"\n         (invalid)=\"invalid\"\n         [attr.aria-describedby]=\"originalMessage\"\n         [attr.aria-invalid]=\"invalid\"\n         [attr.aria-label]=\"label + ' ' + message\"\n         [attr.aria-readonly]=\"readonly\"\n         [disabled]=\"disabled\"\n         [id]=\"id\"\n         [name]=\"name\"\n         [ngClass]=\"{'invalid': invalid}\"\n         [readOnly]=\"readonly\"\n         [required]=\"required\"\n         [value]=\"value\"\n         aria-relevant=\"all\"\n         autocomplete=\"off\"\n         placeholder=\" \"\n         tabindex=\"0\"\n         type=\"text\">\n  <label [id]=\"'pickerLabel-' + name\" [for]=\"'datepicker-' + name\">{{ label }}</label>\n  <label [for]=\"'datepicker-' + name\" class=\"icon\" aria-hidden=\"true\"><i class=\"material-icons\">calendar_today</i></label>\n  <div class=\"infos\">\n    <span [id]=\"'pickerDesc-' + name\"\n          [attr.aria-details]=\"message\"\n          class=\"infos__message\"\n          [attr.data-original]=\"originalMessage\"\n          aria-live=\"polite\">{{ message }}</span>\n  </div>\n</div>\n"
        },
        {
            "name": "FieldComponent",
            "id": "component-FieldComponent-61bde86763a04ba2eab6e0af351a7b0e",
            "file": "projects/ugla/src/lib/components/field/field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-field",
            "styleUrls": [
                "./field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./field.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowDecimal",
                    "description": "<p>Allowing decimal values in number input type:\nIf true: Any number is an acceptable value, as long as it is a valid floating point number;\nIf false: only integer numbers are acceptable;</p>\n<p>Valid only for input type=number\nDefault: true;</p>\n",
                    "line": 188,
                    "type": "boolean"
                },
                {
                    "name": "autoCompleteOptions",
                    "defaultValue": "new Array<CodeName>()",
                    "description": "<p>Set a list of objects CodeName</p>\n",
                    "line": 84,
                    "type": "Array"
                },
                {
                    "name": "autocompleteStartDigits",
                    "defaultValue": "1",
                    "description": "<p>Number of digits for start search on list. Optional.</p>\n<p>Default: 1</p>\n",
                    "line": 142
                },
                {
                    "name": "counter",
                    "defaultValue": "false",
                    "description": "<p>This property show the counter</p>\n<p>Default: false</p>\n",
                    "line": 171
                },
                {
                    "name": "disabled",
                    "description": "<p>Is disabled?</p>\n<p>Default: false</p>\n",
                    "line": 111,
                    "type": "boolean"
                },
                {
                    "name": "invalid",
                    "description": "<p>Is invalid</p>\n<p>Default: false</p>\n",
                    "line": 149,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "description": "<p>Set label</p>\n",
                    "line": 47,
                    "type": "string"
                },
                {
                    "name": "max",
                    "description": "<p>Set max value (for type number or date)</p>\n",
                    "line": 79,
                    "type": "string"
                },
                {
                    "name": "maxLength",
                    "description": "<p>Set limit characters.</p>\n<p>If set, show count</p>\n<p>Default: 1000</p>\n",
                    "line": 69,
                    "type": "number"
                },
                {
                    "name": "message",
                    "description": "<p>Set message</p>\n",
                    "line": 89,
                    "type": "string"
                },
                {
                    "name": "messageRequired",
                    "description": "<p>Message for invalid selection</p>\n<p>Default: Form.REQUIRED</p>\n",
                    "line": 164,
                    "type": "string"
                },
                {
                    "name": "min",
                    "description": "<p>Set min value (for type number or date)</p>\n",
                    "line": 74,
                    "type": "string"
                },
                {
                    "name": "multiple",
                    "description": "<p>Is multiple file</p>\n<p>Use only type file</p>\n<p>Default: false</p>\n",
                    "line": 128,
                    "type": "boolean"
                },
                {
                    "name": "name",
                    "description": "<p>Input name. It&#39;s use on id too</p>\n",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "readonly",
                    "description": "<p>Allow set field readonly\nUse as needed to assure a disabled look and feel, but still readable by accessibility&#39;s screen readers.\nDefault:  false</p>\n",
                    "line": 178,
                    "type": "boolean"
                },
                {
                    "name": "required",
                    "description": "<p>Is required</p>\n<p>Default: false</p>\n",
                    "line": 118,
                    "type": "boolean"
                },
                {
                    "name": "rows",
                    "defaultValue": "5",
                    "description": "<p>This property show the counter</p>\n<p>Default: false</p>\n",
                    "line": 195
                },
                {
                    "name": "type",
                    "description": "<p>Types: text, textarea, number, email, search, password, tel, url, time, datetime-local, month, week, file</p>\n<p>For type date, use another component: <a href=\"/components/DatepickerComponent.html\">DatepickerComponent</a></p>\n<p>Default: text</p>\n",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "value",
                    "description": "<p>Set initial value</p>\n",
                    "line": 52,
                    "type": "string"
                },
                {
                    "name": "zindex",
                    "defaultValue": "3",
                    "description": "<p>Z-index of the field. Optional.</p>\n<p>Default: 3</p>\n",
                    "line": 135
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "description": "<p>Event emitter to value changes</p>\n",
                    "line": 220,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_invalid",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_message",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Intenal property for message</p>\n",
                    "line": 104,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "allAutocompleteOptions",
                    "defaultValue": "new Array<CodeName>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 245
                },
                {
                    "name": "autocompleteRandomID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 248
                },
                {
                    "name": "autocompleteSelectedIndex",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 246
                },
                {
                    "name": "classes",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Classes of the component</p>\n",
                    "line": 229,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "groupClass",
                    "type": "string",
                    "optional": false,
                    "description": "<p>List classes</p>\n",
                    "line": 210,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inputAutocompleteSelected",
                    "type": "CodeName",
                    "optional": false,
                    "description": "",
                    "line": 247
                },
                {
                    "name": "listenClick",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 224
                },
                {
                    "name": "originalMessage",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Original message</p>\n",
                    "line": 215,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "validateEmail",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 222
                }
            ],
            "methodsClass": [
                {
                    "name": "changeHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "description": "<p>Event on change input</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5017,
                                "end": 5022,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 5011,
                                "end": 5016,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                },
                {
                    "name": "focusinHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355
                },
                {
                    "name": "focusoutHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "description": "<p>Event focus out</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5248,
                                "end": 5253,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 5242,
                                "end": 5247,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                },
                {
                    "name": "getRandomID",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 411
                },
                {
                    "name": "inputValidation",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 394,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "keyupHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "description": "<p>Event keyup input</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4471,
                                "end": 4476,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 4465,
                                "end": 4470,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 388,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 368,
                    "description": "<p>Set initials configurations</p>\n"
                },
                {
                    "name": "onArrowDown",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 493,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onArrowUp",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 503,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "labelInput",
                            "type": "HTMLInputElement"
                        },
                        {
                            "name": "search",
                            "type": "HTMLInputElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 445,
                    "jsdoctags": [
                        {
                            "name": "labelInput",
                            "type": "HTMLInputElement",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "search",
                            "type": "HTMLInputElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "CodeName"
                        },
                        {
                            "name": "inputSearch",
                            "type": "HTMLInputElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 453,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "CodeName",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "inputSearch",
                            "type": "HTMLInputElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEnter",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 512,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 463,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "search",
                            "type": "HTMLInputElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 415,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "search",
                            "type": "HTMLInputElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDecimal",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 407,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 436
                },
                {
                    "name": "validateField",
                    "args": [
                        {
                            "name": "currentTarget",
                            "type": "HTMLInputElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "jsdoctags": [
                        {
                            "name": "currentTarget",
                            "type": "HTMLInputElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateFieldComponent",
                    "args": [
                        {
                            "name": "currentTarget",
                            "type": "FieldComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 341,
                    "jsdoctags": [
                        {
                            "name": "currentTarget",
                            "type": "FieldComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateUrl",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 403,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Field</p>\n",
            "rawdescription": "Field",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, OnChanges, SimpleChanges, Renderer2, ElementRef } from '@angular/core';\nimport { Form } from '../../enum';\nimport { CodeName } from '../../models/code-name';\nimport { UglaService } from '../../ugla.service';\n\ndeclare var $: any;\n\n/**\n * Field\n *\n * @example\n * <ugl-field\n *   [type]=\"'text'\"\n *   [name]=\"'text'\"\n *   [label]=\"'E-mail'\"\n *   [message]=\"'Input type email'\"\n *   [maxLength]=\"200\"\n *   [value]=\"value\"\n *   [disabled]=\"true\"\n *   [multiple]=\"true\"\n *   [required]=\"true\"></ugl-field>\n */\n@Component({\n  selector: 'ugl-field',\n  templateUrl: './field.component.html',\n  styleUrls: ['./field.component.scss']\n})\nexport class FieldComponent implements OnInit, OnChanges {\n\n  /**\n   * Types: text, textarea, number, email, search, password, tel, url, time, datetime-local, month, week, file\n   *\n   * For type date, use another component: [DatepickerComponent](/components/DatepickerComponent.html)\n   *\n   * Default: text\n   */\n  @Input() type: string;\n\n  /**\n   * Input name. It's use on id too\n   */\n  @Input() name: string;\n\n  /**\n   * Set label\n   */\n  @Input() label: string;\n\n  /**\n   * Set initial value\n   */\n  @Input() set value(val: string) {\n    this._value = val;\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  private _value: string;\n\n  /**\n   * Set limit characters.\n   *\n   * If set, show count\n   *\n   * Default: 1000\n   */\n  @Input() maxLength: number;\n\n  /**\n   * Set min value (for type number or date)\n   */\n  @Input() min: string;\n\n  /**\n   * Set max value (for type number or date)\n   */\n  @Input() max: string;\n\n  /**\n   * Set a list of objects CodeName\n   */\n  @Input() autoCompleteOptions = new Array<CodeName>();\n\n  /**\n   * Set message\n   */\n  @Input() set message(value: string) {\n    this._message = value;\n    this.originalMessage = value;\n  }\n\n  /**\n   * Get message\n   */\n  get message(): string {\n    return this._message;\n  }\n\n  /**\n   * Intenal property for message\n   */\n  private _message: string;\n\n  /**\n   * Is disabled?\n   *\n   * Default: false\n   */\n  @Input() disabled: boolean;\n\n  /**\n   * Is required\n   *\n   * Default: false\n   */\n  @Input() required: boolean;\n\n  /**\n   * Is multiple file\n   *\n   * Use only type file\n   *\n   * Default: false\n   *\n   */\n  @Input() multiple: boolean;\n\n    /**\n   * Z-index of the field. Optional.\n   *\n   * Default: 3\n   */\n  @Input() zindex = 3;\n\n  /**\n   * Number of digits for start search on list. Optional.\n   *\n   * Default: 1\n   */\n  @Input() autocompleteStartDigits = 1;\n\n  /**\n   * Is invalid\n   *\n   * Default: false\n   */\n  @Input() set invalid(value: boolean) {\n    this._invalid = value;\n  }\n\n  get invalid() {\n    return this._invalid;\n  }\n\n  private _invalid: boolean;\n\n  /**\n   * Message for invalid selection\n   *\n   * Default: Form.REQUIRED\n   */\n  @Input() messageRequired: string;\n\n  /**\n   * This property show the counter\n   *\n   * Default: false\n   */\n  @Input() counter = false;\n\n  /**\n   * Allow set field readonly\n   * Use as needed to assure a disabled look and feel, but still readable by accessibility's screen readers.\n   * Default:  false\n   */\n  @Input() readonly: boolean;\n\n  /**\n   * Allowing decimal values in number input type:\n   * If true: Any number is an acceptable value, as long as it is a valid floating point number;\n   * If false: only integer numbers are acceptable;\n   *\n   * Valid only for input type=number\n   * Default: true;\n   */\n  @Input() allowDecimal: boolean;\n\n  /**\n   * This property show the counter\n   *\n   * Default: false\n   */\n  @Input() rows = 5;\n\n  /**\n   * @ignore\n   */\n  public num: number;\n\n  /**\n   * @ignore\n   */\n  public charCounter: string;\n\n  /**\n   * List classes\n   */\n  public groupClass: string;\n\n  /**\n   * Original message\n   */\n  public originalMessage: string;\n\n  /**\n   * Event emitter to value changes\n   */\n  @Output() onChangeValue = new EventEmitter<string>();\n\n  validateEmail: boolean;\n\n  listenClick: () => void;\n\n  /**\n   * Classes of the component\n   */\n  public classes: string;\n\n  /**\n   * @ignore\n   */\n  private theme: string;\n\n  /**\n   * @ignore\n   */\n  constructor(private ugla: UglaService,\n              protected elementRef: ElementRef,\n              private renderer: Renderer2) {\n    this.theme = ugla.theme;\n  }\n\n  allAutocompleteOptions = new Array<CodeName>();\n  autocompleteSelectedIndex = null;\n  inputAutocompleteSelected: CodeName;\n  autocompleteRandomID: string;\n\n  /**\n   * Event keyup input\n   * @param event is a Event value\n   */\n  keyupHandler(event) {\n    const val = event.currentTarget.value;\n    if (this.type === 'number' && val !== '') {\n      if (this.min && Number(val) < Number(this.min)) {\n        event.currentTarget.value = '';\n      }\n      if (this.max && Number(val) > Number(this.max)) {\n        event.currentTarget.value = '';\n      }\n    }\n    this.num = event.currentTarget.value.length;\n    this.charCounter = `${this.num}/${this.maxLength}`;\n    this.focusoutHandler(event);\n  }\n\n  /**\n   * Event on change input\n   * @param event is a Event value\n   */\n  changeHandler(event) {\n    this.value = event.currentTarget.value;\n    this.focusoutHandler(event);\n    this.onChangeValue.emit(event.currentTarget.value);\n  }\n\n  /**\n   * Event focus out\n   * @param event is a Event value\n   */\n  focusoutHandler(event) {\n    if (event.currentTarget !== undefined) {\n      const val = event.currentTarget.value;\n\n      if (event.currentTarget.hasAttribute('required') && val === '') {\n        event.currentTarget.classList.remove('valid');\n        event.currentTarget.classList.add('invalid');\n        this._invalid = true;\n        this._message = this.messageRequired;\n      } else if (event.currentTarget.hasAttribute('required') && val !== ''\n      && this.invalid && this.type === 'text') {\n        event.currentTarget.classList.remove('invalid');\n        event.currentTarget.classList.add('valid');\n        this._invalid = false;\n        this._message = this.originalMessage;\n      } else if (!event.currentTarget.hasAttribute('required') && val === '') {\n        event.currentTarget.classList.remove('invalid');\n        event.currentTarget.classList.add('valid');\n        this._invalid = false;\n        this._message = this.originalMessage;\n      }\n    } else if (!this.invalid && this.inputAutocompleteSelected) {\n      event.classList.remove('invalid');\n      this._invalid = false;\n    }\n  }\n\n  validateField(currentTarget: HTMLInputElement) {\n    if (currentTarget !== undefined) {\n      if (currentTarget.hasAttribute('required') && currentTarget.value === '') {\n        this._message = this.messageRequired;\n        currentTarget.classList.remove('valid');\n        currentTarget.classList.add('invalid');\n        this._invalid = true;\n      } else {\n        if (this.autoCompleteOptions.length > 0 && this.inputAutocompleteSelected === null) {\n          const hasSelected = this.autoCompleteOptions.filter(f => f.name === currentTarget.value);\n          if (hasSelected.length === 0) {\n            this._invalid = true;\n            currentTarget.classList.add('invalid');\n          } else {\n            this._invalid = false;\n            currentTarget.classList.remove('invalid');\n          }\n        } else if (this._invalid && currentTarget.classList.contains('invalid')) {\n          currentTarget.classList.remove('invalid');\n          this._invalid = false;\n        }\n\n        if (!this._invalid && currentTarget.classList.contains('invalid')) {\n          currentTarget.classList.remove('invalid');\n          this._invalid = false;\n        }\n        this._message = this.originalMessage;\n      }\n    }\n  }\n\n  validateFieldComponent(currentTarget: FieldComponent) {\n    if (currentTarget !== undefined) {\n      if (currentTarget.required && currentTarget.value === '') {\n        this._message = this.messageRequired;\n        this._invalid = true;\n        currentTarget.elementRef.nativeElement.classList.add('invalid');\n      } else {\n        this._invalid = false;\n        this._message = this.originalMessage;\n        currentTarget.elementRef.nativeElement.classList.add('valid');\n      }\n    }\n  }\n\n  focusinHandler() {\n    this.allAutocompleteOptions = this.autoCompleteOptions;\n\n    this.listenClick = this.renderer.listen('window', 'click', (evt) => {\n      if (!this.elementRef.nativeElement.contains(evt.target)) {\n        this.allAutocompleteOptions = new Array<CodeName>();\n      }\n    });\n  }\n\n  /**\n   * Set initials configurations\n   */\n  ngOnInit() {\n    this.type = this.type === undefined ? 'text' : this.type;\n    this.counter = this.counter === undefined ? false : this.counter;\n    this.originalMessage = this.message;\n    this.num = 0;\n    this.charCounter = (this.maxLength !== undefined) ? `${this.num}/${this.maxLength}` : ' ';\n    this.multiple = this.multiple === undefined ? false : this.multiple;\n    this.disabled = (this.disabled !== undefined) ? this.disabled : false;\n    this.readonly = (this.readonly !== undefined) ? this.readonly : false;\n    this.value = (this.value !== undefined) ? this.value : '';\n    this.invalid = (this.invalid !== undefined) ? this.invalid : false;\n    this.messageRequired = (this.messageRequired !== undefined) ? this.messageRequired : Form.REQUIRED;\n    this.min = (this.min !== undefined) ? this.min : '';\n    this.max = (this.max !== undefined) ? this.max : '';\n    this.maxLength = (this.maxLength !== undefined) ? this.maxLength : 1000;\n    this.allowDecimal = (this.allowDecimal !== undefined) ? this.allowDecimal : true;\n    this.classes = `${this.theme}`;\n    this.autocompleteRandomID = this.getRandomID();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.invalid) {\n      this.invalid = changes.invalid.currentValue;\n    }\n  }\n\n  inputValidation(event: any) {\n    if (this.type === 'number' && !this.allowDecimal) {\n      this.removeDecimal(event);\n    }\n    if (this.type === 'url') {\n      this._invalid = !this.validateUrl(event.target.value);\n    }\n  }\n\n  validateUrl(value) {\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(value);\n  }\n\n  private removeDecimal(event: any) {\n    event.target.value = parseInt(event.target.value, 10) || '';\n  }\n\n  getRandomID(): string {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  onValueChange(event, search: HTMLInputElement) {\n    if (event.keyCode !== 40 && event.keyCode !== 38) {\n      if (search.value.length === 0) {\n        this.allAutocompleteOptions = new Array<CodeName>();\n        this.onChangeValue.emit(null);\n        this.inputAutocompleteSelected = null;\n        this.value = null;\n      }\n      if (search.value.length >= this.autocompleteStartDigits) {\n         this.allAutocompleteOptions = this.autoCompleteOptions.filter(e =>\n           e.name.toUpperCase().includes(search.value.toUpperCase()) ||\n           (e.name !== null && e.name.toUpperCase().includes(search.value.toUpperCase())));\n         if (this.allAutocompleteOptions.length === 0) {\n            this.onChangeValue.emit(null);\n            this.inputAutocompleteSelected = null;\n          }\n       }\n       this.validateField(search);\n    }\n  }\n\n  reset() {\n    this.allAutocompleteOptions = new Array<CodeName>();\n    this.value = null;\n    this.inputAutocompleteSelected = null;\n    const items = document.querySelectorAll('[id*=\"-' + this.name + '\"]');\n    items.forEach(i => i.className = '');\n    this._message = this.originalMessage;\n  }\n\n  onBlur(labelInput: HTMLInputElement, search: HTMLInputElement) {\n    if (!this.inputAutocompleteSelected && this.allAutocompleteOptions.length === 0) {\n      this.reset();\n      labelInput.className = '';\n      search.value = '';\n    }\n  }\n\n  onClick(option: CodeName, inputSearch: HTMLInputElement) {\n    this.allAutocompleteOptions = new Array<CodeName>();\n    inputSearch.value = option.name;\n    this.value = option.name;\n    this.inputAutocompleteSelected = option;\n    this._message = this.originalMessage;\n    this.onChangeValue.emit(option.name);\n    this.validateField(inputSearch);\n  }\n\n  onScroll(event) {\n    const items = document.getElementsByClassName('valign-wrapper');\n    if (items.length > 0) {\n      const hover = document.getElementsByClassName('valign-wrapper-hover').item(0);\n      const container = document.getElementsByClassName('autocomplete-container').item(0);\n      if (event.keyCode === 40) {\n          for (let i = 0; i < items.length; i++) {\n            if (items[i].classList.contains('selected') && items[i].nextElementSibling != null) {\n              items[i].classList.remove('valign-wrapper-hover');\n              items[i + 1].classList.add('valign-wrapper-hover');\n            }\n          }\n          if (hover && hover.getClientRects().item(0).top / 234 > 2) {\n            container.scrollTo({top: container.scrollTop + 85});\n          }\n      } else if (event.keyCode === 38) {\n        for (let i = 0; i < items.length; i++) {\n          if (items[i].classList.contains('selected') && items[i].previousElementSibling != null) {\n            items[i].classList.remove('valign-wrapper-hover');\n            items[i - 1].classList.add('valign-wrapper-hover');\n          }\n        }\n        if (hover && hover.getClientRects().item(0).top - container.getClientRects().item(0).height < 0) {\n          container.scrollTo({top: container.scrollTop - 100});\n        }\n      }\n    }\n  }\n\n\n  onArrowDown(event) {\n    if (this.autocompleteSelectedIndex === null) {\n      this.autocompleteSelectedIndex = 0;\n    } else {\n      this.autocompleteSelectedIndex = this.autocompleteSelectedIndex >= (this.allAutocompleteOptions.length - 1) ?\n      this.allAutocompleteOptions.length - 1 : this.autocompleteSelectedIndex + 1;\n    }\n    this.onScroll(event);\n  }\n\n  onArrowUp(event) {\n    if (this.autocompleteSelectedIndex === null || this.autocompleteSelectedIndex === 0) {\n      this.autocompleteSelectedIndex = 0;\n    } else {\n        this.autocompleteSelectedIndex = this.autocompleteSelectedIndex - 1;\n    }\n    this.onScroll(event);\n  }\n\n  onEnter(event) {\n    if (this.allAutocompleteOptions.length > 0) {\n      this.value = this.allAutocompleteOptions[this.autocompleteSelectedIndex].name;\n      this.onChangeValue.emit(this.value);\n      this.inputAutocompleteSelected = this.allAutocompleteOptions[this.autocompleteSelectedIndex];\n      this.autocompleteSelectedIndex = null;\n      this.allAutocompleteOptions = new Array<CodeName>();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n$label-animate-time: 0.2s;\n\n.field {\n  @each $theme in $themes {\n    &.theme-colored-#{$theme} {\n      position: relative;\n      margin: 0 0 12px;\n      color: color(_others, dark);\n      z-index: 0;\n\n      label {\n        position: absolute;\n        top: 0;\n        left: 0;\n        font-size: 1.4rem;\n        transition: $label-animate-time all;\n      }\n\n      .icon {\n        position: absolute;\n        display: flex;\n        width: 3.5rem;\n        height: calc(100% - 1rem);\n        top: 0;\n        right: 0;\n        left: auto;\n        font-size: 1rem;\n        color: color(_others, light);\n        border: 0;\n        border-radius: 0 5px 5px 0;\n        background-color: color(_#{$theme}, medium);\n        cursor: pointer;\n        justify-content: center;\n        align-items: center;\n\n        &:hover {\n          background-color: color(_#{$theme}, dark);\n        }\n\n        i {\n          font-size: 1.5rem;\n        }\n      }\n\n      .infos {\n        display: flex;\n        height: 1rem;\n        font-size: .75rem;\n        color: color(_gray, medium);\n\n        @include mobile {\n          font-size: .857rem;\n        }\n\n        &__message {\n          width: 90%;\n        }\n\n        &__count {\n          float: right;\n          width: 10%;\n          text-align: right;\n        }\n      }\n\n      input {\n        box-shadow: 0 0 transparent;\n      }\n\n      [type='search'],\n      [type='time'],\n      [type='datetime-local'],\n      [type='month'],\n      [type='week'] {\n        @include cross-browser(appearance, textfield);\n      }\n\n      [type='text'],\n      [type='number'],\n      [type='email'],\n      [type='date'],\n      [type='search'],\n      [type='password'],\n      [type='tel'],\n      [type='url'],\n      [type='time'],\n      [type='datetime-local'],\n      [type='month'],\n      [type='week'],\n      [type='file'],\n      textarea {\n        width: 100%;\n        padding: 1rem;\n        font-size: 1rem;\n        color: color(_gray, medium);\n        border: 1px solid color(_gray, medium);\n        border-radius: .5rem;\n        background: color(_others, light);\n\n        @supports (-webkit-overflow-scrolling: touch) {\n          height: 51px !important;\n        }\n\n\n        &[type='search'] {\n          @include safariOnly {\n            -webkit-appearance: none;\n            padding-bottom: calc(1rem - 2px);\n          }\n        }\n\n        &[disabled],\n        &[readonly] {\n          color: color(_gray, dark-alpha);\n          border: 1px solid color(_gray, extra-light);\n          background: transparent;\n        }\n\n        &[type='search'] {\n          width: 100%;\n        }\n\n        + label {\n          position: absolute;\n          font-size: 1rem;\n          top: 1rem;\n          left: 1rem;\n        }\n\n        &[disabled],\n        &[readonly] {\n          + label {\n            color: color(_gray, dark-alpha);\n          }\n\n          ~ .icon {\n            background-color: color(_gray, extra-light);\n            cursor: default;\n\n            &:hover {\n              background-color: color(_gray, extra-light);\n            }\n          }\n        }\n\n        &:required {\n          + label::after {\n            content: ' *';\n          }\n        }\n\n        &.invalid {\n          border: 1px solid color(_red, medium);\n\n          + label,\n          ~ .infos {\n            color: color(_red, medium);\n          }\n        }\n\n        &.valid {\n          border: 1px solid color(_#{$theme}, medium);\n\n          + label,\n          ~ .infos {\n            color: color(_#{$theme}, medium);\n          }\n        }\n\n        &:focus:not([readonly]) {\n          border: 1px solid color(_#{$theme}, light);\n        }\n\n        &:focus,\n        &:not(:placeholder-shown) {\n          + label {\n            display: table;\n            @include cross-browser(width, fit-content, true);\n            font-size: 0.8rem;\n            top: -.5rem;\n            padding: 0 0.2rem;\n            transition: $label-animate-time all;\n            z-index: 1;\n            background-color: color(_others, light);\n          }\n        }\n      }\n\n      textarea {\n        width: calc(100% - 1.5rem);\n      }\n\n      &.two-fields {\n        .content {\n          position: relative;\n          display: inline-block;\n          width: 50%;\n\n          input {\n            width: 100%;\n            border-radius: 0 .5rem .5rem 0;\n          }\n\n          &:first-child {\n            margin-right: -4px;\n\n            input {\n              border-radius: .5rem 0 0 .5rem;\n            }\n          }\n        }\n\n        label {\n          position: absolute;\n          font-size: 0.8rem;\n          top: -.5rem;\n          left: 0.8rem;\n          padding: 0 0.2rem;\n          background-color: color(_others, light);\n          transition: $label-animate-time all;\n        }\n      }\n\n      &.file {\n        [type='file'] {\n          display: none;\n\n          ~ .content {\n            display: flex;\n            justify-content: flex-end;\n\n            label {\n              min-width: 55px;\n              padding: 1rem;\n              font-size: 1rem;\n              color: color(_others, light);\n              border: 1px solid color(_#{$theme}, medium);\n              background-color: color(_#{$theme}, medium);\n              border-radius: .5rem 0 0 .5rem;\n              cursor: pointer;\n\n              &:focus {\n                border: 1px solid color(_#{$theme}, dark);\n                background-color: color(_#{$theme}, dark);\n              }\n            }\n\n            input {\n              width: 85%;\n              border: 1px solid color(_#{$theme}, medium);\n              border-radius: 0 .5rem .5rem 0;\n              box-shadow: 0 0 transparent;\n            }\n          }\n        }\n      }\n\n      &.combo {\n        position: relative;\n        z-index: map-get($z-index, combo);\n\n        i {\n          position: absolute;\n          top: 1rem;\n          right: .5rem;\n          z-index: 1;\n        }\n\n        [type='checkbox'] {\n          display: none;\n\n          + label {\n            display: flex;\n            position: relative;\n            width: 100%;\n            height: 3.5rem;\n            padding: 1rem;\n            justify-content: space-between;\n            align-content: center;\n            font-size: 1rem;\n            font-weight: 500;\n            line-height: 1.4;\n            color: color(_gray, medium);\n            border: 1px solid color(_gray, medium);\n            border-radius: .5rem;\n            cursor: pointer;\n            z-index: 2;\n\n            &::before {\n              content: attr(data-label);\n              position: absolute;\n              font-size: 0.8rem;\n              top: -.5rem;\n              line-height: 1;\n              padding: 0 0.2rem;\n              background-color: color(_others, light);\n              transition: $label-animate-time all;\n            }\n\n            &:focus {\n              border: 1px solid color(_#{$theme}, medium);\n            }\n          }\n\n          ~ .combo-list {\n            display: none;\n          }\n\n          &:checked {\n            ~ .combo-list {\n              display: block;\n              position: absolute;\n              width: 100%;\n              top: 3.5rem;\n              padding: .5rem 0 0;\n              margin: -.5rem 0 0;\n              list-style: none;\n              border-left: 1px solid color(_gray, light);\n              border-right: 1px solid color(_gray, light);\n              border-bottom: 1px solid color(_gray, light);\n              border-radius: 0 0 .5rem .5rem;\n              background-color: color(_others, light);\n              box-shadow: 2px 2px 4px rgba(color(_others, shadow), .8);\n              z-index: map-get($z-index, combo);\n\n              li {\n                display: block;\n                min-height: 3rem;\n                border-bottom: 1px solid color(_gray, light);\n\n                &:hover {\n                  background-color: rgba(color(_gray, extra-light), .2);\n                  transition: $label-animate-time all;\n                }\n\n                &:first-child {\n                  border-radius: .5rem .5rem 0 0;\n                }\n\n                &:last-child {\n                  border-bottom: 0;\n                  border-radius: 0 0 .5rem .5rem;\n                }\n\n                [type='radio'] {\n                  display: none;\n\n                  + label {\n                    position: relative;\n                    display: block;\n                    width: calc(100% - 2rem);\n                    font-size: 1rem;\n                    padding: 1rem;\n                    color: color(_gray, medium);\n                    cursor: pointer;\n\n                    &:hover {\n                      color: color(_#{$theme}, medium);\n                    }\n                  }\n\n                  &:checked {\n                    + label {\n                      color: color(_#{$theme}, medium);\n                    }\n                  }\n\n                  &[value='-1'] {\n                    + label {\n                      color: color(_gray, light);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      &.checkbox,\n      &.radio {\n        padding: .5rem 0;\n\n        [type='checkbox'],\n        [type='radio'] {\n          display: none;\n\n          + label {\n            position: relative;\n            display: flex;\n            align-content: center;\n            font-size: 1rem;\n            line-height: 1.4;\n            color: color(_gray, medium);\n\n            &:focus {\n              color: color(_#{$theme}, medium);\n            }\n\n            &::before {\n              @extend %material-icons;\n\n              display: block;\n              padding-right: .5rem;\n              width: 2rem;\n              height: 1.5rem;\n              font-size: 1.5rem;\n              color: color(_gray, medium);\n            }\n          }\n\n          &:checked {\n            + label {\n              position: relative;\n              display: flex;\n              align-content: flex-start;\n\n              &::before {\n                display: block;\n              }\n            }\n          }\n        }\n\n        [type='radio'] {\n          + label {\n            &::before {\n              content: 'radio_button_unchecked';\n            }\n          }\n\n          &:checked {\n            + label {\n              &::before {\n                content: 'radio_button_checked';\n              }\n            }\n          }\n        }\n\n        [type='checkbox'] {\n          + label {\n            &::before {\n              content: 'check_box_outline_blank';\n            }\n          }\n\n          &:checked {\n            + label {\n              &::before {\n                content: 'check_box';\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  .position-relative {\n    position: relative;\n\n    .autocomplete-container {\n      max-height: calc(100vh - 425px);\n      overflow-x: hidden;\n      overflow-y: auto;\n      border-right: 1px solid color(_gray, light);\n      border-left: 1px solid color(_gray, light);\n      border-radius: 0 0 .5rem .5rem;\n      background-color: color(_others, light);\n      z-index: 999;\n      display: block;\n      position: absolute;\n      width: 100%;\n      top: 54px;\n\n      .autocomplete-card {\n        min-height: 3rem;\n        padding: 10px 0 0 10px;\n        font-size: 1.2rem;\n        border-bottom: 1px solid color(_gray, light);\n        border-radius: .5rem .5rem 0 0;\n        cursor: pointer;\n\n        &:first-child {\n          border-radius: .5rem .5rem 0 0;\n        }\n\n        &:last-child {\n          border-bottom: 1px solid color(_gray, light);\n          border-radius: 0 0 .5rem .5rem;\n        }\n\n        &:hover {\n          background-color: color(_others, body);\n        }\n      }\n    }\n  }\n\n  .selected {\n    background-color: color(_others, body);\n  }\n\n}\n",
                    "styleUrl": "./field.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 306,
                    "end": 316,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 306,
                        "end": 307,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 307,
                        "end": 314,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-field\n[type]=\"'text'\"\n[name]=\"'text'\"\n[label]=\"'E-mail'\"\n[message]=\"'Input type email'\"\n[maxLength]=\"200\"\n[value]=\"value\"\n[disabled]=\"true\"\n[multiple]=\"true\"\n[required]=\"true\"></ugl-field>"
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 52,
                        "description": "<p>Set initial value</p>\n",
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                },
                "message": {
                    "name": "message",
                    "setSignature": {
                        "name": "message",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 89,
                        "description": "<p>Set message</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "message",
                        "type": "string",
                        "returnType": "string",
                        "line": 97,
                        "description": "<p>Get message</p>\n"
                    }
                },
                "invalid": {
                    "name": "invalid",
                    "setSignature": {
                        "name": "invalid",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 149,
                        "description": "<p>Is invalid</p>\n<p>Default: false</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "invalid",
                        "type": "",
                        "returnType": "",
                        "line": 153
                    }
                }
            },
            "templateData": "<div [ngClass]=\"classes\" class=\"field\" *ngIf=\"type !== 'file' && type !== 'textarea' && type !== 'autocomplete'\">\n  <input\n    [type]=\"type\"\n    [name]=\"name\"\n    [id]=\"'field-' + name\"\n    [value]=\"value\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [maxLength]=\"maxLength\"\n    [required]=\"required\"\n    placeholder=\" \"\n    (change)=\"changeHandler($event)\"\n    (focusout)=\"focusoutHandler($event)\"\n    (input)=\"inputValidation($event)\"\n    (invalid)=\"invalid\"\n    (keyup)=\"keyupHandler($event)\"\n    [disabled]=\"disabled\"\n    [readOnly]=\"readonly\"\n    [ngClass]=\"{'invalid': invalid, 'valid': !invalid}\">\n  <label [for]=\"'field-' + name\">{{ label }}</label>\n  <label [for]=\"'field-' + name\" class=\"icon\" *ngIf=\"type === 'time'\"><i\n    class=\"material-icons\">query_builder</i></label>\n  <div class=\"infos\">\n    <span class=\"infos__message\" [id]=\"name + '-infos-message'\">{{ message }}</span>\n    <span class=\"infos__count\" [id]=\"name + '-infos-count'\" *ngIf=\"type !== 'time' && counter\">{{ charCounter }}</span>\n  </div>\n</div>\n\n<div [ngClass]=\"classes\" class=\"field file\" *ngIf=\"type === 'file'\">\n  <input\n    type=\"file\"\n    [name]=\"name\"\n    [id]=\"'field-' + name\"\n    [multiple]=\"multiple\"\n    placeholder=\" \">\n  <div class=\"content\">\n    <label [for]=\"'field-' + name\">{{ label }}</label>\n    <input type=\"text\" [name]=\"name + '-path'\" id=\"name + '-path'\" disabled placeholder=\"Select only files\">\n  </div>\n  <div class=\"infos\">\n    <span class=\"infos__message\">PNG, JPG, PDF or TXT</span>\n  </div>\n</div>\n\n<div [ngClass]=\"classes\" class=\"field\" *ngIf=\"type === 'textarea'\">\n  <textarea\n    [name]=\"name\"\n    [id]=\"name\"\n    [rows]=\"rows\"\n    [required]=\"required\"\n    [maxLength]=\"maxLength\"\n    (keyup)=\"keyupHandler($event)\"\n    (focusout)=\"focusoutHandler($event)\"\n    [value]=\"value\"\n    placeholder=\" \"></textarea>\n  <label [for]=\"name\">{{ label }}</label>\n  <div class=\"infos\">\n    <span class=\"infos__message\" [id]=\"name + '-infos-message'\">{{ message }}</span>\n    <span class=\"infos__count\" [id]=\"name + '-infos-count'\">{{ charCounter }}</span>\n  </div>\n</div>\n\n<div [ngClass]=\"classes\" [ngStyle]=\"{'z-index': zindex }\" class=\"field\" *ngIf=\"type === 'autocomplete'\">\n  <div class=\"position-relative\">\n    <input [id]=\"autocompleteRandomID + '-' + name\"\n        type=\"text\" value=\"{{this.value}}\"\n        (keyup)=\"onValueChange($event, inputSearch)\"\n        (keyup.ArrowDown)=\"onArrowDown($event)\"\n        (keyup.ArrowUp)=\"onArrowUp($event)\"\n        (keyup.enter)=\"onEnter($event)\"\n        [required]=\"required\"\n        (focusout)=\"validateField($event.currentTarget)\"\n        (focusin)=\"focusinHandler()\"\n        [disabled]=\"disabled\"\n        [ngClass]=\"{ 'disabled' : disabled }\"\n        #inputSearch>\n    <label [for]=\"'field-' + name\" #labelInput>{{ label }}</label>\n    <div class=\"infos\">\n      <span class=\"infos__message\" [id]=\"name + '-infos-message'\">{{ message }}</span>\n    </div>\n    <div *ngIf=\"allAutocompleteOptions.length > 0\" class=\"autocomplete-container z-depth-1\">\n      <div class=\"autocomplete-card valign-wrapper\"\n          *ngFor=\"let option of allAutocompleteOptions; let index = index\"\n          [ngClass]=\"{'selected': index === autocompleteSelectedIndex}\"\n          (click)=\"onClick(option, inputSearch)\">\n          <span>{{ option.name }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FileUploadComponent",
            "id": "component-FileUploadComponent-6d41ca1afd2ce373d006db475b42b442",
            "file": "projects/ugla/src/lib/components/file-upload/file-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "files",
                    "description": "<p>Set initial files</p>\n",
                    "line": 45,
                    "type": "any"
                },
                {
                    "name": "id",
                    "description": "<p>Text to attribute id</p>\n",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "infoMessage",
                    "description": "<p>Set message</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "label",
                    "description": "<p>Component embedded label</p>\n",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "messages",
                    "description": "<p>Object with error messages</p>\n",
                    "line": 35,
                    "type": "literal type"
                },
                {
                    "name": "photosPerColumn",
                    "defaultValue": "2",
                    "line": 47
                },
                {
                    "name": "pondOptions",
                    "description": "<p>Object pontOptions</p>\n",
                    "line": 18,
                    "type": "literal type"
                },
                {
                    "name": "required",
                    "description": "<p>Is required</p>\n<p>Default: false</p>\n",
                    "line": 30,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "onAddFile",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Emitter on handleAddFile function.</p>\n",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRemoveFile",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Emmiter on handleRemoveFile.</p>\n",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onUpdateFile",
                    "defaultValue": "new EventEmitter<Object[]>()",
                    "description": "<p>Emmiter on handleUpdateFile.\nA file has been added or removed.</p>\n",
                    "line": 70,
                    "type": "EventEmitter"
                },
                {
                    "name": "onUploadPath",
                    "defaultValue": "new EventEmitter<string>()",
                    "description": "<p>Emitter uploadPath function</p>\n",
                    "line": 52,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "element",
                    "type": "Element",
                    "optional": false,
                    "description": "<p>Parent element</p>\n",
                    "line": 80,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "instance",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Instance of file pond</p>\n",
                    "line": 86,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'myPond'"
                        }
                    ]
                },
                {
                    "name": "isFileValid",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Indicates if file is valid.</p>\n",
                    "line": 75,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valid",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addPreview",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "description": "<p>Add a preview, case it doesn&#39;t have.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2906,
                                "end": 2911,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 2900,
                                "end": 2905,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                },
                {
                    "name": "browse",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "description": "<p>Function to browse files on enter key press</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4490,
                                "end": 4495,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 4484,
                                "end": 4489,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "description": "<p>Error on adding file. Handle error messages.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3491,
                                "end": 3496,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 3485,
                                "end": 3490,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "description": "<p>Set configurations after view is initialized</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "description": "<p>Set initial configurations</p>\n"
                },
                {
                    "name": "pondHandleAddFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "description": "<p>Function called on onaddfile event of file pond</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1791,
                                "end": 1796,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 1785,
                                "end": 1790,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                },
                {
                    "name": "pondHandleInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "description": "<p>Function called on oninit event of file pond</p>\n"
                },
                {
                    "name": "pondHandleProcessFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "description": "<p>Function called on onprocessfile event of file pond</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2227,
                                "end": 2232,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 2221,
                                "end": 2226,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                },
                {
                    "name": "pondHandleRemoveFile",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "description": "<p>A file has been removed, emit remove event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3947,
                                "end": 3952,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 3941,
                                "end": 3946,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                },
                {
                    "name": "pondHandleUpdateFiles",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "description": "<p>A file has been added or removed, receives a list of file items</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4285,
                                "end": 4290,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 4279,
                                "end": 4284,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a Event value</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewChild, AfterViewInit } from '@angular/core';\n\n@Component({\n  selector: 'ugl-file-upload',\n  templateUrl: './file-upload.component.html',\n  styleUrls: ['./file-upload.component.scss']\n})\nexport class FileUploadComponent implements OnInit, AfterViewInit {\n\n  /**\n   * Component embedded label\n   */\n  @Input() label?: string;\n\n  /**\n   * Object pontOptions\n   */\n  @Input() pondOptions: {multiple: false};\n\n  /**\n   * Text to attribute id\n   */\n  @Input() id: string;\n\n  /**\n   * Is required\n   *\n   * Default: false\n   */\n  @Input() required: boolean;\n\n  /**\n   * Object with error messages\n   */\n  @Input() messages: {};\n\n  /**\n   * Set message\n   */\n  @Input() infoMessage: string;\n\n  /**\n   * Set initial files\n   */\n  @Input() files: any;\n\n  @Input() photosPerColumn = 2;\n\n  /**\n   *  Emitter uploadPath function\n   */\n  @Output() onUploadPath = new EventEmitter<string>();\n\n  /**\n   *  Emitter on handleAddFile function.\n   */\n  @Output() onAddFile = new EventEmitter<boolean>();\n\n  /**\n   * Emmiter on handleRemoveFile.\n   * @return true when a file was removed\n   */\n  @Output() onRemoveFile = new EventEmitter<boolean>();\n\n  /**\n   * Emmiter on handleUpdateFile.\n   * A file has been added or removed.\n   * @return a list of file items\n   */\n  @Output() onUpdateFile = new EventEmitter<Object[]>();\n\n  /**\n   * Indicates if file is valid.\n   */\n  public isFileValid: boolean;\n\n  /**\n   * Parent element\n   */\n  private element: Element;\n\n  public valid = true;\n  /**\n   * Instance of file pond\n   */\n  @ViewChild('myPond') instance !: any;\n\n  constructor() {\n  }\n\n  /**\n   * Function called on oninit event of file pond\n   */\n  pondHandleInit() {\n  }\n\n  /**\n   * Function called on onaddfile event of file pond\n   * @param event is a Event value\n   */\n  pondHandleAddFile(event: any) {\n    console.log('A file was added', event);\n    if (event) {\n      if (event.error || event.status) {\n        this.isFileValid = false;\n      } else {\n        this.isFileValid = true;\n      }\n\n      this.onAddFile.emit(true);\n      this.addPreview(event);\n      this.handleError(event);\n    }\n  }\n\n  /**\n   * Function called on onprocessfile event of file pond\n   * @param event is a Event value\n   */\n  pondHandleProcessFile(event: any) {\n    console.log('A file was processed', event);\n    if (this.instance.getFile()) {\n      this.onUploadPath.emit(this.instance.getFile().serverId);\n    }\n  }\n\n  /**\n   * Set initial configurations\n   */\n  ngOnInit() {\n    console.log('FilePond has initialised');\n    this.label = (this.label === undefined) ? '' : this.label;\n    this.required = (this.required === undefined) ? false : this.required;\n  }\n\n  /**\n   * Set configurations after view is initialized\n   */\n  ngAfterViewInit() {\n    this.element = document.querySelector(`#${this.id}`);\n  }\n\n  /**\n   * Add a preview, case it doesn't have.\n   * @param event is a Event value\n   */\n  addPreview(event: any) {\n    if (!event.error && !event.status) {\n      this.element = document.querySelector(`#${this.id}`);\n      const file = this.element.querySelector('.filepond--file');\n      const preview = this.element.querySelector('.filepond--image-preview-wrapper') || null;\n      if (!preview && event.file.fileExtension === 'pdf') {\n        file.insertAdjacentHTML('beforeend', '<div class=\"preview\"><i class=\"material-icons\">picture_as_pdf</i></div>');\n      }\n    }\n  }\n\n  /**\n   * Error on adding file. Handle error messages.\n   * @param event is a Event value\n   */\n  handleError(event: any) {\n    this.element = document.querySelector(`#${this.id}`);\n    const fileWrapper = this.element.querySelector('.filepond--wrapper');\n    if (event.error || event.status) {\n      fileWrapper.classList.add('error');\n      this.valid = false;\n    } else {\n      fileWrapper.classList.remove('error');\n      this.valid = true;\n    }\n  }\n\n  /**\n   * A file has been removed, emit remove event\n   * @param event is a Event value\n   */\n  pondHandleRemoveFile(event: any) {\n    if (event) {\n      this.onRemoveFile.emit(true);\n      const fileWrapper = this.element.querySelector('.filepond--wrapper');\n      fileWrapper.classList.remove('error');\n    }\n  }\n\n  /**\n   * A file has been added or removed, receives a list of file items\n   * @param event is a Event value\n   */\n  pondHandleUpdateFiles(event: any) {\n    if (event) {\n      this.onUpdateFile.emit(event.items);\n    }\n  }\n\n  /**\n   * Function to browse files on enter key press\n   * @param event is a Event value\n   */\n  browse(event: any) {\n    if (event.keyCode === 13) {\n      (this.element as HTMLDivElement).querySelector<HTMLInputElement>('.filepond--browser').focus();\n      this.instance.browse();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n.file-upload {\n  color: color(_others, dark);\n\n  label {\n    font-size: 0.8rem;\n\n    &.required::after {\n      content: ' *';\n    }\n  }\n}\n\n.infos {\n  display: flex;\n  height: 1rem;\n  font-size: .75rem;\n  color: color(_gray, light);\n\n  @include mobile {\n    font-size: .857rem;\n  }\n\n  &__message {\n    width: 90%;\n  }\n}\n\n@import 'filepond';\n",
                    "styleUrl": "./file-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 86
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"file-upload\" [id]=\"id\" tabindex=\"0\" (keypress)=\"browse($event)\" [ngClass]=\"{'multiple' : pondOptions?.multiple}\">\n  <label [for]=\"id\" [ngClass]=\"{'required': required}\">{{ label }}</label>\n  <file-pond #myPond\n    [class]=\"'photos-' + photosPerColumn\"\n    [ngClass]=\"{'multiple' : pondOptions?.multiple}\"\n    [options]=\"pondOptions\"\n    (oninit)=\"pondHandleInit()\"\n    [files]=\"files\"\n    (onprocessfile)=\"pondHandleProcessFile($event)\"\n    (onaddfile)=\"pondHandleAddFile($event)\"\n    (onremovefile)=\"pondHandleRemoveFile($event)\"\n    (onupdatefiles)=\"pondHandleUpdateFiles($event)\">\n  </file-pond>\n  <div class=\"infos\">\n    <span *ngIf=\"valid\" [id]=\"id + 'info'\" [attr.aria-details]=\"infoMessage\" class=\"infos__message\"\n          aria-live=\"polite\">{{ infoMessage }}</span>\n  </div>\n</div>\n"
        },
        {
            "name": "FilterComponent",
            "id": "component-FilterComponent-b03eb804f40cc0bfc668ef8f0e965b55",
            "file": "projects/ugla/src/lib/components/filter/filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-filter",
            "styleUrls": [
                "./filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "description": "<p>Input() Property to identify the id for automation.</p>\n",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "description": "<p>Input() Property to check the filter is open\nDefault: false</p>\n",
                    "line": 29
                },
                {
                    "name": "title",
                    "description": "<p>Input() property to receive a title</p>\n",
                    "line": 23,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "filterEmitter",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Output() Property to emit if the filter is open or not.</p>\n",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "classes",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Property to receive the css classes</p>\n",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Property to set the color</p>\n",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lockFilter",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Property to lock the filter.</p>\n",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeClass",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "description": "<p>change css class if the filter is open or closed</p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "toggleFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "description": "<p>Function to identify whether\nthe filter has been opened or closed.</p>\n"
                },
                {
                    "name": "toggleLockFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "description": "<p>Function to lock the filter on the screen</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [],
                    "line": 108
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input, OnChanges, HostListener, ChangeDetectorRef, SimpleChanges } from '@angular/core';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * @example\n * <ugl-filter\n *  [id]=\"'id'\"\n *  [isOpen]=\"boolean\"\n *  [title]=\"'Title'\"\n *  (filterEmitter)=\"openFilter()\" >\n *  </ugl-filter>\n */\n@Component({\n  selector: 'ugl-filter',\n  templateUrl: './filter.component.html',\n  styleUrls: ['./filter.component.scss']\n})\nexport class FilterComponent implements OnInit, OnChanges {\n\n  /**\n   * Input() property to receive a title\n   */\n  @Input() title: string;\n\n  /**\n   * Input() Property to check the filter is open\n   * Default: false\n   */\n  @Input() isOpen = false;\n\n  /**\n   * Property to lock the filter.\n   */\n  public lockFilter = false;\n\n  /**\n   * Input() Property to identify the id for automation.\n   */\n  @Input() id: string;\n\n  /**\n   * Output() Property to emit if the filter is open or not.\n   */\n  @Output() filterEmitter = new EventEmitter<boolean>();\n\n  /**\n   * Property to receive the css classes\n   */\n  public classes: string;\n\n  /**\n   * Property to set the color\n   */\n  public color: string;\n\n  /**\n   * Param to receive the theme name\n   * @param ugla: UglaService\n   */\n  constructor(private ugla: UglaService,\n              private changeDetector: ChangeDetectorRef) {\n    this.classes = ugla.theme;\n  }\n\n  ngOnInit() {\n    this.changeClass();\n    this.onWindowSizeChange();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.isOpen) {\n      this.lockFilter = false;\n    }\n    this.changeClass();\n    this.onWindowSizeChange();\n    this.changeDetector.detectChanges();\n  }\n\n  /**\n   * Function to identify whether\n   * the filter has been opened or closed.\n   */\n  toggleFilter() {\n    this.toggleLockFilter();\n    this.filterEmitter.emit();\n  }\n\n  /**\n   * Function to lock the filter on the screen\n   */\n  toggleLockFilter() {\n    if (document.getElementsByClassName('has-filter').length === 0) {\n      const elements = Array.from(document.getElementsByClassName('need-filter'));\n      for (const element of elements) {\n        element.classList.add('has-filter');\n      }\n      this.lockFilter = true;\n    } else {\n      const elements = Array.from(document.getElementsByClassName('has-filter'));\n      for (const element of elements) {\n        element.classList.remove('has-filter');\n      }\n      this.lockFilter = false;\n    }\n  }\n\n  @HostListener('window:resize', [])\n  onWindowSizeChange() {\n    if (window.innerWidth < 980) {\n      this.color = this.ugla.color;\n    } else {\n      this.color = 'white';\n    }\n  }\n\n  /**\n   * change css class if the filter is open or closed\n   */\n  private changeClass() {\n    if (this.isOpen) {\n      this.classes = `${this.ugla.theme} opened`;\n    } else {\n        this.classes = `${this.ugla.theme}`;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white';\n@import './theme-colored';\n",
                    "styleUrl": "./filter.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 197,
                    "end": 207,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 197,
                        "end": 198,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 198,
                        "end": 205,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-filter\n[id]=\"'id'\"\n[isOpen]=\"boolean\"\n[title]=\"'Title'\"\n(filterEmitter)=\"openFilter()\" >\n</ugl-filter>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Param to receive the theme name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    },
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1220,
                            "end": 1224,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 1214,
                            "end": 1219,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    },
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class='filter'\n    [ngClass]=\"classes\"\n    [id]=\"'filter-'+ id\">\n\n  <div class='filter-header'>\n    <h2>{{ title }}</h2>\n\n    <ugl-button\n      [title]=\"'Lock filter'\"\n      [color]=\"color\"\n      [style]=\"'icon'\"\n      class=\"desktop-only\"\n      (click)=\"toggleLockFilter()\">\n      <i class=\"material-icons\" [id]=\"'lock'\">{{ lockFilter ? 'turned_in' : 'turned_in_not' }}</i>\n    </ugl-button>\n\n    <ugl-button\n      [title]=\"'Close filter'\"\n      [color]=\"color\"\n      [style]=\"'icon'\"\n      (click)=\"toggleFilter()\">\n      <i class=\"material-icons\" [id]=\"'filter'\">close</i>\n    </ugl-button>\n  </div>\n\n  <div class='filter-content'>\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-15fdc953c5312ad0b872b5fd4327ee9e",
            "file": "projects/ugla/src/lib/components/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-form",
            "styleUrls": [
                "./form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelText",
                    "description": "<p>Set text to cancel button\nDefault: Cancel</p>\n",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "disableSubmitButton",
                    "description": "<p>Disable submit button\nDefault: false</p>\n",
                    "line": 66,
                    "type": "boolean"
                },
                {
                    "name": "footerWithBackground",
                    "defaultValue": "false",
                    "description": "<p>Set class background to footer.</p>\n",
                    "line": 24
                },
                {
                    "name": "hiddenButtonSubmit",
                    "description": "<p>hidden submit button\nDefault true</p>\n",
                    "line": 58,
                    "type": "boolean"
                },
                {
                    "name": "ngClass",
                    "line": 60,
                    "type": "NgClass"
                },
                {
                    "name": "submitColor",
                    "description": "<p>Set color to submit button\nDefault is color of current theme</p>\n",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "submitText",
                    "description": "<p>Set text to submit button\nDefault: Submit</p>\n",
                    "line": 36,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "description": "<p>Event to cancel button</p>\n",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "submitClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "description": "<p>Event to submit form</p>\n",
                    "line": 52,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "description": "<p>Watch updates on disable submit button</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2516,
                                "end": 2523,
                                "flags": 0,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "tagName": {
                                "pos": 2510,
                                "end": 2515,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>SimpleChanges</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "description": "<p>Set initials configurations</p>\n"
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "description": "<p>Call cancel event.</p>\n"
                },
                {
                    "name": "onSubmitClick",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78,
                    "description": "<p>Call submit event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 86
                }
            ],
            "description": "<p>Form</p>\n",
            "rawdescription": "Form",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, OnChanges, SimpleChanges, HostListener } from '@angular/core';\nimport { Form } from '../../enum';\nimport { UglaService } from '../../ugla.service';\nimport { NgClass } from '@angular/common';\n\n/**\n * Form\n */\n@Component({\n  selector: 'ugl-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})\nexport class FormComponent implements OnInit, OnChanges {\n\n  /**\n   * @ignore\n   */\n  constructor(private ugla: UglaService) { }\n\n  /**\n   * Set class background to footer.\n   */\n  @Input() footerWithBackground = false;\n\n  /**\n   * Set text to cancel button\n   * Default: Cancel\n   */\n  @Input() cancelText: string;\n\n  /**\n   * Set text to submit button\n   * Default: Submit\n   */\n  @Input() submitText: string;\n\n  /**\n   * Set color to submit button\n   * Default is color of current theme\n   */\n  @Input() submitColor: string;\n\n  /**\n   * Event to cancel button\n   */\n  @Output() cancelClick = new EventEmitter<any>();\n\n  /**\n   * Event to submit form\n   */\n  @Output() submitClick = new EventEmitter<any>();\n\n  /**\n   * hidden submit button\n   * Default true\n   */\n  @Input() hiddenButtonSubmit?: boolean;\n\n  @Input() ngClass: NgClass;\n\n  /**\n   * Disable submit button\n   * Default: false\n   */\n  @Input() disableSubmitButton?: boolean;\n\n  /**\n   * Call cancel event.\n   */\n  onCancelClick() {\n    this.cancelClick.emit(true);\n  }\n\n  /**\n   * Call submit event\n   */\n  onSubmitClick(event) {\n    if (this.disableSubmitButton) {\n      return false;\n    }\n    this.submitClick.emit(event);\n  }\n\n  @HostListener('keydown', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'Enter': {\n        event.stopPropagation();\n        event.preventDefault(); // prevents events being fired for multiple modals if more than 2 open\n        break;\n      }\n    }\n  }\n\n  /**\n   * Set initials configurations\n   */\n  ngOnInit() {\n    this.cancelText = (this.cancelText === undefined) ? Form.CANCEL_BUTTON_LABEL : this.cancelText;\n    this.submitText = (this.submitText === undefined) ? Form.SUBMIT_BUTTON_LABEL : this.submitText;\n    this.hiddenButtonSubmit = (this.hiddenButtonSubmit === undefined) ? false : this.hiddenButtonSubmit;\n    this.disableSubmitButton = (this.disableSubmitButton === undefined) ? false : this.disableSubmitButton;\n    this.submitColor = (this.submitColor === undefined) ? this.ugla.color : this.submitColor;\n  }\n\n  /**\n   * Watch updates on disable submit button\n   * @param changes SimpleChanges\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.disableSubmitButton !== undefined) {\n      this.disableSubmitButton = changes.disableSubmitButton.currentValue;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\nform {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @include mobile {\n    width: 100%;\n  }\n\n  .content {\n    padding: 1rem 1rem 0;\n  }\n\n  &.has-header {\n    .content {\n      min-height: calc(100vh - 157px);\n\n      @include mobile {\n        min-height: calc(100vh - 145px);\n      }\n    }\n  }\n\n  &.has-toolbar {\n    .content {\n      min-height: calc(100vh - 197px);\n\n      @include mobile {\n        min-height: calc(100vh - 184px);\n      }\n    }\n  }\n\n  &.has-aside {\n    .content {\n      min-height: calc(100vh - 97px);\n    }\n  }\n\n  &.has-breadcrumb {\n    .content {\n      min-height: calc(100vh - 131px);\n    }\n  }\n\n  &.central {\n    width: 1024px;\n    margin: 0 auto;\n\n    @include mobile {\n      width: 100%;\n    }\n  }\n\n  &.white {\n    background-color: color(_others, 'light');\n    box-shadow: 0 1rem 1rem color(_others, 'shadow');\n  }\n\n  .footer {\n    display: flex;\n    padding: 1rem;\n    margin-top: 1rem !important;\n    justify-content: center;\n    border-top: 1px solid color(_others, 'body');\n\n    .inner {\n      display: flex;\n      width: 100%;\n      justify-content: space-between;\n    }\n\n    &.background {\n      background: color(_others, 'body');\n      border: 0;\n      padding: 10px;\n    }\n  }\n}\n",
                    "styleUrl": "./form.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<form #form [ngClass]=\"ngClass\" novalidate=\"novalidate\" (submit)=\"onSubmitClick($event)\">\n  <div class='content'>\n    <ng-content></ng-content>\n  </div>\n  <div class=\"footer\" [ngClass]=\"{'background': footerWithBackground}\">\n    <div class=\"inner\">\n      <ugl-button\n      [type]=\"'button'\"\n      [color]=\"'red'\"\n      [style]=\"'border'\"\n      [title]=\"cancelText\"\n      (click)=\"onCancelClick()\"\n      [id]=\"'cancel-button'\">{{ cancelText }}</ugl-button>\n      <ugl-button *ngIf=\"!hiddenButtonSubmit\"\n                [type]=\"'submit'\"\n                [color]=\"submitColor\"\n                [style]=\"'fill'\"\n                [title]=\"submitText\"\n                [disabled]=\"disableSubmitButton\"\n                [id]=\"'submit-button'\">{{ submitText }}</ugl-button>\n    </div>\n  </div>\n</form>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-807c1dba52891925f358295566eb3216-1",
            "file": "projects/ugla/src/lib/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "description": "<p>Object type Header</p>\n",
                    "line": 50,
                    "type": "Header"
                },
                {
                    "name": "logoutText",
                    "description": "<p>Logout text alt</p>\n",
                    "line": 60,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "logoutAction",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Function logout</p>\n",
                    "line": 55,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "classes",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Classes of the header component</p>\n",
                    "line": 80,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "headerRightHeight",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Height of header right area</p>\n",
                    "line": 85
                },
                {
                    "name": "headerRightInstance",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Instance of header right area</p>\n",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'headerRight'"
                        }
                    ]
                },
                {
                    "name": "open",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Identify menu is open</p>\n",
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "windowHeight",
                    "defaultValue": "window.innerHeight",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "description": "<p>Function logout</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "description": "<p>Set initial configurations</p>\n"
                },
                {
                    "name": "setClasses",
                    "args": [
                        {
                            "name": "shadow",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "description": "<p>Set the header classes</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2238,
                                "end": 2244,
                                "flags": 0,
                                "escapedText": "shadow"
                            },
                            "type": "boolean",
                            "tagName": {
                                "pos": 2232,
                                "end": 2237,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>active or not the shadow, default is false</p>\n"
                        }
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "description": "<p>Function click</p>\n<p>Open / Close menu</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<h1 id=\"header-component\">Header component</h1>\n<h2 id=\"html\">HTML:</h2>\n<p>```html</p>\n<ul>\n<li>&lt;ugl-header [header]=&quot;header&quot; (logoutAction)=&quot;logout($event)&quot;&gt;</li>\n<li><another-component></another-component></li>\n<li></ugl-header></li>\n<li><div><pre class=\"line-numbers\"><code class=\"language-none\"></code></pre></div></li>\n</ul>\n<h2 id=\"typescript\">Typescript</h2>\n<p>```typescript</p>\n<ul>\n<li>import { Header, People, Menu, MenuItem, Select, Options } from &#39;ugla-ugla&#39;;</li>\n<li></li>\n<li>public header = new Header(&#39;Ugla&#39;, &#39;./assets/imgs/logo.png&#39;, &#39;home&#39;, true);</li>\n<li>public people = new People(&#39;PEOPLE NAME&#39;, &#39;LOGIN@ciandt.com&#39;, &#39;IMAGE URL&#39;);</li>\n<li></li>\n<li>public menu = new Menu([</li>\n<li>new MenuItem(&#39;Home Page&#39;, &#39;/&#39;, true),</li>\n<li>new MenuItem(&#39;Content&#39;, &#39;/content&#39;, false),</li>\n<li>new MenuItem(&#39;Menu Hidden in mobile&#39;, &#39;/no-mobile&#39;, true),</li>\n<li>]);</li>\n<li></li>\n<li>ngOnInit() {</li>\n<li>this.header.people = this.people;</li>\n<li>this.header.menu = this.menu;</li>\n<li>this.contentType = ContentTypes.FLUID;</li>\n<li>}</li>\n<li>```</li>\n</ul>\n",
            "rawdescription": "# Header component\n\n## HTML:\n```html\n * <ugl-header [header]=\"header\" (logoutAction)=\"logout($event)\">\n *    <another-component></another-component>\n * </ugl-header>\n * ```\n\n## Typescript\n```typescript\n * import { Header, People, Menu, MenuItem, Select, Options } from 'ugla-ugla';\n *\n * public header = new Header('Ugla', './assets/imgs/logo.png', 'home', true);\n * public people = new People('PEOPLE NAME', 'LOGIN\\@ciandt.com', 'IMAGE URL');\n *\n * public menu = new Menu([\n *    new MenuItem('Home Page', '/', true),\n *    new MenuItem('Content', '/content', false),\n *    new MenuItem('Menu Hidden in mobile', '/no-mobile', true),\n * ]);\n *\n * ngOnInit() {\n *    this.header.people = this.people;\n *    this.header.menu = this.menu;\n *    this.contentType = ContentTypes.FLUID;\n * }\n * ```",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ChangeDetectorRef, ViewChild, ElementRef } from '@angular/core';\nimport { Header } from '../../models';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * # Header component\n *\n * ## HTML:\n * ```html\n * <ugl-header [header]=\"header\" (logoutAction)=\"logout($event)\">\n *    <another-component></another-component>\n * </ugl-header>\n * ```\n * \n * ## Typescript\n * ```typescript\n * import { Header, People, Menu, MenuItem, Select, Options } from 'ugla-ugla';\n *\n * public header = new Header('Ugla', './assets/imgs/logo.png', 'home', true);\n * public people = new People('PEOPLE NAME', 'LOGIN\\@ciandt.com', 'IMAGE URL');\n *\n * public menu = new Menu([\n *    new MenuItem('Home Page', '/', true),\n *    new MenuItem('Content', '/content', false),\n *    new MenuItem('Menu Hidden in mobile', '/no-mobile', true),\n * ]);\n *\n * ngOnInit() {\n *    this.header.people = this.people;\n *    this.header.menu = this.menu;\n *    this.contentType = ContentTypes.FLUID;\n * }\n * ```\n */\n@Component({\n  selector: 'ugl-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  /**\n   * Instance of header right area\n   */\n  @ViewChild('headerRight') headerRightInstance !: ElementRef;\n\n  /**\n   * Object type Header\n   */\n  @Input() header: Header;\n\n  /**\n   * Function logout\n   */\n  @Output() logoutAction = new EventEmitter();\n\n  /**\n   * Logout text alt\n   */\n  @Input() public logoutText: string;\n\n  /**\n   * Identify menu is open\n   */\n  public open: boolean;\n\n  /**\n   * @ignore\n   */\n  private theme: string;\n\n  /**\n   * @ignore\n   */\n  private hasShadow: boolean;\n\n  /**\n   * Classes of the header component\n   */\n  public classes: string;\n\n  /**\n   * Height of header right area\n   */\n  headerRightHeight: number;\n  windowHeight = window.innerHeight;\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   * @param changeDetector: ChangeDetectorRef\n   */\n  constructor(private ugla: UglaService,\n              private changeDetector: ChangeDetectorRef) {\n    this.theme = ugla.theme;\n    this.setClasses(ugla.headerShadow);\n  }\n\n  /**\n   * Set the header classes\n   * @param shadow active or not the shadow, default is false\n   */\n  private setClasses(shadow: boolean) {\n    this.hasShadow = shadow;\n    this.classes = `${this.theme} ${this.hasShadow ? '' : 'no-shadow'}`;\n  }\n\n  /**\n   * Function click\n   *\n   * Open / Close menu\n   */\n  toggleMenu() {\n    this.open = !(this.open);\n    setTimeout(() => {\n      this.headerRightHeight = this.headerRightInstance.nativeElement.offsetHeight;\n    }, 0);\n  }\n\n  /**\n   * Function logout\n   */\n  logout() {\n    this.logoutAction.emit(true);\n  }\n\n  /**\n   * Set initial configurations\n   */\n  ngOnInit() {\n    this.open = false;\n    const current = location.pathname.charAt(0) === '/' ? location.pathname.substr(1) : location.pathname;\n    this.logoutText = (this.logoutText === undefined) ? 'Logout' : this.logoutText;\n\n    if (this.header.menu) {\n      for (const item of this.header.menu.items) {\n        const url = item.url.charAt(0) === '/' ? item.url.substr(1) : item.url;\n        item.active = url === current;\n      }\n    }\n\n    this.ugla.changedHeaderShadow.subscribe((hasShadow: boolean) => {\n      this.setClasses(hasShadow);\n    });\n  }\n\n  closeMenu() {\n    this.open = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white';\n@import './theme-colored';\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    },
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1948,
                            "end": 1952,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 1942,
                            "end": 1947,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1978,
                            "end": 1992,
                            "flags": 0,
                            "escapedText": "changeDetector"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1972,
                            "end": 1977,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header [ngClass]=\"classes\" id=\"header\">\n  <ugl-brand [path]=\"header.homePath\" [brandName]=\"header.brandName\" [brandImage]=\"header.brandImage\"></ugl-brand>\n  <a (click)=\"toggleMenu()\" class=\"toggle-menu\">\n    <i class=\"material-icons\">{{ open ? 'close' : 'menu' }}</i>\n  </a>\n  <nav [ngClass]=\"open ? 'opened' : ''\" id=\"main-menu\" [ngStyle]=\"{'height': 'calc(' + windowHeight + 'px' + ' - ' + headerRightHeight + 'px - 60px)'}\">\n      <a *ngFor=\"let item of header.menu.items; let idx = index\"\n         [routerLink]=\"item.url\"\n         [routerLinkActive]=\"'active'\"\n         [routerLinkActiveOptions]=\"{exact: true}\"\n         [ngClass]=\"{'hide-mobile' : item.hideMobile }\"\n         class=\"gtm-menu-item\"\n         (click)=\"closeMenu()\"\n         [id]=\"'item-menu-' + idx\"\n         [innerHtml]=\"item.description\"></a>\n  </nav>\n  <div class=\"right\" [ngClass]=\"open ? 'opened' : ''\" id=\"header-right\" #headerRight>\n    <div class=\"content\">\n      <ng-content></ng-content>\n    </div>\n    <ugl-people-card [people]=\"header.people\" [logoutText]=\"logoutText\" (logoutAction)=\"logout()\"></ugl-people-card>\n  </div>\n</header>\n"
        },
        {
            "name": "HomePageComponent",
            "id": "component-HomePageComponent-b55a00bcae15d3d55553f46e4cc651d0",
            "file": "src/app/pages/home-page/home-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home-page",
            "styleUrls": [
                "./home-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "header",
                    "defaultValue": "new Header('Ugla', './assets/imgs/logo.png', 'home', true)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAutenticated",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "menu",
                    "defaultValue": "new Menu([\n    new MenuItem('Home', '/', true)\n  ])",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "people",
                    "defaultValue": "new People('Jack Connor', 'jack.connor@ugla.dev', './assets/imgs/people.png')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "hideMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "selectLanguage",
                    "args": [
                        {
                            "name": "language",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { UglaRulesService } from './../../../../projects/ugla-rules/src/lib/ugla-rules.service';\nimport { Component, OnInit } from '@angular/core';\nimport { UglaService, Menu, MenuItem, Header, People } from 'projects/ugla/src';\n\n@Component({\n  selector: 'app-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.scss']\n})\nexport class HomePageComponent implements OnInit {\n\n  constructor(private ugla: UglaService) {}\n\n  isAutenticated = true;\n\n  header = new Header('Ugla', './assets/imgs/logo.png', 'home', true);\n\n  people = new People('Jack Connor', 'jack.connor@ugla.dev', './assets/imgs/people.png');\n\n  menu = new Menu([\n    new MenuItem('Home', '/', true)\n  ]);\n\n  ngOnInit() {\n    this.header.people = this.people;\n    this.header.menu = this.menu;\n    this.ugla.headerShadow = true;\n    this.ugla.hasToolBar();\n  }\n\n  hideMenu() {\n    this.isAutenticated = false;\n  }\n\n  logout() {\n    this.isAutenticated = false;\n  }\n\n  selectLanguage(language) {\n    console.log(`Language selected is ${language.description} and the code is ${language.value}`);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "ugla",
                        "type": "UglaService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ugl-header [header]=\"header\" (logoutAction)=\"logout($event)\" [logoutText]=\"'Logout now'\" *ngIf=\"isAutenticated\">\n  <div uglGrid [grid]=\"true\" [col]=\"2\">\n    <ugl-button\n      [id]=\"'test'\"\n      [size]=\"'small'\"\n      [color]=\"'purple'\"\n      [style]=\"'fill'\"\n      [wave]=\"true\"\n      [title]=\"'Ocultar Menu'\"\n      [type]=\"'button'\"\n      (action)=\"hideMenu()\">Ocultar Menu</ugl-button>\n  </div>\n</ugl-header>\n\n<section class=\"has-header\">\n  <div class=\"container container--central container--white\">\n    <ugl-page-title [firstTitle]=\"'Ugla'\" [secondTitle]=\"'Library'\"></ugl-page-title>\n    <p>O projeto Ugla foi desenvolvido com o objetivo de minimizar esforços no desenvolvimento FrontEnd de sistemas, trazendo consistencia e segurança para projetos que necessitam conversar entre si ou, que sejam totalmente independentes, mantendo uma identidade única e de fácil entendimento</p>\n    \n    <h2>O que é Ugla?</h2>\n    <p>Ugla é na realidade um projeto que visa unir em seu nome tudo aquilo que se faz necessário para o desenvolvimento de um sistema.</p>\n    \n    <h2>Protótipo</h2>\n    <p>Todos seus componentes são planejados separadamente e adicionados a uma biblioteca de protótipo. Seus componentes são desenvolvidos no Sketch.</p>\n    \n    <h2>Angular</h2>\n    <p>Cada componente do protótipo é desenvolvido dentro de uma biblioteca Angular que, considerando cada possibilidade, implementa de forma prática o que foi previsto no protótipo.</p>\n    \n    <h2>SCSS</h2>\n    <p>Junto a biblioteca Angular, o projeto possuí uma estrutura SCSS que contém classes que auxiliam no desenvolvimento das aplicações.</p>\n    \n    <h2>Dependências</h2>\n    <p>Tentamos desenvolver o Ugla com código 100% limpo, sem usar bibliotecas que não são de fato úteis e indispensáveis. Porém, não conseguimos uma pureza em 100% e por isso temos algumas bibliotecas inclusas.</p>\n    \n    <h2>Ícones</h2>\n    <p>Os ícones presentes no Ugla fazem parte do pacote de ícones do Material.</p>\n  </div>\n</section>"
        },
        {
            "name": "HyperLinkComponent",
            "id": "component-HyperLinkComponent-24b5a6af59fbc024a4dc0c347dd061d8",
            "file": "projects/ugla/src/lib/components/hyper-link/hyper-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-hyper-link",
            "styleUrls": [
                "./hyper-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hyper-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "description": "<p>Receive the hyper link aria-label.\nIf not received, it will use text variable instead.</p>\n",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "href",
                    "description": "<p>Receive the hyper link href</p>\n",
                    "line": 27,
                    "type": "string"
                },
                {
                    "name": "text",
                    "description": "<p>Receive the hyper link text</p>\n",
                    "line": 32,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Hyper link component</p>\n<p>This component generates a link with icon to open in new tab</p>\n",
            "rawdescription": "Hyper link component\n\nThis component generates a link with icon to open in new tab",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n/**\n * Hyper link component\n *\n * This component generates a link with icon to open in new tab\n *\n * @example\n * <ugl-hyper-link\n *  [href]=\"'http://www.example.com'\"\n *  [text]=\"'Display text'\"\n *  [ariaLabel]=\"'Accessibility text'\"\n *  [ngStyle]=\"{'font-size': '1rem', 'font-weight': '600'}\"\n *  [ngClass]=\"classList\">\n * </ugl-hyper-link>\n */\n@Component({\n  selector: 'ugl-hyper-link',\n  templateUrl: './hyper-link.component.html',\n  styleUrls: ['./hyper-link.component.scss']\n})\nexport class HyperLinkComponent {\n\n  /**\n   * Receive the hyper link href\n   */\n  @Input() href: string;\n\n  /**\n   * Receive the hyper link text\n   */\n  @Input() text: string;\n\n  /**\n   * Receive the hyper link aria-label.\n   * If not received, it will use text variable instead.\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".hyper-link {\n  color: inherit;\n\n  i {\n    font-size: inherit;\n    vertical-align: middle;\n  }\n}\n",
                    "styleUrl": "./hyper-link.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 152,
                    "end": 162,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 152,
                        "end": 153,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 153,
                        "end": 160,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-hyper-link\n[href]=\"'http://www.example.com'\"\n[text]=\"'Display text'\"\n[ariaLabel]=\"'Accessibility text'\"\n[ngStyle]=\"{'font-size': '1rem', 'font-weight': '600'}\"\n[ngClass]=\"classList\">\n</ugl-hyper-link>"
                }
            ],
            "templateData": "<a [href]=\"href\" target=\"_blank\" class=\"hyper-link\" [attr.aria-label]=\"ariaLabel || text\">\n  {{ text }}\n  <i class=\"material-icons\" aria-hidden=\"true\">open_in_new</i>\n</a>\n"
        },
        {
            "name": "LabelSpanComponent",
            "id": "component-LabelSpanComponent-5f946d0e050a166b3760d13e5bb3455c",
            "file": "projects/ugla/src/lib/components/label-span/label-span.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-label-span",
            "styleUrls": [
                "./label-span.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./label-span.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "texts",
                    "line": 12,
                    "type": "string[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { UglaService } from './../../ugla.service';\nimport { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ugl-label-span',\n  templateUrl: './label-span.component.html',\n  styleUrls: ['./label-span.component.scss']\n})\nexport class LabelSpanComponent implements OnInit {\n  theme: string;\n  @Input() label: string;\n  @Input() texts: string[];\n\n  constructor(private ugla: UglaService) {\n    this.theme = ugla.theme;\n  }\n\n  ngOnInit() {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white';\n@import './theme-colored';\n",
                    "styleUrl": "./label-span.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "ugla",
                        "type": "UglaService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"label-span\" [ngClass]=\"theme\">\n  <label for=\"\">{{ label }}</label>\n  <span *ngFor=\"let t of texts\">{{ t }}</span>\n</div>"
        },
        {
            "name": "ListLinksComponent",
            "id": "component-ListLinksComponent-88dcd6d28b644f90718670446a538dfe",
            "file": "projects/ugla/src/lib/components/list-links/list-links.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-list-links",
            "styleUrls": [
                "./list-links.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-links.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "description": "<p>Text to attribute id</p>\n",
                    "line": 33,
                    "type": "string"
                },
                {
                    "name": "list",
                    "description": "<p>Receive a list of links</p>\n",
                    "line": 28,
                    "type": "List"
                },
                {
                    "name": "orientation",
                    "defaultValue": "'row'",
                    "description": "<p>Set Orientation of the list: row, column</p>\n<p>Default: row</p>\n",
                    "line": 40
                }
            ],
            "outputsClass": [
                {
                    "name": "linkClicked",
                    "defaultValue": "new EventEmitter<Link>()",
                    "description": "<p>Emmiter for link clicked</p>\n",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "classes",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Classes of the component</p>\n",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "onClickLink",
                    "args": [
                        {
                            "name": "item",
                            "type": "Link"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69,
                    "description": "<p>Function called on click of the link. Set the active link and emitts the object.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1359,
                                "end": 1363,
                                "flags": 0,
                                "escapedText": "item"
                            },
                            "type": "Link",
                            "tagName": {
                                "pos": 1353,
                                "end": 1358,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Link element</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>List links component</p>\n<p>This component generates a selectable list of links, emitting the clicked link.</p>\n",
            "rawdescription": "List links component\n\nThis component generates a selectable list of links, emitting the clicked link.",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { List, Link } from '../../models';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * List links component\n *\n * This component generates a selectable list of links, emitting the clicked link.\n *\n * @example\n * <ugl-list-links\n *  [list]=\"list\"\n *  [id]=\"'list-links'\"\n *  [orientation]=\"'row'\"\n *  (linkClicked)=\"linkClicked($event)\">\n * </ugl-list-links>\n */\n@Component({\n  selector: 'ugl-list-links',\n  templateUrl: './list-links.component.html',\n  styleUrls: ['./list-links.component.scss']\n})\nexport class ListLinksComponent implements OnInit {\n\n  /**\n   * Receive a list of links\n   */\n  @Input() list: List;\n\n  /**\n   * Text to attribute id\n   */\n  @Input() id: string;\n\n  /**\n   * Set Orientation of the list: row, column\n   *\n   * Default: row\n   */\n  @Input() orientation = 'row';\n\n  /**\n   * Emmiter for link clicked\n   */\n  @Output() linkClicked = new EventEmitter<Link>();\n\n  /**\n   * Classes of the component\n   */\n  public classes: string;\n\n  /**\n   * @ignore\n   */\n  private theme: string;\n\n  constructor(private ugla: UglaService) {\n    this.theme = ugla.theme;\n  }\n\n  ngOnInit() {\n    this.classes = `${this.theme} ${this.orientation}`;\n  }\n\n  /**\n   * Function called on click of the link. Set the active link and emitts the object.\n   * @param item Link element\n   */\n  onClickLink(item: Link) {\n    this.list.links.forEach(link => link.active = false);\n\n    item.active = true;\n    if (!item.path) {\n      this.linkClicked.emit(item);\n      return false;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white';\n@import './theme-colored';\n",
                    "styleUrl": "./list-links.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 294,
                    "end": 304,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 294,
                        "end": 295,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 295,
                        "end": 302,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-list-links\n[list]=\"list\"\n[id]=\"'list-links'\"\n[orientation]=\"'row'\"\n(linkClicked)=\"linkClicked($event)\">\n</ugl-list-links>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "ugla",
                        "type": "UglaService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"list-links\" [ngClass]=\"classes\">\n  <a *ngFor=\"let item of list.links; let idx = index\"\n      (click)=\"onClickLink(item)\"\n      [ngClass]=\"{'active': item.active}\"\n      class=\"gtm-link\"\n      [href]=\"item.path || '#'\"\n      [id]=\"'link-' + idx\"\n      [title]=\"item.description\"\n      [attr.aria-label]=\"item.label\">{{ item.description }}</a>\n</div>\n"
        },
        {
            "name": "ListOptionsComponent",
            "id": "component-ListOptionsComponent-cb0b8979a3e34b62c6c6ff80a8d4590b",
            "file": "projects/ugla/src/lib/components/list-options/list-options.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-list-options",
            "styleUrls": [
                "./list-options.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-options.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "description": "<p>Text to attribute id</p>\n",
                    "line": 44,
                    "type": "string"
                },
                {
                    "name": "items",
                    "description": "<p>Receive an array os strings</p>\n",
                    "line": 39,
                    "type": "ListOptionsItem[]"
                },
                {
                    "name": "names",
                    "description": "<p>Receive an array of strings</p>\n",
                    "line": 34,
                    "type": "string[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Receive onClick function</p>\n",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Insert the theme name on html component</p>\n",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "keydownEvent",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        },
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectItem",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectName",
                    "args": [
                        {
                            "name": "index",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>List component</p>\n<p>This component generates a selectable list of names getting the index of each item.</p>\n",
            "rawdescription": "List component\n\nThis component generates a selectable list of names getting the index of each item.",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { KeyCode } from '../../enum';\nimport { ListOptionsItem } from '../../models';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * List component\n *\n * This component generates a selectable list of names getting the index of each item.\n *\n * @example\n * <ugl-list-options\n *  [names]=\"names\"\n *  uglGrid [span]=\"'2'\"\n *  [id]=\"\"\n *  (onClick)=\"selectItem($event)\">\n * </ugl-list-options>\n */\n@Component({\n  selector: 'ugl-list-options',\n  templateUrl: './list-options.component.html',\n  styleUrls: ['./list-options.component.scss']\n})\nexport class ListOptionsComponent implements OnChanges {\n\n  /**\n   *  Receive onClick function\n   */\n  @Output() onClick = new EventEmitter();\n\n  /**\n   * Receive an array of strings\n   */\n  @Input() names: string[];\n\n  /**\n   * Receive an array os strings\n   */\n  @Input() items: ListOptionsItem[];\n\n  /**\n   * Text to attribute id\n   */\n  @Input() id: string;\n\n  /**\n   * Insert the theme name on html component\n   */\n  public theme: string;\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   */\n  constructor(private ugla: UglaService) {\n    this.theme = ugla.theme;\n  }\n\n  selectName(index) {\n    this.onClick.emit(index);\n  }\n\n  selectItem(index) {\n    if (this.items[index].active) {\n      this.onClick.emit(index); \n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if(changes['items'] !== undefined) {\n      this.items = changes.items.currentValue;\n    }\n  }\n\n  keydownEvent(index, event) {\n    const keyCode = event.code.toUpperCase();\n    if (keyCode === KeyCode.SPACE || keyCode === KeyCode.RETURN || keyCode === KeyCode.NUMPADENTER) {\n      if (this.names !== undefined) {\n        this.selectName(index);\n      }\n      if (this.items !== undefined) {\n        this.selectItem(index);\n      }\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white.scss';\n@import './theme-colored.scss';\n",
                    "styleUrl": "./list-options.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 353,
                    "end": 363,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 353,
                        "end": 354,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 354,
                        "end": 361,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-list-options\n[names]=\"names\"\nuglGrid [span]=\"'2'\"\n[id]=\"\"\n(onClick)=\"selectItem($event)\">\n</ugl-list-options>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1144,
                            "end": 1148,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 1138,
                            "end": 1143,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ul class=\"list\" [ngClass]=\"theme\" [id]=\"id\" *ngIf=\"names != undefined\">\n  <li *ngFor=\"let element of names; let i = index\" [id]=\"id + '-item-' + i\" >\n    <a (click)=\"selectName(i)\" tabindex=\"0\" (keydown)=\"keydownEvent(i, $event)\">{{ element }}<i class=\"material-icons\" aria-hidden=\"true\">keyboard_arrow_right</i></a>\n  </li>\n</ul>\n\n<ul class=\"list\" [ngClass]=\"theme\" [id]=\"id\" *ngIf=\"items !== undefined\">\n  <li *ngFor=\"let element of items; let i = index\" [id]=\"id + '-item-' + i\">\n    <a (click)=\"selectItem(i)\" [ngClass]=\"{'no-active': !element.active}\" tabindex=\"0\" (keydown)=\"keydownEvent(i, $event)\">{{ element.name }}<i class=\"material-icons\" aria-hidden=\"true\" *ngIf=\"element.active\">keyboard_arrow_right</i></a>\n  </li>\n</ul>"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-9c6ab06ac0bf2b520e9c81d586efa55f",
            "file": "projects/ugla/src/lib/components/loading/loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-loading",
            "styleUrls": [
                "./loading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fullScreen",
                    "defaultValue": "true",
                    "description": "<p>Indicates if the loading must be full screen.</p>\n<p>Default: true</p>\n",
                    "line": 36
                },
                {
                    "name": "loadingName",
                    "defaultValue": "'loadingComponent'",
                    "description": "<p>Loading component name.</p>\n<p>Default: loadingComponent</p>\n",
                    "line": 48
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "description": "<p>Message to be shwon in the title for accessibility purposes</p>\n",
                    "line": 41
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "description": "<p>Indicates if the loading must be shown.</p>\n<p>Default: false</p>\n",
                    "line": 29
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inTransparency",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Insert the theme name on html component</p>\n",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "onHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "onShow",
                    "args": [
                        {
                            "name": "transparency",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "transparency",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Loading | LoadingService</p>\n<p>  Call loadingService.show() for to display loading without transparency while loading and loadingService.hide() after loading page.\n  Call loadingService.show(true) for to display loading with transparency.\n  Use &lt;ugl-loading [show]=&quot;true&quot; [fullScreen]=&quot;false&quot; [loadingName]=&quot;&#39;loadingName&#39;&quot;&gt;</ugl-loading> when local loading is needed.</p>\n",
            "rawdescription": "Loading | LoadingService\n\n  Call loadingService.show() for to display loading without transparency while loading and loadingService.hide() after loading page.\n  Call loadingService.show(true) for to display loading with transparency.\n  Use <ugl-loading [show]=\"true\" [fullScreen]=\"false\" [loadingName]=\"'loadingName'\"></ugl-loading> when local loading is needed.",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, Renderer2, ElementRef } from '@angular/core';\nimport { LoadingService } from './loading.service';\nimport { UglaService } from '../../ugla.service';\n\n\n/**\n * Loading | LoadingService\n *\n *  Call loadingService.show() for to display loading without transparency while loading and loadingService.hide() after loading page.\n *  Call loadingService.show(true) for to display loading with transparency.\n *  Use <ugl-loading [show]=\"true\" [fullScreen]=\"false\" [loadingName]=\"'loadingName'\"></ugl-loading> when local loading is needed.\n *\n * @example\n * <ugl-loading></ugl-loading>\n *\n */\n@Component({\n  selector: 'ugl-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss']\n})\nexport class LoadingComponent implements OnInit, OnDestroy {\n\n  /**\n   * Indicates if the loading must be shown.\n   *\n   * Default: false\n   */\n  @Input() show = false;\n\n  /**\n   * Indicates if the loading must be full screen.\n   *\n   * Default: true\n   */\n  @Input() fullScreen = true;\n\n  /**\n   * Message to be shwon in the title for accessibility purposes\n   */\n  @Input() message = '';\n\n  /**\n   * Loading component name.\n   *\n   * Default: loadingComponent\n   */\n  @Input() loadingName = 'loadingComponent';\n\n  inTransparency: boolean;\n\n  /**\n   * Insert the theme name on html component\n   */\n  public theme: string;\n\n\n  constructor(private service: LoadingService, private ugla: UglaService, private element: ElementRef) {\n    this.theme = ugla.theme;\n  }\n\n  ngOnInit() {\n    if (this.loadingName) {\n      this.service.registerInstance(this.loadingName, this);\n      const loading = this.element.nativeElement.querySelector('.loading');\n      if (loading) {\n        loading.focus();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.loadingName) {\n      this.service.removeInstance(this.loadingName, this);\n    }\n  }\n\n  onShow(transparency?: boolean) {\n    this.show = !this.show;\n    this.inTransparency = transparency;\n    document.body.classList.add('no-scroll');\n  }\n\n  onHide() {\n    if (this.show) {\n      this.show = !this.show;\n      document.body.classList.remove('no-scroll');\n      if (this.element.nativeElement.querySelector('.page-title')) {\n        this.element.nativeElement.querySelector('.page-title').focus();\n      } else if (this.element.nativeElement.querySelector('.brand')) {\n        this.element.nativeElement.querySelector('.brand').focus();\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white.scss';\n@import './theme-colored.scss';\n",
                    "styleUrl": "./loading.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 580,
                    "end": 590,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 580,
                        "end": 581,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 581,
                        "end": 588,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-loading></ugl-loading>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "LoadingService"
                    },
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    },
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "LoadingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ugla",
                        "type": "UglaService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"loading\" *ngIf=\"show\" [ngClass]=\"{'transparency': inTransparency, 'full-screen': fullScreen }\" [title]=\"message\">\n    <ul [ngClass]=\"theme\">\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n    </ul>\n  </div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-9efdf5ad9ae36778b94c24574c474e80",
            "file": "projects/ugla/src/lib/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonBackgroud",
                    "defaultValue": "'red'",
                    "line": 19
                },
                {
                    "name": "buttonText",
                    "defaultValue": "'Button'",
                    "line": 40
                },
                {
                    "name": "desktopImage",
                    "defaultValue": "''",
                    "line": 17
                },
                {
                    "name": "fieldPass",
                    "defaultValue": "'Password'",
                    "line": 21
                },
                {
                    "name": "fieldUser",
                    "defaultValue": "'User'",
                    "line": 20
                },
                {
                    "name": "floatLogo",
                    "description": "<p>Image to float logo</p>\n",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "googleLogo",
                    "description": "<p>Image to Google icon</p>\n",
                    "line": 34,
                    "type": "string"
                },
                {
                    "name": "hasForm",
                    "defaultValue": "false",
                    "description": "<p>Type of auth</p>\n<p>Default: google\nValues: google, form</p>\n",
                    "line": 29
                },
                {
                    "name": "header",
                    "defaultValue": "'Header'",
                    "line": 15
                },
                {
                    "name": "mobileImage",
                    "defaultValue": "''",
                    "line": 18
                },
                {
                    "name": "subheader",
                    "defaultValue": "'Subheader'",
                    "line": 16
                }
            ],
            "outputsClass": [
                {
                    "name": "signIn",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "authPassword",
                    "type": "FieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'authPassword'"
                        }
                    ]
                },
                {
                    "name": "authUser",
                    "type": "FieldComponent",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'authUser'"
                        }
                    ]
                },
                {
                    "name": "loginButton",
                    "type": "ButtonComponent",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'authButton'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "authenticate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "description": "<p>Set initial configurations</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Login Component</p>\n",
            "rawdescription": "Login Component",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ButtonComponent } from '../button/button.component';\nimport { Auth } from '../../models/auth';\nimport { FieldComponent } from '../field/field.component';\n\n/**\n * Login Component\n */\n@Component({\n  selector: 'ugl-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  @Input() header = 'Header';\n  @Input() subheader = 'Subheader';\n  @Input() desktopImage = '';\n  @Input() mobileImage = '';\n  @Input() buttonBackgroud = 'red';\n  @Input() fieldUser = 'User';\n  @Input() fieldPass = 'Password';\n\n  /**\n   * Type of auth\n   *\n   * Default: google\n   * Values: google, form\n   */\n  @Input() hasForm = false;\n\n  /**\n   * Image to Google icon\n   */\n  @Input() googleLogo: string;\n\n  /**\n   * Image to float logo\n   */\n  @Input() floatLogo: string;\n  @Input() buttonText = 'Button';\n  @Output() signIn = new EventEmitter<any>();\n\n  @ViewChild('authButton') loginButton !: ButtonComponent;\n  @ViewChild('authUser') authUser !: FieldComponent;\n  @ViewChild('authPassword') authPassword !: FieldComponent;\n\n  constructor() {}\n\n  /**\n   * Set initial configurations\n   */\n  ngOnInit() {}\n\n  authenticate() {\n    if (!this.hasForm) {\n      this.signIn.emit();\n    } else {\n      const auth = new Auth(this.authUser.value, this.authPassword.value);\n      this.signIn.emit(auth);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n.login {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 100vw;\n  height: 100vh;\n  justify-content: space-between;\n  padding: 5%;\n  overflow: hidden;\n\n  @include mobile() {\n    background-position: top;\n    padding: 3.875rem 3.875rem 8.125rem;\n  }\n\n  picture {\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    top: 0;\n    left: 0;\n    object-fit: cover;\n    z-index: -2;\n\n    img {\n      min-width: 100%;\n      height: 100vh;\n      object-fit: cover;\n    }\n  }\n\n  .header {\n    color: color(_others, light);\n    font-size: 6rem;\n    @include cross-browser(text-shadow, 2px 2px 4px color(_others, text-shadow));\n\n    @include mobile() {\n      font-size: 3rem;\n    }\n\n    .title {\n      font-size: inherit;\n      font-weight: normal;\n      line-height: 1;\n\n      &.bold {\n        font-weight: bold;\n        line-height: .88;\n      }\n    }\n  }\n\n  .button {\n    img {\n      margin-right: 10px;\n    }\n  }\n  \n  .float-logo {\n    position: fixed;\n    right: 0;\n    bottom: 0;\n    z-index: -1;\n  }\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 45
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"login\">\n  <header class=\"header\" id=\"login-header\" tabindex=\"0\">\n    <h1 class=\"title\">{{ header }}</h1>\n    <h1 class=\"title bold\">{{ subheader }}</h1>\n  </header>\n\n  <div uglGrid [grid]=\"true\" [col]=\"'8'\" [colSm]=\"'1'\" *ngIf=\"!hasForm\">\n    <ugl-button class=\"button\"\n                #authButton\n                [size]=\"'large'\"\n                [color]=\"buttonBackgroud\"\n                [title]=\"buttonText\"\n                [wave]=\"true\"\n                (click)=\"authenticate()\"\n                [id]=\"'login-button'\">\n      <img *ngIf=\"googleLogo !== undefined\" [src]=\"googleLogo\" alt=\"Google Logo\">\n      {{ buttonText }}\n    </ugl-button>\n  </div>\n\n  <div uglGrid [grid]=\"true\" [col]=\"'6'\" [colSm]=\"'1'\" *ngIf=\"hasForm\">\n    <div uglGrid [grid]=\"true\" [col]=\"'1'\" [colSm]=\"'1'\">\n      <ugl-field\n        #authUser\n        [type]=\"'email'\"\n        [name]=\"'email'\"\n        [label]=\"'E-mail'\"\n        [maxLength]=\"60\"\n        [required]=\"true\"></ugl-field>\n  \n      <ugl-field\n        #authPassword\n        [type]=\"'password'\"\n        [name]=\"'password'\"\n        [label]=\"'Password'\"\n        [maxLength]=\"20\"\n        [required]=\"true\"></ugl-field>\n      \n      <ugl-button uglGrid [grid]=\"true\" [customCol]=\"'80%'\"\n        class=\"button\"\n        #authButton\n        [size]=\"'large'\"\n        [color]=\"buttonBackgroud\"\n        [title]=\"buttonText\"\n        [wave]=\"true\"\n        (click)=\"authenticate()\"\n        [id]=\"'login-button'\">\n        {{ buttonText }}\n      </ugl-button>\n    </div>\n  </div>\n\n  <img *ngIf=\"floatLogo !== undefined\" [src]=\"floatLogo\" alt=\"CI&T Logo\" class=\"float-logo\">\n\n  <picture id=\"login-picture\">\n    <source media=\"(min-width: 727px)\" [srcset]=\"desktopImage\">\n    <source media=\"(max-width: 728px)\" [srcset]=\"mobileImage\">\n    <img [src]=\"desktopImage\" [alt]=\"header + ' ' + subheader\">\n  </picture>\n</section>"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-6db10ccc89445bead092058e3527e546",
            "file": "projects/ugla/src/lib/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-modal",
            "styleUrls": [
                "./modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelButtonText",
                    "defaultValue": "'Cancel'",
                    "description": "<p>Set text to cancel button</p>\n",
                    "line": 38
                },
                {
                    "name": "confirmButtonText",
                    "defaultValue": "'Confirm'",
                    "description": "<p>Set text to confirm button</p>\n",
                    "line": 43
                },
                {
                    "name": "hiddenCancelButton",
                    "description": "<p>Hide cancel button</p>\n",
                    "line": 53,
                    "type": "boolean"
                },
                {
                    "name": "hiddenConfirmButton",
                    "description": "<p>Hide confirm button</p>\n",
                    "line": 48,
                    "type": "boolean"
                },
                {
                    "name": "iconText",
                    "line": 55,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "description": "<p>Event to cancel button</p>\n",
                    "line": 60,
                    "type": "EventEmitter"
                },
                {
                    "name": "confirmClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "description": "<p>Event to confirm modal</p>\n",
                    "line": 65,
                    "type": "EventEmitter"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "line": 67,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "disableConfirmButton",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "element",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "hasIcon",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Show modal icon\nDefault: true</p>\n",
                    "line": 23
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "isClosing",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "isOpened",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Set modal&#39;s subtitle text</p>\n",
                    "line": 33
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Set modal&#39;s title text</p>\n",
                    "line": 28
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Set modal type\nOptions: info|warning|error|success\nDefault: warning</p>\n",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "description": "<p>Call cancel event.</p>\n"
                },
                {
                    "name": "onConfirmClick",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 126,
                    "description": "<p>Call confirm event</p>\n"
                },
                {
                    "name": "selectIcon",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "\"check_circle_outline\" | \"highlight_off\" | \"error_outline\" | \"info_outline\"",
                    "typeParameters": [],
                    "line": 103,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "description": "<p>Handle keyboard events to close modal and tab through the content within the modal.</p>\n",
                    "line": 137
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, HostListener} from '@angular/core';\nimport {ModalService} from './modal.service';\nimport { cycleTabs } from './../common/tab.service';\n\n@Component({\n  selector: 'ugl-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.scss']\n})\nexport class ModalComponent implements OnInit {\n\n  /**\n   * Set modal type\n   * Options: info|warning|error|success\n   * Default: warning\n   */\n  type: string;\n\n  /**\n   * Show modal icon\n   * Default: true\n   */\n  hasIcon?: boolean;\n\n  /**\n   * Set modal's title text\n   */\n  title: string;\n\n  /**\n   * Set modal's subtitle text\n   */\n  subtitle: string;\n\n  /**\n   * Set text to cancel button\n   */\n  @Input() cancelButtonText = 'Cancel';\n\n  /**\n   * Set text to confirm button\n   */\n  @Input() confirmButtonText = 'Confirm';\n\n  /**\n   * Hide confirm button\n   */\n  @Input() hiddenConfirmButton?: boolean;\n\n  /**\n   * Hide cancel button\n   */\n  @Input() hiddenCancelButton?: boolean;\n\n  @Input() iconText: string;\n\n  /**\n   * Event to cancel button\n   */\n  @Output() cancelClick = new EventEmitter<any>();\n\n  /**\n   * Event to confirm modal\n   */\n  @Output() confirmClick = new EventEmitter<any>();\n\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n  icon: string;\n  isOpened: boolean;\n  isClosing = false;\n  disableConfirmButton: boolean;\n  private element: any;\n\n  constructor(private modalService: ModalService,\n              private elementRef: ElementRef) {\n    this.element = elementRef.nativeElement;\n  }\n\n  ngOnInit() {\n    this.modalService.getModalEmitter().subscribe(modal => {\n      if (modal) {\n        this.title = modal.title;\n        this.subtitle = modal.text;\n        this.type = modal.type;\n        this.isOpened = modal.open;\n        this.hasIcon = modal.hasIcon;\n        this.type = modal.type;\n\n        this.icon = this.selectIcon(this.type);\n\n        setTimeout(() => {\n          const element = this.element.querySelector('.modal-icon');\n          if (modal.open && element !== undefined && element !== null) {\n            element.focus();\n          }\n        }, 0);\n\n      }\n    });\n  }\n\n  private selectIcon(type: string) {\n    switch (this.type) {\n      case 'success':\n        return 'check_circle_outline';\n      case 'error':\n        return 'highlight_off';\n      case 'warning':\n        return 'error_outline';\n      default:\n        return 'info_outline';\n    }\n  }\n\n  /**\n   * Call cancel event.\n   */\n  onCancelClick() {\n    this.cancelClick.emit(false);\n  }\n\n  /**\n   * Call confirm event\n   */\n  onConfirmClick() {\n    if (this.disableConfirmButton) {\n      return false;\n    }\n    this.confirmClick.emit();\n  }\n\n  /**\n   * Handle keyboard events to close modal and tab through the content within the modal.\n   */\n  @HostListener('keydown', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'Escape': {\n        this.modalService.closeModal();\n        event.stopImmediatePropagation();  // prevents events being fired for multiple modals if more than 2 open\n        break;\n      }\n\n      case 'Tab': {\n        cycleTabs(event, this.element);\n        break;\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n.modal-overlay {\n  position: fixed;\n  display: none;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  overflow-y: auto;\n  background-color: color(_gray, 'medium-alpha');\n  z-index: 1000;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal--show {\n  display: flex;\n}\n\n.modal {\n  @include cross-browser(box-shadow, 0 4px 8px 0 color(_others, shadow));\n  position: absolute;\n  display: flex;\n  width: calc(100% - 20px);\n  min-width: 300px;\n  max-width: 480px;\n  height: auto;\n  pointer-events: auto;\n  flex-direction: column;\n  border-radius: 5px;\n  background-color: color(_others, 'light');\n  z-index: map-get($z-index, 'modal');\n\n  .modal-body {\n    padding: 20px 20px 0;\n    flex: 1;\n  }\n\n  h2 {\n    margin-top: 0;\n    margin-bottom: 1rem;\n    font-size: 2rem;\n    font-weight: 600;\n    text-align: center;\n\n    @include mobile() {\n      font-size: 1.714rem;\n    }\n  }\n\n  p {\n    margin: 0 auto 1rem;\n    font-size: 1rem;\n    color: color(_gray, 'medium');\n    text-align: center;\n    max-inline-size: 16.75em;\n  }\n}\n\n.modal-icon {\n  text-align: center;\n\n  i {\n    font-size: 128px;\n  }\n}\n\n.modal-footer {\n  display: flex;\n  height: 60px;\n  margin-top: 15px !important;\n  padding: .625rem;\n  border-top: 1px solid color(_others, 'body');\n  justify-content: space-between;\n  align-items: center;\n\n  &.background {\n    padding: 10px;\n    border: 0;\n    background: color(_others, 'body');\n  }\n}\n\n.info {\n  h2,\n  i {\n    color: color(_aquamarine, 'medium');\n  }\n}\n\n.error {\n  h2,\n  i {\n    color: color(_red, 'medium');\n  }\n}\n\n.success {\n  h2,\n  i {\n    color: color(_green, 'medium');\n  }\n}\n\n.warning {\n  h2,\n  i {\n    color: color(_yellow, 'medium');\n  }\n}\n",
                    "styleUrl": "./modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "ModalService"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"isOpened\" class=\"modal-overlay\" [ngClass]=\"{'modal--show': isOpened, 'modal--hide': isClosing}\">\n\n  <div id=\"modal\" class=\"modal\" [ngClass]=\"type\" aria-modal=\"true\">\n    <div class=\"modal-body\">\n      <div class=\"modal-icon\" *ngIf=\"hasIcon\" tabindex=\"0\" [attr.aria-label]=\"iconText\">\n        <i class=\"material-icons\" aria-hidden=\"true\">{{ icon }}</i>\n      </div>\n      <h2 id=\"modalTitle\" tabindex=\"0\">{{ title }}</h2>\n      <p id=\"modalSubtitle\" [innerHtml]=\"subtitle\" tabindex=\"0\">{{ subtitle }}</p>\n\n      <div class=\"modal-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <ugl-button\n        *ngIf=\"!hiddenCancelButton\"\n        [type]=\"'button'\"\n        [color]=\"'red'\"\n        [style]=\"'border'\"\n        [title]=\"cancelButtonText\"\n        (click)=\"onCancelClick()\"\n        [id]=\"'cancel-button'\">{{ cancelButtonText }}</ugl-button>\n\n      <ugl-button\n        *ngIf=\"!hiddenConfirmButton\"\n        [type]=\"'submit'\"\n        [color]=\"'aquamarine'\"\n        [style]=\"'fill'\"\n        [title]=\"confirmButtonText\"\n        [disabled]=\"disableConfirmButton\"\n        (click)=\"onConfirmClick()\"\n        [id]=\"'submit-button'\">{{ confirmButtonText }}</ugl-button>\n    </div>\n\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageFloatComponent",
            "id": "component-PageFloatComponent-9c391cdd9dad3feaf8e93cb731cea4aa",
            "file": "projects/ugla/src/lib/components/page-float/page-float.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-page-float",
            "styleUrls": [
                "./page-float.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-float.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelText",
                    "defaultValue": "'Cancel'",
                    "line": 32
                },
                {
                    "name": "confirmDisabled",
                    "defaultValue": "false",
                    "line": 34
                },
                {
                    "name": "confirmText",
                    "defaultValue": "'Confirm'",
                    "line": 33
                },
                {
                    "name": "show",
                    "line": 30,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'40%'",
                    "line": 35
                },
                {
                    "name": "title",
                    "line": 31,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelButton",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 37,
                    "type": "EventEmitter"
                },
                {
                    "name": "confirmButton",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, OnInit } from '@angular/core';\nimport { animate, style, trigger, transition, state } from '@angular/animations';\nimport { UglaService } from '../../ugla.service';\n\n\n@Component({\n  selector: 'ugl-page-float',\n  templateUrl: './page-float.component.html',\n  styleUrls: ['./page-float.component.scss'],\n  animations: [\n    trigger('openClose', [\n      state('open', style({\n        right: '0',\n        opacity: '1'\n      })),\n      state('close', style({\n        right: '-50%',\n        opacity: '0'\n      })),\n      transition('* => open', [\n        animate('.5s')\n      ]),\n      transition('* => close', [\n        animate('.5s')\n      ])\n    ])\n  ]\n})\nexport class PageFloatComponent implements OnInit, OnChanges {\n  @Input() show: boolean;\n  @Input() title: string;\n  @Input() cancelText = 'Cancel';\n  @Input() confirmText = 'Confirm';\n  @Input() confirmDisabled = false;\n  @Input() size = '40%';\n\n  @Output() cancelButton = new EventEmitter<boolean>();\n  @Output() confirmButton = new EventEmitter<boolean>();\n\n  theme: string;\n  color: string;\n\n  constructor(private ugla: UglaService) { }\n\n  ngOnInit() {\n    this.theme = this.ugla.theme;\n    this.color = this.ugla.color;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const SHOW = 'show';\n    const TITLE = 'title';\n    const CONFIRM_DISABLED = 'confirmDisabled';\n\n    if (changes[SHOW] !== undefined) {\n      this.show = changes.show.currentValue;\n    }\n\n    if (changes[TITLE] !== undefined) {\n      this.title = changes.title.currentValue;\n    }\n\n    if (changes[CONFIRM_DISABLED] !== undefined) {\n      this.confirmDisabled = changes.confirmDisabled.currentValue;\n    }\n  }\n\n  cancel() {\n    this.cancelButton.emit(false);\n  }\n\n  confirm() {\n    this.confirmButton.emit(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n.page {\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  right: 0;\n  background-color: color(_gray, dark-alpha);\n  z-index: 999;\n\n  &--container {\n    position: fixed;\n    height: 100vh;\n    right: -50%;\n    background-color: color(_others, light);\n    animation-name: slide;\n    animation-duration: 1s;\n    animation-iteration-count: 0;\n  }\n\n  &--header {\n    padding: 1rem;\n    background-color: color(_aquamarine, medium);\n\n    @each $theme in $themes {\n      &.theme-colored-#{$theme} {\n        color: color(_others, 'light');\n        background-color: color(_#{$theme}, 'medium');\n      }\n    }\n  }\n\n  &--content {\n    height: calc(100vh - 128px);\n    padding: 1rem;\n    overflow: auto;\n  }\n\n  &--footer {\n    display: flex;\n    padding: .5rem 1rem;\n    border-top: 1px solid color(_gray, extra-light);\n    justify-content: space-between;\n  }\n}\n\nh2 {\n  color: color(_others, light);\n}\n\n@keyframes slide {\n  0% {\n    right: -50%;\n  }\n\n  100% {\n    right: 0;\n  }\n}\n",
                    "styleUrl": "./page-float.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "ugla",
                        "type": "UglaService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"page\" *ngIf=\"show\">\n  <div [@openClose]=\"show ? 'open' : 'close'\" class=\"page--container\" [ngStyle]=\"{'width': size}\">\n    <div class=\"page--header\" [ngClass]=\"theme\">\n      <h2>{{ title }}</h2>\n    </div>\n    <div class=\"page--content\">\n      <ng-content></ng-content>\n    </div>\n    <div class=\"page--footer\">\n      <ugl-button [color]=\"'red'\" [id]=\"'float-btn-cancel'\" [title]=\"cancelText\" [style]=\"'border'\" (action)=\"cancel()\">{{ cancelText }}</ugl-button>\n      <ugl-button [color]=\"color\" [id]=\"'float-btn-confirm'\" [title]=\"confirmText\" [disabled]=\"confirmDisabled\" (action)=\"confirm()\">{{ confirmText }}</ugl-button>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "PageTitleComponent",
            "id": "component-PageTitleComponent-2c67c998f2d74c7ba78ed236dc56fbbc",
            "file": "projects/ugla/src/lib/components/page-title/page-title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-page-title",
            "styleUrls": [
                "./page-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "firstTitle",
                    "description": "<p>Set firt title: prefix</p>\n",
                    "line": 35,
                    "type": "string"
                },
                {
                    "name": "secondTitle",
                    "description": "<p>Set second title</p>\n",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Receives theme&#39;s name</p>\n",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Page title</p>\n",
            "rawdescription": "Page title",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * Page title\n *\n * @example\n * <ugl-page-title\n *   [firstTitle]=\"'New'\"\n *   [secondTitle]=\"'Form Example'\">\n * </ugl-page-title>\n */\n@Component({\n  selector: 'ugl-page-title',\n  templateUrl: './page-title.component.html',\n  styleUrls: ['./page-title.component.scss']\n})\nexport class PageTitleComponent {\n  /**\n   * Receives theme's name\n   */\n  public theme: string;\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   */\n  constructor(private ugla: UglaService) {\n    this.theme = ugla.theme;\n  }\n\n  /**\n   * Set firt title: prefix\n   */\n  @Input() firstTitle: string;\n\n  /**\n   * Set second title\n   */\n  @Input() secondTitle: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white.scss';\n@import './theme-colored.scss';\n",
                    "styleUrl": "./page-title.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 125,
                    "end": 135,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 125,
                        "end": 126,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 126,
                        "end": 133,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-page-title\n[firstTitle]=\"'New'\"\n[secondTitle]=\"'Form Example'\">\n</ugl-page-title>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 529,
                            "end": 533,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 523,
                            "end": 528,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    }
                ]
            },
            "templateData": "<h2 class=\"page-title\" [ngClass]=\"theme\" tabindex=\"0\">\n  <span>{{ firstTitle }}</span>\n  <span>{{ secondTitle }}</span>\n</h2>\n"
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-458a4717db6fec6131e7844991964fee",
            "file": "projects/ugla/src/lib/components/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "firstPageButtonTitle",
                    "description": "<p>Set a title to the first page button.</p>\n",
                    "line": 103,
                    "type": "string"
                },
                {
                    "name": "id",
                    "description": "<p>Component id.</p>\n",
                    "line": 98,
                    "type": "string"
                },
                {
                    "name": "itemsPerPage",
                    "description": "<p>Selected pagination size.</p>\n",
                    "line": 83,
                    "type": "number"
                },
                {
                    "name": "itemsPerPageAfterText",
                    "description": "<p>Show text after select input.</p>\n",
                    "line": 93,
                    "type": "string"
                },
                {
                    "name": "itemsPerPageBeforeText",
                    "description": "<p>Show text before select input.</p>\n",
                    "line": 88,
                    "type": "string"
                },
                {
                    "name": "itemsPerPageRange",
                    "description": "<p>Pagination size options.</p>\n",
                    "line": 78,
                    "type": "Select"
                },
                {
                    "name": "itemsPerPageTitle",
                    "description": "<p>Set a title the item per page select.</p>\n",
                    "line": 123,
                    "type": "string"
                },
                {
                    "name": "labelPage",
                    "description": "<p>Set a label for page number.</p>\n",
                    "line": 128,
                    "type": "string"
                },
                {
                    "name": "lastPageButtonTitle",
                    "description": "<p>Set a title to the last page button.</p>\n",
                    "line": 113,
                    "type": "string"
                },
                {
                    "name": "limitInterval",
                    "description": "<p>Set limit interval to show pagination</p>\n",
                    "line": 214,
                    "type": "number"
                },
                {
                    "name": "nextPageButtonTitle",
                    "description": "<p>Set a title to the next page button.</p>\n",
                    "line": 118,
                    "type": "string"
                },
                {
                    "name": "previousPageButtonTitle",
                    "description": "<p>Set a title to the previous page button.</p>\n",
                    "line": 108,
                    "type": "string"
                },
                {
                    "name": "selectedPage",
                    "description": "<p>The selected page.</p>\n",
                    "line": 68,
                    "type": "number"
                },
                {
                    "name": "totalPages",
                    "description": "<p>Total pages of the pagination.</p>\n",
                    "line": 73,
                    "type": "number"
                },
                {
                    "name": "visiblePages",
                    "description": "<p>Set pagination length</p>\n",
                    "line": 197,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "changePaginationPage",
                    "defaultValue": "new EventEmitter<number>()",
                    "description": "<p>Emitter for changed pagination page.</p>\n",
                    "line": 144,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "changePaginationPageSize",
                    "defaultValue": "new EventEmitter<number>()",
                    "description": "<p>Emitter for changed pagination size.</p>\n",
                    "line": 139,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_limitInterval",
                    "defaultValue": "Math.trunc(this.visiblePages / 2)",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Internal property for limit interval</p>\n",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_visiblePages",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Internal property for visible pages</p>\n",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "firstVisiblePage",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Property for first visible page</p>\n",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isNext",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "<p>Property for indicating if is next page</p>\n",
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "itemsPerPageComponent",
                    "type": "PaginationItemsPerPageComponent",
                    "optional": false,
                    "description": "<p>Items per page component.</p>\n",
                    "line": 133,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'itemsPerPageComponent'"
                        }
                    ]
                },
                {
                    "name": "lastVisiblePage",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Property for first last page</p>\n",
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "pages",
                    "type": "number[]",
                    "optional": false,
                    "description": "<p>Pages to be displayed</p>\n",
                    "line": 149,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Receives the theme&#39;s name</p>\n",
                    "line": 154,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePagination",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "description": "<p>After fire pagination, update the visible pages.</p>\n"
                },
                {
                    "name": "fireFirstPageEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 256,
                    "description": "<p>Change navigation to first page, and emit the selected page number.</p>\n"
                },
                {
                    "name": "fireLastPageEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 288,
                    "description": "<p>Change navigation to the last page, and emit the selected page number.</p>\n"
                },
                {
                    "name": "fireNavigatePageEvent",
                    "args": [
                        {
                            "name": "page",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 306,
                    "description": "<p>Fire page navigation.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6566,
                                "end": 6570,
                                "flags": 0,
                                "escapedText": "page"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 6560,
                                "end": 6565,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>is a selected page</p>\n"
                        }
                    ]
                },
                {
                    "name": "fireNextPageEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 272,
                    "description": "<p>Change navigation to next page, and emit the selected page number.</p>\n"
                },
                {
                    "name": "firePageEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 350,
                    "description": "<p>Fire update pagination.</p>\n"
                },
                {
                    "name": "firePreviousPageEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 240,
                    "description": "<p>Change navigation to previous page, and emit the selected page number.</p>\n"
                },
                {
                    "name": "getNextFirstPage",
                    "args": [
                        {
                            "name": "lastPage",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 435,
                    "description": "<p>Get first page from last page.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10119,
                                "end": 10127,
                                "flags": 0,
                                "escapedText": "lastPage"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 10113,
                                "end": 10118,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>last page number</p>\n"
                        }
                    ]
                },
                {
                    "name": "getNextLastPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number"
                        },
                        {
                            "name": "interval",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 420,
                    "description": "<p>Get last page from any select page.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9672,
                                "end": 9676,
                                "flags": 0,
                                "escapedText": "page"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 9666,
                                "end": 9671,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>page number</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9701,
                                "end": 9709,
                                "flags": 0,
                                "escapedText": "interval"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 9695,
                                "end": 9700,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>number of interval</p>\n"
                        }
                    ]
                },
                {
                    "name": "isCurrentPage",
                    "args": [
                        {
                            "name": "page",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 329,
                    "description": "<p>Return true if the selected pages is the current.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFirstPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 336,
                    "description": "<p>Return true if the selected pages is the first page.</p>\n"
                },
                {
                    "name": "isInsideInterval",
                    "args": [
                        {
                            "name": "finalinterval",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 406,
                    "description": "<p>Validate if the current page is inside interval.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9340,
                                "end": 9353,
                                "flags": 0,
                                "escapedText": "finalinterval"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 9334,
                                "end": 9339,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: number</p>\n"
                        }
                    ]
                },
                {
                    "name": "isLastPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 343,
                    "description": "<p>Return true if the selected pages is the last page.</p>\n"
                },
                {
                    "name": "isLeftInterval",
                    "args": [
                        {
                            "name": "leftInterval",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 388,
                    "description": "<p>Return true if the selected page is in left interval.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8896,
                                "end": 8908,
                                "flags": 0,
                                "escapedText": "leftInterval"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 8890,
                                "end": 8895,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: number</p>\n"
                        }
                    ]
                },
                {
                    "name": "isNextPageEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 322,
                    "description": "<p>Return true if the next page is enabled.</p>\n"
                },
                {
                    "name": "isPreviousPageEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 315,
                    "description": "<p>Return true if the previous page is enabled.</p>\n"
                },
                {
                    "name": "isRightInterval",
                    "args": [
                        {
                            "name": "rightInterval",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 397,
                    "description": "<p>Return true if the selected page is in right interval.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9107,
                                "end": 9120,
                                "flags": 0,
                                "escapedText": "rightInterval"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 9101,
                                "end": 9106,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: number</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "description": "<p>Set initials configurations</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for pagination</p>\n",
            "rawdescription": "Component for pagination",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, ViewChild, OnChanges, SimpleChanges } from '@angular/core';\nimport { PaginationItemsPerPageComponent } from './pagination-items-per-page/pagination-items-per-page.component';\nimport { Select } from '../../models';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * Constant for default first page\n */\nconst FIRST_PAGE = 1;\n\n/**\n * Component for pagination\n *\n * @example\n * <ugl-pagination [totalPages]=\"100\"\n * [selectedPage]=\"2\"\n * [select]=\"select\"\n * [limitInterval]=\"5\"\n * [visiblePages]=\"10\"\n * [itemsPerPage]=\"10\"\n * [itemsPerPageRange]=\"select\"\n * [itemsPerPageBeforeText]=\"'Show'\"\n * [itemsPerPageAfterText]=\"'Items per page'\"\n * (changePaginationPage)=\"changePage($event)\"\n * (changePaginationPageSize)=\"changePageSize($event)\"\n * [firstPageButtonTitle]=\"'First Page'\"\n * [previousPageButtonTitle]=\"'Previous Page'\"\n * [nextPageButtonTitle]=\"'Next Page'\"\n * [lastPageButtonTitle]=\"'Last Page'\"\n * [id]=\"'pagination'\">\n * </ugl-pagination>\n */\n@Component({\n  selector: 'ugl-pagination',\n  templateUrl: './pagination.component.html',\n  styleUrls: ['./pagination.component.scss']\n})\nexport class PaginationComponent implements OnInit, OnChanges {\n\n  /**\n   * Internal property for limit interval\n   */\n  private _limitInterval: number = Math.trunc(this.visiblePages / 2);\n\n  /**\n   * Internal property for visible pages\n   */\n  private _visiblePages = 10;\n\n  /**\n   * Property for first visible page\n   */\n  private firstVisiblePage: number;\n\n  /**\n   * Property for first last page\n   */\n  private lastVisiblePage: number;\n\n  /**\n   * Property for indicating if is next page\n   */\n  private isNext = true;\n\n  /**\n   * The selected page.\n   */\n  @Input() selectedPage: number;\n\n  /**\n   * Total pages of the pagination.\n   */\n  @Input() totalPages: number;\n\n  /**\n   * Pagination size options.\n   */\n  @Input() itemsPerPageRange: Select;\n\n  /**\n   * Selected pagination size.\n   */\n  @Input() itemsPerPage: number;\n\n  /**\n   * Show text before select input.\n   */\n  @Input() itemsPerPageBeforeText?: string;\n\n  /**\n   * Show text after select input.\n   */\n  @Input() itemsPerPageAfterText?: string;\n\n  /**\n   * Component id.\n   */\n  @Input() id: string;\n\n  /**\n   * Set a title to the first page button.\n   */\n  @Input() firstPageButtonTitle?: string;\n\n  /**\n   * Set a title to the previous page button.\n   */\n  @Input() previousPageButtonTitle?: string;\n\n  /**\n   * Set a title to the last page button.\n   */\n  @Input() lastPageButtonTitle?: string;\n\n  /**\n   * Set a title to the next page button.\n   */\n  @Input() nextPageButtonTitle?: string;\n\n  /**\n   * Set a title the item per page select.\n   */\n  @Input() itemsPerPageTitle?: string;\n\n  /**\n   * Set a label for page number.\n   */\n  @Input() labelPage?: string;\n\n  /**\n   * Items per page component.\n   */\n  @ViewChild('itemsPerPageComponent') itemsPerPageComponent !: PaginationItemsPerPageComponent;\n\n\n  /**\n   * Emitter for changed pagination size.\n   */\n  @Output() changePaginationPageSize: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * Emitter for changed pagination page.\n   */\n  @Output() changePaginationPage: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * Pages to be displayed\n   */\n  public pages: number[];\n\n  /**\n   * Receives the theme's name\n   */\n  public theme: string;\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   */\n  constructor(private ugla: UglaService) {\n    this.theme = ugla.theme;\n  }\n\n  /**\n   * Set initials configurations\n   */\n  ngOnInit() {\n    this.firePageEvent();\n\n    setTimeout(() => {\n      if (this.itemsPerPageRange) {\n        this.itemsPerPageComponent.setSelected(this.itemsPerPage);\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.totalPages) {\n      this.totalPages = changes.totalPages.currentValue;\n    }\n    if (changes.selectedPage) {\n      this.selectedPage = changes.selectedPage.currentValue;\n    }\n    if (changes.itemsPerPage) {\n      this.itemsPerPage = changes.itemsPerPage.currentValue;\n    }\n    if (changes.itemsPerPageRange) {\n      this.itemsPerPageRange = changes.itemsPerPageRange.currentValue;\n    }\n    this.firePageEvent();\n  }\n\n  /**\n   * Set pagination length\n   */\n  @Input()\n  set visiblePages(visiblePages: number) {\n    if (visiblePages) {\n      this._visiblePages = visiblePages;\n    }\n  }\n\n  /**\n   * Get pagination length\n   */\n  get visiblePages() {\n    return this._visiblePages;\n  }\n\n  /**\n   * Set limit interval to show pagination\n   */\n  @Input()\n  set limitInterval(limitInterval: number) {\n    if (limitInterval) {\n      this._limitInterval = limitInterval;\n    }\n  }\n\n  /**\n   * Get limit interval to show pagination\n   */\n  get limitInterval() {\n    return this._limitInterval;\n  }\n\n  /**\n   * After fire pagination, update the visible pages.\n   */\n  changePagination() {\n    this.pages = [];\n    for (let i = this.firstVisiblePage, len = this.lastVisiblePage; i <= len; i++) {\n      this.pages.push(i);\n    }\n  }\n\n  /**\n   * Change navigation to previous page, and emit the selected page number.\n   */\n  firePreviousPageEvent() {\n    if (this.selectedPage === FIRST_PAGE || !this.isPreviousPageEnabled()) {\n        return false;\n    }\n\n    this.selectedPage = --this.selectedPage;\n    this.isNext = false;\n    this.firePageEvent();\n    this.changePaginationPage.emit(this.selectedPage);\n\n    return false;\n  }\n\n  /**\n   * Change navigation to first page, and emit the selected page number.\n   */\n  fireFirstPageEvent() {\n    if (this.selectedPage === FIRST_PAGE) {\n        return false;\n    }\n\n    this.selectedPage = FIRST_PAGE;\n    this.isNext = false;\n    this.firePageEvent();\n    this.changePaginationPage.emit(this.selectedPage);\n\n    return false;\n  }\n\n  /**\n   * Change navigation to next page, and emit the selected page number.\n   */\n  fireNextPageEvent() {\n    if (this.selectedPage === this.totalPages || !this.isNextPageEnabled()) {\n        return false;\n    }\n\n    this.selectedPage = ++this.selectedPage;\n    this.isNext = true;\n    this.firePageEvent();\n    this.changePaginationPage.emit(this.selectedPage);\n\n    return false;\n  }\n\n  /**\n   * Change navigation to the last page, and emit the selected page number.\n   */\n  fireLastPageEvent() {\n    if (this.selectedPage === this.totalPages) {\n        return false;\n    }\n\n    this.selectedPage = this.totalPages;\n    this.isNext = true;\n    this.firePageEvent();\n    this.changePaginationPage.emit(this.selectedPage);\n\n    return false;\n  }\n\n  /**\n   * Fire page navigation.\n   *\n   * @param page is a selected page\n   */\n  fireNavigatePageEvent(page) {\n    this.selectedPage = page;\n    this.changePaginationPage.emit(this.selectedPage);\n    return false;\n  }\n\n  /**\n   * Return true if the previous page is enabled.\n   */\n  isPreviousPageEnabled(): boolean {\n    return this.selectedPage > FIRST_PAGE;\n  }\n\n  /**\n   * Return true if the next page is enabled.\n   */\n  isNextPageEnabled(): boolean {\n    return this.selectedPage <= this.totalPages;\n  }\n\n  /**\n   * Return true if the selected pages is the current.\n   */\n  isCurrentPage(page): boolean {\n    return this.selectedPage === page;\n  }\n\n  /**\n   * Return true if the selected pages is the first page.\n   */\n  isFirstPage(): boolean {\n    return this.selectedPage === FIRST_PAGE;\n  }\n\n  /**\n   * Return true if the selected pages is the last page.\n   */\n  isLastPage(): boolean {\n    return this.selectedPage === this.totalPages;\n  }\n\n  /**\n   * Fire update pagination.\n   */\n  firePageEvent() {\n    let leftInterval: number;\n    let rightInterval: number;\n\n    if (this.isNext) {\n      rightInterval = (this.limitInterval === this.visiblePages)\n        ? this.visiblePages - 1 : this.limitInterval;\n      leftInterval = (this.limitInterval === this.visiblePages)\n        ? this.visiblePages - this.limitInterval : (this.visiblePages - 1) - this.limitInterval;\n    } else {\n      leftInterval =  (this.limitInterval === this.visiblePages)\n        ? this.visiblePages - 1 : this.limitInterval;\n      rightInterval = (this.limitInterval === this.visiblePages)\n        ? this.visiblePages - this.limitInterval : (this.visiblePages - 1) - this.limitInterval;\n    }\n\n    if (!this.firstVisiblePage && !this.lastVisiblePage\n            || this.isFirstPage()\n            || this.isLastPage()) {\n        this.lastVisiblePage = this.getNextLastPage(this.selectedPage, rightInterval);\n        this.firstVisiblePage = this.getNextFirstPage(this.lastVisiblePage);\n    }\n\n    if (!this.isLeftInterval(leftInterval)\n        && !this.isRightInterval(rightInterval)\n        && this.isInsideInterval(this.limitInterval)) {\n      this.firstVisiblePage =  (this.selectedPage - leftInterval);\n      this.lastVisiblePage = (this.selectedPage + rightInterval);\n    }\n\n    this.changePagination();\n  }\n\n  /**\n   * Return true if the selected page is in left interval.\n   *\n   * @param leftInterval: number\n   */\n  isLeftInterval(leftInterval: number): boolean {\n    return this.selectedPage <= leftInterval;\n  }\n\n  /**\n   * Return true if the selected page is in right interval.\n   *\n   * @param rightInterval: number\n   */\n  isRightInterval(rightInterval: number): boolean {\n    return this.selectedPage >= (this.totalPages + 1) - rightInterval;\n  }\n\n  /**\n   * Validate if the current page is inside interval.\n   *\n   * @param finalinterval: number\n   */\n  isInsideInterval(finalinterval: number) {\n    if (this.isNext) {\n        return this.selectedPage >= this.lastVisiblePage - finalinterval;\n    } else {\n        return this.selectedPage <= this.firstVisiblePage + finalinterval;\n    }\n  }\n\n  /**\n   * Get last page from any select page.\n   *\n   * @param page page number\n   * @param interval number of interval\n   */\n  getNextLastPage(page: number, interval: number) {\n    let rightPage: number = page;\n    const diff = (page <= this.limitInterval ? (page - (this.visiblePages - interval)) : 0 );\n    while (rightPage < this.totalPages\n           && rightPage < (page + interval - diff)) {\n      ++rightPage;\n    }\n    return rightPage;\n  }\n\n  /**\n   * Get first page from last page.\n   *\n   * @param lastPage last page number\n   */\n  getNextFirstPage(lastPage: number) {\n    let leftPage: number = lastPage;\n    while (leftPage > (lastPage - this.visiblePages + 1)\n         && leftPage > FIRST_PAGE) {\n      --leftPage;\n    }\n    return leftPage;\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white.scss';\n@import './theme-colored.scss';\n",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 426,
                    "end": 436,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 426,
                        "end": 427,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 427,
                        "end": 434,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-pagination [totalPages]=\"100\"\n[selectedPage]=\"2\"\n[select]=\"select\"\n[limitInterval]=\"5\"\n[visiblePages]=\"10\"\n[itemsPerPage]=\"10\"\n[itemsPerPageRange]=\"select\"\n[itemsPerPageBeforeText]=\"'Show'\"\n[itemsPerPageAfterText]=\"'Items per page'\"\n(changePaginationPage)=\"changePage($event)\"\n(changePaginationPageSize)=\"changePageSize($event)\"\n[firstPageButtonTitle]=\"'First Page'\"\n[previousPageButtonTitle]=\"'Previous Page'\"\n[nextPageButtonTitle]=\"'Next Page'\"\n[lastPageButtonTitle]=\"'Last Page'\"\n[id]=\"'pagination'\">\n</ugl-pagination>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 154,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3405,
                            "end": 3409,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 3399,
                            "end": 3404,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "visiblePages": {
                    "name": "visiblePages",
                    "setSignature": {
                        "name": "visiblePages",
                        "type": "void",
                        "args": [
                            {
                                "name": "visiblePages",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 197,
                        "description": "<p>Set pagination length</p>\n",
                        "jsdoctags": [
                            {
                                "name": "visiblePages",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "visiblePages",
                        "type": "",
                        "returnType": "",
                        "line": 206,
                        "description": "<p>Get pagination length</p>\n"
                    }
                },
                "limitInterval": {
                    "name": "limitInterval",
                    "setSignature": {
                        "name": "limitInterval",
                        "type": "void",
                        "args": [
                            {
                                "name": "limitInterval",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 214,
                        "description": "<p>Set limit interval to show pagination</p>\n",
                        "jsdoctags": [
                            {
                                "name": "limitInterval",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "limitInterval",
                        "type": "",
                        "returnType": "",
                        "line": 223,
                        "description": "<p>Get limit interval to show pagination</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"pagination\" [id]=\"id\" [ngClass]=\"theme\">\n  <ul>\n    <li>\n      <a href=\"\"\n        [ngClass]=\"{'disabled': isFirstPage()}\"\n        (click)=\"fireFirstPageEvent()\"\n        [title]=\"firstPageButtonTitle\"\n        [attr.aria-label]=\"firstPageButtonTitle\"\n        tabindex=\"0\">\n        <i class=\"material-icons\" aria-hidden=\"true\">first_page</i>\n      </a>\n    </li>\n    <li>\n      <a href=\"\"\n        [ngClass]=\"{'disabled': isFirstPage()}\"\n        (click)=\"firePreviousPageEvent()\"\n        [title]=\"previousPageButtonTitle\"\n        [attr.aria-label]=\"previousPageButtonTitle\"\n        tabindex=\"0\">\n        <i class=\"material-icons\" aria-hidden=\"true\">keyboard_arrow_left</i>\n      </a>\n    </li>\n    <li *ngFor=\"let page of pages\">\n      <a href=\"\"\n        [ngClass]=\"{'active': isCurrentPage(page)}\"\n        (click)=\"fireNavigatePageEvent(page)\"\n        [title]=\"labelPage + ' ' + page\"\n        [attr.aria-label]=\"labelPage+page\"\n        tabindex=\"0\">{{ page }}\n      </a>\n    </li>\n    <li>\n      <a href=\"\"\n        [ngClass]=\"{'disabled': isLastPage()}\"\n        (click)=\"fireNextPageEvent()\"\n        [title]=\"nextPageButtonTitle\"\n        [attr.aria-label]=\"nextPageButtonTitle\"\n        tabindex=\"0\">\n        <i class=\"material-icons\" aria-hidden=\"true\">keyboard_arrow_right</i>\n      </a>\n    </li>\n    <li>\n      <a href=\"\"\n        [ngClass]=\"{'disabled': isLastPage()}\"\n        (click)=\"fireLastPageEvent()\"\n        [title]=\"lastPageButtonTitle\"\n        [attr.aria-label]=\"lastPageButtonTitle\"\n        tabindex=\"0\">\n        <i class=\"material-icons\" aria-hidden=\"true\">last_page</i>\n      </a>\n    </li>\n  </ul>\n  <ugl-pagination-items-per-page class=\"pagination-items-per-page\"\n                        *ngIf=\"itemsPerPageRange\"\n                        [range]=\"itemsPerPageRange\"\n                        (changeItemsPerPagePageSize)=\"changePaginationPageSize.emit($event)\"\n                        [id]=\"'pagination-items-per-page'\"\n                        [beforeText]=\"itemsPerPageBeforeText\"\n                        [afterText]=\"itemsPerPageAfterText\"\n                        [title]=\"itemsPerPageTitle\"\n                        #itemsPerPageComponent>\n  </ugl-pagination-items-per-page>\n</div>\n"
        },
        {
            "name": "PaginationItemsPerPageComponent",
            "id": "component-PaginationItemsPerPageComponent-2285af4d48f0a6f21f13646ff18fadac",
            "file": "projects/ugla/src/lib/components/pagination/pagination-items-per-page/pagination-items-per-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-pagination-items-per-page",
            "styleUrls": [
                "./pagination-items-per-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination-items-per-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "afterText",
                    "description": "<p>Show text after select input.</p>\n",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "beforeText",
                    "description": "<p>Show text before select input.</p>\n",
                    "line": 43,
                    "type": "string"
                },
                {
                    "name": "id",
                    "description": "<p>Component id.</p>\n",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "range",
                    "description": "<p>Range of the pagination size.</p>\n",
                    "line": 33,
                    "type": "Select"
                },
                {
                    "name": "title",
                    "description": "<p>Component title.</p>\n",
                    "line": 53,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "changeItemsPerPagePageSize",
                    "defaultValue": "new EventEmitter<number>()",
                    "description": "<p>Emitter for change of page size.</p>\n",
                    "line": 63,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "itemsPerPageSelect",
                    "type": "SelectComponent",
                    "optional": false,
                    "description": "<p>Items per page select component.</p>\n",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'itemsPerPageSelect'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fireChangePage",
                    "args": [
                        {
                            "name": "size",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "description": "<p>Fire pagination size.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasPageRange",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 97,
                    "description": "<p>Return true if the page rage has initialized.</p>\n"
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "pageSize",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "description": "<p>Set selected value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1517,
                                "end": 1525,
                                "flags": 0,
                                "escapedText": "pageSize"
                            },
                            "type": "number",
                            "tagName": {
                                "pos": 1511,
                                "end": 1516,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>number of page size</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Items per page component of pagination</p>\n",
            "rawdescription": "Items per page component of pagination",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { Select } from '../../../models';\nimport { SelectComponent } from '../../select/select.component';\n\n/**\n * Items per page component of pagination\n *\n * @example\n * <ugl-pagination-items-per-page class=\"pagination-items-per-page\"\n *    [range]=\"itemsPerPageRange\"\n *    (changeItemsPerPagePageSize)=\"changePaginationPageSize.emit($event)\"\n *    [id]=\"'pagination-items-per-page'\"\n *    [beforeText]=\"'Before Text'\"\n *    [afterText]=\"'After Text'\"\n *    [title]=\"'Title'\"\n *    #itemsPerPageComponent>\n */\n@Component({\n  selector: 'ugl-pagination-items-per-page',\n  templateUrl: './pagination-items-per-page.component.html',\n  styleUrls: ['./pagination-items-per-page.component.scss']\n})\nexport class PaginationItemsPerPageComponent {\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * Range of the pagination size.\n   */\n  @Input() range?: Select;\n\n  /**\n   * Component id.\n   */\n  @Input() id: string;\n\n  /**\n   * Show text before select input.\n   */\n  @Input() beforeText?: string;\n\n  /**\n   * Show text after select input.\n   */\n  @Input() afterText?: string;\n\n  /**\n   * Component title.\n   */\n  @Input() title?: string;\n\n  /**\n   * Items per page select component.\n   */\n  @ViewChild('itemsPerPageSelect') itemsPerPageSelect !: SelectComponent;\n\n  /**\n   * Emitter for change of page size.\n   */\n  @Output() changeItemsPerPagePageSize = new EventEmitter<number>();\n\n  /**\n   * Set selected value.\n   *\n   * @param pageSize number of page size\n   */\n  setSelected(pageSize: number) {\n    this.itemsPerPageSelect.setSelect(pageSize.toString());\n  }\n\n  /**\n   * Fire pagination size.\n   */\n  fireChangePage(size: any) {\n    let selectedSize: number;\n\n    if (Number(size.value) > 0) {\n      selectedSize = Number(size.value);\n    } else {\n      this.itemsPerPageSelect.select.options.forEach((item) => {\n        if (item.checked\n          && Number(item.value) > 0) {\n          selectedSize = Number(item.value);\n          item.checked  = true;\n        }\n      });\n    }\n    this.changeItemsPerPagePageSize.emit(selectedSize);\n  }\n\n  /**\n   * Return true if the page rage has initialized.\n   */\n  hasPageRange() {\n    return !!this.range;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../sass/index';\n\n.pagination-items-per-page {\n  float: right;\n  height: 38px;\n  display: grid;\n  grid-template-columns: auto auto auto;\n  align-items: center;\n\n  div {\n    margin-right: 10px;\n    font-size: 0.75rem;\n    color: color(_others, dark);\n    white-space: nowrap;\n    padding-right: 10px;\n  }\n}\n",
                    "styleUrl": "./pagination-items-per-page.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 243,
                    "end": 253,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 243,
                        "end": 244,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 244,
                        "end": 251,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-pagination-items-per-page class=\"pagination-items-per-page\"\n[range]=\"itemsPerPageRange\"\n(changeItemsPerPagePageSize)=\"changePaginationPageSize.emit($event)\"\n[id]=\"'pagination-items-per-page'\"\n[beforeText]=\"'Before Text'\"\n[afterText]=\"'After Text'\"\n[title]=\"'Title'\"\n#itemsPerPageComponent>"
                }
            ],
            "templateData": "<div class=\"pagination-items-per-page\" style=\"display: grid; \">\n    <div tabindex=\"0\">{{ beforeText }}</div>\n    <div>\n        <ugl-select *ngIf=\"hasPageRange()\"\n          [select]=\"range\"\n          (selected)=\"fireChangePage($event)\"\n          [stylized]=\"true\"\n          [stylizedType]=\"'pagination'\"\n          [dataTitle]=\"title\"\n          [direction]=\"'top'\"\n          #itemsPerPageSelect>\n        </ugl-select>\n    </div>\n    <div tabindex=\"0\">{{ afterText }}</div>\n</div>\n"
        },
        {
            "name": "PeopleCardComponent",
            "id": "component-PeopleCardComponent-229565691eb5e569d57f1cdbb1f94f57",
            "file": "projects/ugla/src/lib/components/people-card/people-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-people-card",
            "styleUrls": [
                "./people-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./people-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "logoutText",
                    "description": "<p>Logout text alt</p>\n",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "people",
                    "description": "<p>Object type People</p>\n",
                    "line": 34,
                    "type": "People"
                }
            ],
            "outputsClass": [
                {
                    "name": "logoutAction",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Function logout</p>\n",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "description": "<p>Execute the function logout</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>People Card</p>\n",
            "rawdescription": "People Card",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { People } from '../../models';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * People Card\n *\n * @example\n * <ugl-people-card [people]=\"header.people\" (logoutAction)=\"logout()\"></ugl-people-card>\n *\n * @example\n * public people = new People('PEOPLE NAME', 'LOGIN', 'IMAGE URL');\n *\n * @example\n * ngOnInit() {\n *  this.header.people = this.people;\n * }\n */\n@Component({\n  selector: 'ugl-people-card',\n  templateUrl: './people-card.component.html',\n  styleUrls: ['./people-card.component.scss']\n})\nexport class PeopleCardComponent {\n\n  /**\n   * @ignore\n   */\n  public theme: string;\n\n  /**\n   * Object type People\n   */\n  @Input() public people: People;\n\n  /**\n   * Logout text alt\n   */\n  @Input() public logoutText: string;\n\n  /**\n   * Function logout\n   */\n  @Output() logoutAction = new EventEmitter();\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   */\n  constructor(private ugla: UglaService) {\n    this.theme = this.ugla.theme;\n  }\n\n  /**\n   * Execute the function logout\n   */\n  logout() {\n    this.logoutAction.emit(true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white.scss';\n@import './theme-colored.scss';\n",
                    "styleUrl": "./people-card.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 195,
                    "end": 205,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 195,
                        "end": 196,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 196,
                        "end": 203,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-people-card [people]=\"header.people\" (logoutAction)=\"logout()\"></ugl-people-card>"
                },
                {
                    "pos": 300,
                    "end": 310,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 300,
                        "end": 301,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 301,
                        "end": 308,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "public people = new People('PEOPLE NAME', 'LOGIN', 'IMAGE URL');"
                },
                {
                    "pos": 383,
                    "end": 393,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 383,
                        "end": 384,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 384,
                        "end": 391,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "ngOnInit() {\nthis.header.people = this.people;\n}"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 958,
                            "end": 962,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 952,
                            "end": 957,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    }
                ]
            },
            "templateData": "<div class=\"people\" [ngClass]=\"theme\" id=\"people-card\">\n  <div class=\"info\" tabindex=\"0\">\n    <span class=\"truncate\" [innerHtml]=\"people.name\" id=\"people-name\"></span>\n    <span [innerHtml]=\"people.email\" id=\"people-email\"></span>\n  </div>\n  <img [src]=\"people.photo\" alt=\"Your photo\"/>\n  <ugl-button [title]=\"logoutText\" [style]=\"'icon'\" [theme]=\"theme\" (click)=\"logout()\" class=\"logout\">\n    <i class=\"material-icons\" [id]=\"'logout-button'\" aria-label=\"Logout\">power_settings_new</i>\n  </ugl-button>\n</div>\n"
        },
        {
            "name": "QuoteComponent",
            "id": "component-QuoteComponent-53073d554fdaf185339fa361e34b488d",
            "file": "projects/ugla/src/lib/components/quote/quote.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-quote",
            "styleUrls": [
                "./quote.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quote.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "line": 33,
                    "type": "string"
                },
                {
                    "name": "color",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "text",
                    "line": 23,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_align",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "_color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "classes",
                    "defaultValue": "['quote']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Quote</p>\n",
            "rawdescription": "Quote",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * Quote\n *\n * @example\n * <ugl-quote\n *  [text]=\"'text.'\"\n *  [color]=\"'color'\"\n *  [align]=\"'center'\">\n *  <ng-content></ng-content>\n * </ugl-quote>\n *\n */\n@Component({\n  selector: 'ugl-quote',\n  templateUrl: './quote.component.html',\n  styleUrls: ['./quote.component.scss']\n})\nexport class QuoteComponent {\n\n  @Input() text: string;\n\n  @Input() set color(color: string) {\n    this._color = color !== undefined ? `background-${color}` : 'background-aquamarine';\n  }\n\n  get color(): string {\n    return this._color;\n  }\n\n  @Input() set align(align: string) {\n    this._align = `align-${align}`;\n    this.classes.push(this._align);\n  }\n\n  get align(): string {\n    return this._align;\n  }\n\n  _color: string;\n  _align: string;\n  classes = ['quote'];\n\n  constructor(private ugla: UglaService) { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';",
                    "styleUrl": "./quote.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 128,
                    "end": 138,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 128,
                        "end": 129,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 129,
                        "end": 136,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-quote\n[text]=\"'text.'\"\n[color]=\"'color'\"\n[align]=\"'center'\">\n<ng-content></ng-content>\n</ugl-quote>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "ugla",
                        "type": "UglaService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "color": {
                    "name": "color",
                    "setSignature": {
                        "name": "color",
                        "type": "void",
                        "args": [
                            {
                                "name": "color",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 25,
                        "jsdoctags": [
                            {
                                "name": "color",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "color",
                        "type": "string",
                        "returnType": "string",
                        "line": 29
                    }
                },
                "align": {
                    "name": "align",
                    "setSignature": {
                        "name": "align",
                        "type": "void",
                        "args": [
                            {
                                "name": "align",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "align",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "align",
                        "type": "string",
                        "returnType": "string",
                        "line": 38
                    }
                }
            },
            "templateData": "<div>\n  <p id=\"quote\" tabindex=\"0\" [ngClass]=\"classes\" *ngIf=\"text\" [innerHtml]=\"text\"></p>\n  <div [ngClass]=\"_color\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-10197929cfbe378884bf58e2a93f6724",
            "file": "projects/ugla/src/lib/components/radio/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-radio",
            "styleUrls": [
                "./radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 30
                },
                {
                    "name": "items",
                    "line": 27,
                    "type": "Options[]"
                },
                {
                    "name": "radioGroupAriaLabel",
                    "line": 28,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemChecked",
                    "defaultValue": "new EventEmitter<Options>()",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "firstRadioButton",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "lastRadioButton",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "radioButton",
                    "type": "HTMLDivElement",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'radioButton'"
                        }
                    ]
                },
                {
                    "name": "radioButtons",
                    "type": "NodeListOf<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Insert the theme name on html component</p>\n",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "keydownEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        },
                        {
                            "name": "item",
                            "type": "Options"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "Options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "onSelectItem",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        },
                        {
                            "name": "selectedItem",
                            "type": "Options"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedItem",
                            "type": "Options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setChecked",
                    "args": [
                        {
                            "name": "item",
                            "type": "Options"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocus",
                    "args": [
                        {
                            "name": "currentItem",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentItem",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocusToNextItem",
                    "args": [
                        {
                            "name": "current",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocusToPreviousItem",
                    "args": [
                        {
                            "name": "current",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItems",
                    "args": [
                        {
                            "name": "item",
                            "type": "Options"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Options",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Radio</p>\n",
            "rawdescription": "Radio",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { KeyCode } from '../../enum';\nimport { Options } from '../../models/options';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * Radio\n *\n *\n *\n * @example\n * <ugl-radio [items]=\"radioItems\" (itemChecked)=\"getItemChecked($event)\" [radioGroupAriaLabel]=\"'Select an option'\">\n *\n * @example\n * this.radioItems = [new Options('Check1', '1', false, '#d71f3c', 'radios'),\n * new Options('Check2', '2', true, '#656565', 'radios'),\n * new Options('Check3', '3', false, '#656565', 'radios'),\n * new Options('Check4', '4', false, '#656565', 'radios')];\n */\n@Component({\n  selector: 'ugl-radio',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss']\n})\nexport class RadioComponent implements OnInit {\n\n  @Input() items: Options[];\n  @Input() radioGroupAriaLabel: string;\n  @Output() itemChecked = new EventEmitter<Options>();\n  @Input() disabled = false;\n\n  @ViewChild('radioButton') radioButton !: HTMLDivElement;\n\n  private radioButtons: NodeListOf<HTMLElement>;\n  private firstRadioButton = null;\n  private lastRadioButton = null;\n\n  /**\n   * Insert the theme name on html component\n   */\n  public theme: string;\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   */\n  constructor(private ugla: UglaService) {\n    this.theme = ugla.theme;\n  }\n\n  ngOnInit() {\n    if (this.disabled) {\n      this.theme = `${this.theme} disabled`;\n    }\n  }\n\n  ngDoCheck(): void {\n    // get all radio buttons in radiogroup\n    this.radioButtons = document.querySelectorAll('[role=radio]');\n\n    for (let i = 0; i < this.radioButtons.length; i++) {\n      if (!this.firstRadioButton) {\n        this.firstRadioButton = this.radioButtons[i];\n      }\n      this.lastRadioButton = this.radioButtons[i];\n    }\n    // set first item tabIndex = 0\n    if (this.firstRadioButton) {\n      this.firstRadioButton.tabIndex = 0;\n    }\n  }\n\n  setChecked(item: Options) {\n    this.itemChecked.emit(item);\n    this.updateItems(item);\n  }\n\n  private updateItems(item: Options) {\n    this.items.forEach(i => {\n      if (i.value === item.value) {\n        i.checked = true;\n      } else {\n        i.checked = false;\n      }\n    });\n  }\n\n  keydownEvent(event: KeyboardEvent, item: Options) {\n    const current = event.currentTarget;\n    const keyCode = event.code.toUpperCase();\n    let flag = false;\n\n    if (keyCode === KeyCode.SPACE || keyCode === KeyCode.RETURN) {\n      this.onSelectItem(event, item);\n    } else if (keyCode === KeyCode.UP) {\n      this.setFocusToPreviousItem(current);\n      flag = true;\n    } else if (keyCode === KeyCode.DOWN) {\n      this.setFocusToNextItem(current);\n      flag = true;\n    } else if (keyCode === KeyCode.LEFT) {\n      this.setFocusToPreviousItem(current);\n      flag = true;\n    } else if (keyCode === KeyCode.RIGHT) {\n      this.setFocusToNextItem(current);\n      flag = true;\n    }\n\n    if (flag) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n\n  onSelectItem(event: any, selectedItem: Options) {\n    const current = event.currentTarget;\n    this.setChecked(selectedItem);\n\n    if (current.getAttribute('aria-checked')) {\n      this.items.forEach(item => {\n        item.checked = item === selectedItem;\n      });\n    }\n  }\n\n  private setFocusToPreviousItem(current: any) {\n    let index: number;\n    if (current === this.firstRadioButton) {\n      this.setFocus(this.lastRadioButton);\n      return;\n    } else {\n      const radioButtonsArray = Array.prototype.slice.call(this.radioButtons);\n      index = radioButtonsArray.indexOf(current);\n      this.setFocus(radioButtonsArray[index - 1]);\n    }\n  }\n\n  private setFocusToNextItem(current: any) {\n    let index: number;\n    if (current === this.lastRadioButton) {\n      this.setFocus(this.firstRadioButton);\n    } else {\n      const radioButtonsArray = Array.prototype.slice.call(this.radioButtons);\n      index = radioButtonsArray.indexOf(current);\n      this.setFocus(radioButtonsArray[index + 1]);\n    }\n  }\n\n  private setFocus(currentItem: any) {\n    if (currentItem === null) {\n      return;\n    }\n    this.radioButtons.forEach(radio => {\n      radio.tabIndex = -1;\n    });\n\n    (currentItem as HTMLDivElement).focus();\n    currentItem.tabIndex = 0;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white.scss';\n@import './theme-colored.scss';\n",
                    "styleUrl": "./radio.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 253,
                    "end": 263,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 253,
                        "end": 254,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 254,
                        "end": 261,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-radio [items]=\"radioItems\" (itemChecked)=\"getItemChecked($event)\" [radioGroupAriaLabel]=\"'Select an option'\">"
                },
                {
                    "pos": 386,
                    "end": 396,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 386,
                        "end": 387,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 387,
                        "end": 394,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "this.radioItems = [new Options('Check1', '1', false, '#d71f3c', 'radios'),\nnew Options('Check2', '2', true, '#656565', 'radios'),\nnew Options('Check3', '3', false, '#656565', 'radios'),\nnew Options('Check4', '4', false, '#656565', 'radios')];"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1293,
                            "end": 1297,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 1287,
                            "end": 1292,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [attr.aria-label]=\"radioGroupAriaLabel\" class=\"radio-container\" role=\"radiogroup\">\n  <div #radioButton\n       (keydown)=\"keydownEvent($event, item)\"\n       *ngFor=\"let item of items; let idx = index\"\n       [attr.aria-checked]=\"item.checked\"\n       [id]=\"'row-' + idx\"\n       [ngClass]=\"theme\"\n       class=\"radio-item\"\n       role=\"radio\">\n    <input (click)=\"setChecked(item)\" [checked]=\"item.checked\" [id]=\"'radio-' + idx\" [name]=\"item.groupName\"\n          [value]=\"item.checked\"\n          [disabled]=\"disabled\"\n          [title]=\"item.description\"\n          [attr.aria-checked]=\"item.checked\"\n          tabindex=\"0\"\n          type=\"radio\">\n    <label [ngClass]=\"{'disabled' : disabled}\"\n      [attr.aria-checked]=\"item.checked\"\n      [for]=\"'radio-' + idx\"\n      aria-hidden=\"true\"\n      [title]=\"item.description\"\n      [ngStyle]=\"{'color': item.color}\">{{ item.description }}</label>\n  </div>\n</div>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-340a496faff6daa78c3f6e73943bde85",
            "file": "projects/ugla/src/lib/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataTitle",
                    "description": "<p>Set data-title attribute</p>\n<p>Default value: none</p>\n",
                    "line": 104,
                    "type": "string"
                },
                {
                    "name": "direction",
                    "defaultValue": "'bottom'",
                    "description": "<p>Direction to open list</p>\n<p>Default: bottom</p>\n",
                    "line": 125
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "description": "<p>Is disabled?</p>\n<p>Default value: false</p>\n",
                    "line": 97,
                    "type": "boolean"
                },
                {
                    "name": "invalid",
                    "description": "<p>Is invalid</p>\n<p>Default: false</p>\n",
                    "line": 143,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "description": "<p>Set label</p>\n",
                    "line": 67,
                    "type": "string"
                },
                {
                    "name": "message",
                    "description": "<p>Set message</p>\n",
                    "line": 72,
                    "type": "string"
                },
                {
                    "name": "messageRequired",
                    "description": "<p>Message for invalid selection</p>\n<p>Default: Form.REQUIRED</p>\n",
                    "line": 150,
                    "type": "string"
                },
                {
                    "name": "nextFocus",
                    "defaultValue": "\"\"",
                    "line": 164
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "description": "<p>Set a readonly mode</p>\n",
                    "line": 160
                },
                {
                    "name": "required",
                    "description": "<p>Is required</p>\n<p>Default: false</p>\n",
                    "line": 111,
                    "type": "boolean"
                },
                {
                    "name": "select",
                    "description": "<p>Set select object</p>\n",
                    "line": 62,
                    "type": "Select"
                },
                {
                    "name": "stylized",
                    "defaultValue": "false",
                    "description": "<p>Is stylized?</p>\n<p>Stylized is used only header</p>\n<p>Default value: false</p>\n",
                    "line": 81,
                    "type": "boolean"
                },
                {
                    "name": "stylizedType",
                    "defaultValue": "'header'",
                    "description": "<p>If is stylized, set a defined type</p>\n<p>Stylized type options: header or pagination</p>\n<p>Default value: header</p>\n",
                    "line": 90
                },
                {
                    "name": "truncateLength",
                    "description": "<p>Set a truncate length for the text.</p>\n",
                    "line": 155,
                    "type": "number"
                },
                {
                    "name": "width",
                    "line": 162,
                    "type": "string"
                },
                {
                    "name": "zindex",
                    "defaultValue": "2",
                    "description": "<p>Z-index of the field. Optional.</p>\n<p>Default: 2</p>\n",
                    "line": 118
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter()",
                    "description": "<p>Event on clicked option</p>\n",
                    "line": 136,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 181,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "checkbox",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "<p>Get a checkbox element under select list</p>\n",
                    "line": 130,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'checkbox'"
                        }
                    ]
                },
                {
                    "name": "classes",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Classes of the component</p>\n",
                    "line": 179,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "classGroup",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Classes list</p>\n",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "current",
                    "defaultValue": "{\n    description: '',\n    value: '',\n    checked: false,\n    color: ''\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "<p>Current values</p>\n",
                    "line": 203,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "firstItem",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 185,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isOpened",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 417
                },
                {
                    "name": "itemsList",
                    "type": "NodeListOf<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 184,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "lastItem",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 186,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "listenClick",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 213
                },
                {
                    "name": "originalBackgroundColor",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 210
                },
                {
                    "name": "originalMessage",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Original message</p>\n",
                    "line": 169,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "originalZindex",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 211
                },
                {
                    "name": "selectStyle",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>Style for select</p>\n",
                    "line": 174,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Receives theme&#39;s name</p>\n",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301
                },
                {
                    "name": "getTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 351
                },
                {
                    "name": "keydownEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 426,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 253
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "description": "<p>Set initials configurations</p>\n"
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 308
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274
                },
                {
                    "name": "selectedItem",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        },
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 323,
                    "description": "<p>Call selected event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6337,
                                "end": 6342,
                                "flags": 0,
                                "escapedText": "value"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 6331,
                                "end": 6336,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>input value</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6367,
                                "end": 6372,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "",
                            "tagName": {
                                "pos": 6361,
                                "end": 6366,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Event element</p>\n"
                        }
                    ]
                },
                {
                    "name": "setClass",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        },
                        {
                            "name": "backgroundColor",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 400,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "backgroundColor",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocus",
                    "args": [
                        {
                            "name": "current",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 419,
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocusToNextItem",
                    "args": [
                        {
                            "name": "current",
                            "type": "any"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 449,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFocusToPreviousItem",
                    "args": [
                        {
                            "name": "current",
                            "type": "any"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 441,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLabelColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 408
                },
                {
                    "name": "setSelect",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        },
                        {
                            "name": "labelColor",
                            "type": "",
                            "optional": true
                        },
                        {
                            "name": "backgroundColor",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 364,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelColor",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "backgroundColor",
                            "type": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCombobox",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 262,
                    "description": "<p>Toggles the combobox.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "truncateCurrentOption",
                    "args": [
                        {
                            "name": "currentOption",
                            "type": "Options"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 395,
                    "description": "<p>Generate current option.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8266,
                                "end": 8279,
                                "flags": 0,
                                "escapedText": "currentOption"
                            },
                            "type": "Options",
                            "tagName": {
                                "pos": 8260,
                                "end": 8265,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>past selected option</p>\n"
                        }
                    ]
                },
                {
                    "name": "truncateValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 382,
                    "description": "<p>Return a truncated value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7953,
                                "end": 7958,
                                "flags": 0,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 7947,
                                "end": 7952,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>input value</p>\n"
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "element",
                            "type": ""
                        },
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 337,
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "ev",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "description": "<p>Handles <code>Escape</code> key closing the dropdown, and arrow up/down focus to/from the dropdown list.</p>\n",
                    "line": 461
                }
            ],
            "description": "<p>Select</p>\n",
            "rawdescription": "Select",
            "type": "component",
            "sourceCode": "import { Component,\n        ElementRef,\n        EventEmitter,\n        HostListener,\n        Input,\n        OnDestroy,\n        OnInit,\n        Output,\n        Renderer2,\n        ViewChild,\n        OnChanges,\n        SimpleChanges } from '@angular/core';\nimport {Options, Select} from '../../models';\nimport {UglaService} from '../../ugla.service';\nimport {Form, KeyCode} from '../../enum';\n\n/**\n * Select\n *\n * @example\n * <ugl-select [select]=\"select\" (selectItemEmit)=\"yourFunction($event)\" [ngClass]=\"'header'\"></ugl-select>\n *\n * <ugl-select\n *   [label]=\"'Language'\"\n *   [select]=\"select\"\n *   [readonly]=\"true\"\n *   [message]=\"'Select your language'\"\n *   [dataTitle]=\"'Select an option'\"\n *   (selected)=\"selectLanguage($event)\">\n * </ugl-select>\n *\n * @example\n * public people = new People('PEOPLE NAME', 'LOGIN', 'IMAGE URL');\n *\n * @example\n * public select = new Select('language', [\n *  new Options('Select an option', '-1'),\n *  new Options('Portuguese PT-BR', 'pt_br', true, 'green'),\n *  new Options('English EN', 'en')\n * ], 'white', 'aquamarine');\n */\n@Component({\n  selector: 'ugl-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss']\n})\nexport class SelectComponent implements OnInit, OnDestroy, OnChanges {\n\n  /**\n   * Receives theme's name\n   */\n  public theme: string;\n\n  /**\n   * Classes list\n   */\n  public classGroup: string;\n\n  /**\n   * Set select object\n   */\n  @Input() select: Select;\n\n  /**\n   * Set label\n   */\n  @Input() label: string;\n\n  /**\n   * Set message\n   */\n  @Input() message: string;\n\n  /**\n   * Is stylized?\n   *\n   * Stylized is used only header\n   *\n   * Default value: false\n   */\n  @Input() stylized: boolean = false;\n\n  /**\n   * If is stylized, set a defined type\n   *\n   * Stylized type options: header or pagination\n   *\n   * Default value: header\n   */\n  @Input() stylizedType = 'header';\n\n  /**\n   * Is disabled?\n   *\n   * Default value: false\n   */\n  @Input() disabled: boolean = false;\n\n  /**\n   * Set data-title attribute\n   *\n   * Default value: none\n   */\n  @Input() dataTitle: string;\n\n  /**\n   * Is required\n   *\n   * Default: false\n   */\n  @Input() required: boolean;\n\n  /**\n   * Z-index of the field. Optional.\n   *\n   * Default: 2\n   */\n  @Input() zindex = 2;\n\n  /**\n   * Direction to open list\n   *\n   * Default: bottom\n   */\n  @Input() direction = 'bottom';\n\n  /**\n   * Get a checkbox element under select list\n   */\n  @ViewChild('checkbox') checkbox !: ElementRef;\n\n\n  /**\n   * Event on clicked option\n   */\n  @Output() selected = new EventEmitter();\n\n  /**\n   * Is invalid\n   *\n   * Default: false\n   */\n  @Input() invalid: boolean;\n\n  /**\n   * Message for invalid selection\n   *\n   * Default: Form.REQUIRED\n   */\n  @Input() messageRequired: string;\n\n  /**\n   * Set a truncate length for the text.\n   */\n  @Input() truncateLength: number;\n\n  /**\n   * Set a readonly mode\n   */\n  @Input() readonly = false;\n\n  @Input() width: string;\n\n  @Input() nextFocus = \"\";\n\n  /**\n   * Original message\n   */\n  public originalMessage: string;\n\n  /**\n   * Style for select\n   */\n  public selectStyle: {};\n\n  /**\n   * Classes of the component\n   */\n  public classes = '';\n\n  private _open = false;\n\n\n  private itemsList: NodeListOf<HTMLElement>;\n  private firstItem = null;\n  private lastItem = null;\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   * @param elementRef: ElementRef\n   * @param renderer: Render2\n   */\n  constructor(private ugla: UglaService,\n              protected elementRef: ElementRef,\n              private renderer: Renderer2) {\n    this.theme = this.ugla.theme;\n  }\n\n  /**\n   * Current values\n   */\n  public current = {\n    description: '',\n    value: '',\n    checked: false,\n    color: ''\n  };\n\n  originalBackgroundColor = '';\n  originalZindex;\n\n  listenClick: () => void;\n\n  /**\n   * Set initials configurations\n   */\n  ngOnInit() {\n    const checkedItem = this.select.options.findIndex((item) => item.checked);\n\n    this.current = this.truncateCurrentOption(this.select.options[0]);\n    if (checkedItem > -1) {\n      this.current = this.truncateCurrentOption(this.select.options[checkedItem]);\n    }\n\n    this.originalBackgroundColor = this.select.labelBackgroundColor;\n\n    this.setLabelColor();\n\n    this.originalMessage = this.message;\n    this.messageRequired = (this.messageRequired !== undefined) ? this.messageRequired : Form.REQUIRED;\n    this.originalZindex = this.zindex;\n    this.classes = `${this.theme} ${this.select.labelColor ? 'no-margin' : ''} ${this.readonly ? 'readonly' : ''}`;\n  }\n\n  ngDoCheck(): void {\n    this.itemsList = document.querySelectorAll(`#form-select-${this.select.name} [role=option]`);\n    \n    if (this.itemsList.length > 0) {\n      this.firstItem = this.itemsList[0];\n      this.lastItem = this.itemsList[this.itemsList.length - 1];\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const SELECT = 'select';\n\n    if (changes[SELECT]) {\n      this.select = changes.select.currentValue;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.listenClick) {\n      this.listenClick();\n    }\n  }\n\n  /**\n   * Toggles the combobox.\n   */\n  toggleCombobox(event) {\n    if (!this.readonly) {\n      if (event.keyCode === 13 || event.keyCode === 32 || event.type === 'click') {\n        if (!this._open) {\n          this.open();\n        } else {\n          this.close();\n        }\n      }\n    }\n  }\n\n  open() {\n    if (this._open) {\n      return;\n    }\n\n    this.listenClick = this.renderer.listen('window', 'click', (evt) => {\n      if (!this.elementRef.nativeElement.contains(evt.target)) {\n        this.close();\n      }\n    });\n\n    this._open = true;\n\n    if (!this.disabled) {\n      if (this.zindex === 5) {\n        this.zindex = this.originalZindex;\n      } else {\n        this.zindex = 5;\n      }\n    }\n\n    setTimeout(() => {\n      this.checkbox.nativeElement.checked = true;\n      this.setFocus(this.firstItem.querySelector('label'));\n    }, 0);\n  }\n\n  close() {\n    this._open = false;\n    this.zindex = this.originalZindex;\n    this.listenClick(); // destroy event listener\n    setTimeout(() => this.checkbox.nativeElement.checked = false, 0);\n  }\n\n  onClick() {\n    if (!this.disabled) {\n      if (this.zindex === 5) {\n        this.zindex = this.originalZindex;\n      } else {\n        this.zindex = 5;\n      }\n    }\n  }\n\n  /**\n   * Call selected event\n   * @param value input value\n   * @param event Event element\n   */\n  selectedItem(value, event) {\n    if (event.keyCode === 13 || event.keyCode === 32 || event.keyCode === undefined) {\n      this.current = this.truncateCurrentOption(this.select.options[value]);\n\n      this.setLabelColor();\n\n      this.checkbox.nativeElement.checked = false;\n      this.checkbox.nativeElement.nextSibling.focus();\n      this.validate(this.checkbox.nativeElement, value);\n      this.selected.emit(this.current);\n      this.close();\n    }\n  }\n\n  validate(element, value) {\n    if (value === 0 && this.required) {\n      this.message = this.messageRequired;\n\n      element.classList.remove('valid');\n      element.classList.add('invalid');\n    } else {\n      if (!this.invalid) {\n        element.classList.remove('invalid');\n      }\n      this.message = this.originalMessage;\n    }\n  }\n\n  getTheme() {\n    let theme = this.theme;\n    if (this.stylized) {\n      theme = `${theme} ${this.stylizedType}`;\n    }\n\n    if (this.readonly) {\n      theme = `${theme} readonly`;\n    }\n\n    return theme;\n  }\n\n  setSelect(value, labelColor?, backgroundColor?) {\n    setTimeout(() => {\n      this.select.labelColor = (labelColor) ? labelColor : this.select.labelColor;\n      this.select.labelBackgroundColor = (backgroundColor) ? backgroundColor : this.select.labelBackgroundColor;\n      this.select.options.forEach(((item) => {\n        item.checked = false;\n        if (item.value === String(value)) {\n          item.checked = true;\n          this.current = item;\n        }\n      }).bind(this));\n    });\n  }\n\n  /**\n   * Return a truncated value.\n   * @param value input value\n   */\n  truncateValue(value: string) {\n    const ending = '...';\n    if (this.truncateLength && value.length > this.truncateLength) {\n      return value.substring(0, this.truncateLength - ending.length) + ending;\n    }\n    return value;\n  }\n\n  /**\n   * Generate current option.\n   *\n   * @param currentOption past selected option\n   */\n  truncateCurrentOption(currentOption: Options) {\n    const currentDescription: string = this.truncateValue(currentOption.description);\n    return new Options(currentDescription, currentOption.value, currentOption.checked, currentOption.color);\n  }\n\n  setClass(color: string, backgroundColor: string) {\n    const classColor = color ? `color-${color}` : '';\n    const classBackgroundcolor = backgroundColor ? `background-${backgroundColor}` : '';\n    const classCustom = color ? 'custom' : '';\n    const classComboSelected = 'combo-selected';\n    return `${classComboSelected} ${classColor} ${classBackgroundcolor} ${classCustom} `;\n  }\n\n  setLabelColor() {\n    this.select.labelColor = this.current.color;\n    if (this.current.value !== '-1') {\n      this.select.labelBackgroundColor = 'white';\n    } else {\n      this.select.labelBackgroundColor = this.originalBackgroundColor;\n    }\n  }\n\n  isOpened = () => this._open;\n\n  setFocus(current: any) {\n    if (current === null) {\n      return;\n    }\n    (current as HTMLDivElement).focus();\n  }\n\n  keydownEvent(event: KeyboardEvent, index: number) {\n    const current = this.itemsList[index];\n    const keyCode = event.code.toUpperCase();\n\n    if (keyCode === KeyCode.UP) {\n      this.setFocusToPreviousItem(current, index);\n    } else if (keyCode === KeyCode.DOWN) {\n      this.setFocusToNextItem(current, index);\n    } else if (keyCode === KeyCode.TAB) {\n      const nextFocus = document.querySelector(this.nextFocus);\n      (nextFocus as HTMLDivElement).focus()\n      this.close();\n    }\n  }\n\n  private setFocusToPreviousItem(current: any, index: number) {\n    if (current === this.firstItem) {\n      this.setFocus(this.lastItem.querySelector('label'))\n    } else {\n      this.setFocus(this.itemsList[index - 1].querySelector('label'));\n    }\n  }\n\n  private setFocusToNextItem(current: any, index: number) {\n    if (current === this.lastItem) {\n      this.setFocus(this.firstItem.querySelector('label'))\n    } else {\n      this.setFocus(this.itemsList[index + 1].querySelector('label'));\n    }\n  }\n\n  /**\n   * Handles `Escape` key closing the dropdown, and arrow up/down focus to/from the dropdown list.\n   */\n  @HostListener('keydown', ['$event'])\n  hostkeys(ev: KeyboardEvent) {\n    const key = ev.code.toUpperCase();\n\n    if (key === KeyCode.ESC) {\n      this.close();\n    } else if (this.elementRef && this.elementRef.nativeElement.contains(ev.target)) {\n      ev.stopPropagation();\n      if (key === KeyCode.DOWN || ev.key === 'Down') {\n        if (!this.readonly) {\n          this.open();\n        }\n      } else {\n        this.toggleCombobox(ev);\n      }\n    } else if (key === KeyCode.TAB) {\n      const nextFocus = document.querySelector(this.nextFocus);\n      (nextFocus as HTMLDivElement).focus()\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white.scss';\n@import './theme-colored.scss';\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 410,
                    "end": 420,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 410,
                        "end": 411,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 411,
                        "end": 418,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-select [select]=\"select\" (selectItemEmit)=\"yourFunction($event)\" [ngClass]=\"'header'\"></ugl-select>\n\n<ugl-select\n[label]=\"'Language'\"\n[select]=\"select\"\n[readonly]=\"true\"\n[message]=\"'Select your language'\"\n[dataTitle]=\"'Select an option'\"\n(selected)=\"selectLanguage($event)\">\n</ugl-select>"
                },
                {
                    "pos": 760,
                    "end": 770,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 760,
                        "end": 761,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 761,
                        "end": 768,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "public people = new People('PEOPLE NAME', 'LOGIN', 'IMAGE URL');"
                },
                {
                    "pos": 843,
                    "end": 853,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 843,
                        "end": 844,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 844,
                        "end": 851,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "public select = new Select('language', [\nnew Options('Select an option', '-1'),\nnew Options('Portuguese PT-BR', 'pt_br', true, 'green'),\nnew Options('English EN', 'en')\n], 'white', 'aquamarine');"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    },
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 186,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3345,
                            "end": 3349,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 3339,
                            "end": 3344,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3375,
                            "end": 3385,
                            "flags": 0,
                            "escapedText": "elementRef"
                        },
                        "type": "ElementRef",
                        "tagName": {
                            "pos": 3369,
                            "end": 3374,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ElementRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 3410,
                            "end": 3418,
                            "flags": 0,
                            "escapedText": "renderer"
                        },
                        "type": "Renderer2",
                        "tagName": {
                            "pos": 3404,
                            "end": 3409,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: Render2</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "templateData": "<!--Stylized  -->\n<div *ngIf=\"stylized\" \n      class=\"select\"\n      [attr.aria-expanded]=\"isOpened()\"\n      [attr.aria-label]=\"label\"\n      [ngClass]=\"getTheme()\"\n      [id]=\"'form-select-' + select.name\" \n      [attr.aria-readonly]=\"readonly\" \n      [ngStyle]=\"{'width': width}\">\n  <input type=\"checkbox\" [ngClass]=\"{'required' : this.required}\" [name]=\"select.name\" [id]=\"select.id\" #checkbox [readOnly]=\"readonly\">\n  <label class=\"selected\" [for]=\"select.id\" [attr.data-label]=\"label\" tabindex=\"0\" (click)=\"toggleCombobox($event)\">{{ current.description }}</label>\n  <i class=\"material-icons\" aria-hidden=\"true\" (click)=\"toggleCombobox($event)\">keyboard_arrow_down</i>\n\n  <ul class=\"select_list\" [ngClass]=\"direction\" [attr.data-title]=\"dataTitle\">\n    <li *ngFor=\"let option of select.options; let i = index\" role=\"option\" [attr.aria-selected]=\"option.checked\">\n      <input type=\"radio\" [name]=\"'options-' + select.name\" [id]=\"'option-' + select.name + '-' + i\" (change)=\"selectedItem( i, $event )\" [value]=\"option.value\">\n      <label [for]=\"'option-' + select.name + '-' + i\" \n              (keypress)=\"selectedItem( i, $event )\" \n              (keydown)=\"keydownEvent($event, i)\" \n              [attr.aria-checked]=\"option.checked\"\n              tabindex=\"0\">{{ option.description }}</label>\n    </li>\n  </ul>\n</div>\n\n<!-- Not stylized  -->\n<div *ngIf=\"!stylized\"\n     [attr.aria-expanded]=\"isOpened()\"\n     [attr.aria-label]=\"label\"\n     [attr.aria-readonly]=\"readonly\" [id]=\"'form-select-' + select.name\"\n     [ngClass]=\"classes\"\n     [ngStyle]=\"{'z-index': zindex }\"\n     class=\"field combo\" role=\"listbox\">\n  <input type=\"checkbox\" [ngClass]=\"{'required' : this.required}\" [disabled]=\"disabled\" [name]=\"select.name\"\n         [id]=\"select.id\" #checkbox [readOnly]=\"readonly\">\n  <label class=\"selected\" [ngClass]=\"setClass(select.labelColor, select.labelBackgroundColor)\" [for]=\"select.id\"\n         [attr.data-label]=\"label\" tabindex=\"0\" (click)=\"toggleCombobox($event)\">{{ current.description }}</label>\n  <i class=\"material-icons\" aria-hidden=\"true\" (click)=\"toggleCombobox($event)\">keyboard_arrow_down</i>\n\n  <div class=\"infos\">\n    <span class=\"infos__message\">{{ message }}</span>\n  </div>\n  <ul id=\"combo-list\" class=\"combo-list\" [ngClass]=\"direction\">\n    <li *ngFor=\"let option of select.options; let i = index\" role=\"option\" [attr.aria-selected]=\"option.checked\">\n      <input type=\"radio\" [name]=\"'options-' + select.name\" [id]=\"'option-' + select.name + '-' + i\"\n             (change)=\"selectedItem( i, $event )\" [value]=\"option.value\" [checked]=\"option.checked\">\n      <label [for]=\"'option-' + select.name + '-' + i\" \n              (keypress)=\"selectedItem( i, $event )\"\n              (keydown)=\"keydownEvent($event, i)\"\n              [attr.aria-checked]=\"option.checked\"\n              tabindex=\"0\">{{ option.description }}</label>\n    </li>\n  </ul>\n</div>\n"
        },
        {
            "name": "SimpleTableComponent",
            "id": "component-SimpleTableComponent-545c53f9ca0a2448dfa5107f015376e3",
            "file": "projects/ugla/src/lib/components/tables/simple-table/simple-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-simple-table",
            "styleUrls": [
                "./simple-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./simple-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "noDataMessage",
                    "defaultValue": "'No data found.'",
                    "description": "<p>Property to receive the message for empty list.\nDefault: No data found.</p>\n",
                    "line": 32
                },
                {
                    "name": "style",
                    "description": "<p>Property to receive the style of the table\ncould be: fixed central o empty.</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "table",
                    "line": 20,
                    "type": "Table"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classes",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "setClass",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        },
                        {
                            "name": "align",
                            "type": "string"
                        },
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "align",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Table } from '../../../models';\nimport { UglaService } from '../../../ugla.service';\n\n\n/**\n * @example\n * <ugl-simple-table\n *  [style]=\"'fixed'\"\n *  [table]=\"table\">\n * </ugl-simple-table>\n */\n@Component({\n  selector: 'ugl-simple-table',\n  templateUrl: './simple-table.component.html',\n  styleUrls: ['./simple-table.component.scss']\n})\nexport class SimpleTableComponent implements OnInit {\n\n  @Input() table: Table;\n\n  /**\n   * Property to receive the style of the table\n   * could be: fixed central o empty.\n   */\n  @Input() style: string;\n\n  /**\n   * Property to receive the message for empty list.\n   * Default: No data found.\n   */\n  @Input() noDataMessage = 'No data found.';\n\n  classes: string;\n\n  public theme: string;\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   */\n  constructor(private ugla: UglaService) {\n    this.theme = this.ugla.theme;\n  }\n\n  ngOnInit() {\n    this.classes = this.style ? `${this.theme} ${this.style}` : this.theme;\n  }\n\n  setClass(color: string, align: string, type: string) {\n    const classColor = color ? `color-${color}` : '';\n    const classAlign = align ? `align-${align}` : '';\n    const classType = type ? type : '';\n    return `${classColor} ${classAlign} ${classType} `;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n",
                    "styleUrl": "./simple-table.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 161,
                    "end": 171,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 161,
                        "end": 162,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 162,
                        "end": 169,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-simple-table\n[style]=\"'fixed'\"\n[table]=\"table\">\n</ugl-simple-table>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 848,
                            "end": 852,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 842,
                            "end": 847,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<table [ngClass]=\"classes\" [id]=\"'table-'+table.name\" class=\"base-table need-filter\">\n  <colgroup>\n    <col *ngFor=\"let header of table.header\" [ngClass]=\"'align-' + header.align\" [width]=\"header.size + '%'\">\n  </colgroup>\n\n  <thead>\n    <tr>\n      <th scope=\"col\" tabindex=\"0\" *ngFor=\"let item of table.header\" [ngClass]=\"'align-' + item.align\" [ngStyle]=\"{'width': item.size + '%'}\">{{ item.text }}</th>\n    </tr>\n  </thead>\n\n  <tbody>\n    <tr *ngFor=\"let data of table.data\">\n      <td tabindex=\"0\" *ngFor=\"let column of data.columns; let i = index\" [ngClass]=\"setClass(column.options.color, column.options.align, column.options.type)\" [ngStyle]=\"{'width': table.header[i].size + '%'}\">{{ column.text }}</td>\n    </tr>\n    <tr *ngIf=\"table.data.length === 0\">\n      <td [attr.colspan]=\"table.header.length\" class=\"align-center\">\n          {{noDataMessage}}\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
        },
        {
            "name": "SwitchComponent",
            "id": "component-SwitchComponent-e5e5502f1e444a52a8821ce7b592e075",
            "file": "projects/ugla/src/lib/components/switch/switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-switch",
            "styleUrls": [
                "./switch.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./switch.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "description": "<p>Is checked?</p>\n<p>Default: false</p>\n",
                    "line": 50
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "description": "<p>Is disabled?</p>\n<p>Default: false</p>\n",
                    "line": 43
                },
                {
                    "name": "labelOff",
                    "description": "<p>Input label off.</p>\n",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "labelOn",
                    "description": "<p>Input label on.</p>\n",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "name",
                    "description": "<p>Input name. It&#39;s used on id too</p>\n",
                    "line": 26,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeValue",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "description": "<p>Event emitter to value changes</p>\n",
                    "line": 56,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "description": "<p>Executed when value of checkbox is changed. Emits onChangeValue output.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1124,
                                "end": 1129,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "type": "any",
                            "tagName": {
                                "pos": 1118,
                                "end": 1123,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>of Element</p>\n"
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Switch component</p>\n<p>This component genate a checkbox in switch style</p>\n",
            "rawdescription": "Switch component\n\nThis component genate a checkbox in switch style",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n/**\n * Switch component\n *\n * This component genate a checkbox in switch style\n *\n * @example\n * <ugl-switch\n *   [labelOn]=\"'On'\"\n *   [labelOff]=\"'Off'\"\n *   [name]=\"'switch'\"\n *   [disabled]=\"true\"\n *   [checked]=\"true\"></ugl-switch>\n */\n@Component({\n  selector: 'ugl-switch',\n  templateUrl: './switch.component.html',\n  styleUrls: ['./switch.component.scss']\n})\nexport class SwitchComponent {\n\n  /**\n   * Input name. It's used on id too\n   */\n  @Input() name: string;\n\n  /**\n   * Input label on.\n   */\n  @Input() labelOn: string;\n\n  /**\n   * Input label off.\n   */\n  @Input() labelOff: string;\n\n  /**\n   * Is disabled?\n   *\n   * Default: false\n   */\n  @Input() disabled = false;\n\n  /**\n   * Is checked?\n   *\n   * Default: false\n   */\n  @Input() checked = false;\n\n  /**\n   * Event emitter to value changes\n   */\n  // TODO: Fix this by TS Lint rules\n  @Output() onChangeValue = new EventEmitter<boolean>();\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * Executed when value of checkbox is changed. Emits onChangeValue output.\n   * @param event of Element\n   */\n  onChange(event: any) {\n    this.checked = event.target.checked;\n    this.onChangeValue.emit(event.target.checked);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n.switch {\n  margin: 5px 0;\n\n  input[type=checkbox] {\n    opacity: 0;\n    position: absolute;\n    left: -9999px;\n\n    + label {\n      position: relative;\n      display: inline-block;\n      width: 40px;\n      height: 20px;\n      border-radius: 30px;\n      vertical-align: middle;\n      cursor: pointer;\n      background-color: color(_red, medium);\n      transition: .5s all;\n\n      &:before {\n        position: absolute;\n        content: '';\n        display: block;\n        width: 14px;\n        height: 14px;\n        top: 2.5px;\n        left: 3px;\n        background-color: color(_others, light);\n        border-radius: 100%;\n        transition: .5s all;\n      }\n    }\n\n    &:checked {\n      +label {\n        background-color: color(_aquamarine, medium);;\n        transition: .5s all;\n\n        &:before {\n          left: 23px;\n          transition: .5s all;\n        }\n      }\n    }\n\n\n\n    &:disabled {\n      +label {\n        opacity: .6;\n        cursor: default;\n      }\n    }\n  }\n\n  .label {\n    color: color(_others, dark);\n    font-size: 0.875rem;\n    vertical-align: middle;\n\n    @include mobile() {\n      font-size: 1rem;\n    }\n\n    &.off {\n      padding-right: 15px;\n    }\n\n    &.on {\n      padding-left: 15px;\n    }\n  }\n}\n",
                    "styleUrl": "./switch.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 158,
                    "end": 168,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 158,
                        "end": 159,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 159,
                        "end": 166,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-switch\n[labelOn]=\"'On'\"\n[labelOff]=\"'Off'\"\n[name]=\"'switch'\"\n[disabled]=\"true\"\n[checked]=\"true\"></ugl-switch>"
                }
            ],
            "templateData": "<div class=\"switch\">\n  <span class=\"label off\">{{ labelOff }}</span>\n  <input\n    tabindex=\"0\"\n    type=\"checkbox\"\n    [name]=\"name\"\n    [id]=\"'switch-' + name\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    (change)=\"onChange($event)\">\n  <label [for]=\"'switch-' + name\"></label>\n  <span class=\"label on\">{{ labelOn }}</span>\n</div>\n"
        },
        {
            "name": "TabComponent",
            "id": "component-TabComponent-4efe0f1e9ccb6c380ec05b1e9ceef0c6",
            "file": "projects/ugla/src/lib/components/tabs/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-tab",
            "styleUrls": [
                "./tab.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "line": 11
                },
                {
                    "name": "title",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ugl-tab',\n  templateUrl: './tab.component.html',\n  styleUrls: ['./tab.component.scss']\n})\nexport class TabComponent implements OnInit {\n\n  @Input() title: string;\n  @Input() active = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pane {\n  padding: 1em;\n}\n",
                    "styleUrl": "./tab.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [hidden]=\"!active\" class=\"pane\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-c228ed97ee0c9bfea94d89bc5cb3a32e",
            "file": "projects/ugla/src/lib/components/tabs/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "style",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "tabFixedWidth",
                    "line": 18,
                    "type": "number"
                },
                {
                    "name": "tabMinWidth",
                    "line": 17,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "edgeTabWidth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "groupClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tabClientWidth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tabs",
                    "type": "QueryList<TabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TabComponent"
                        }
                    ]
                },
                {
                    "name": "tabsListElement",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabsListElement'"
                        }
                    ]
                },
                {
                    "name": "tabWidth",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateWidths",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "TabComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "TabComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ContentChildren, QueryList, AfterContentInit, ElementRef, Input, ViewChild, OnChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AsideService } from '../../aside/aside.service';\nimport { TabComponent } from '../tab/tab.component';\n\n@Component({\n  selector: 'ugl-tabs',\n  templateUrl: './tabs.component.html',\n  styleUrls: ['./tabs.component.scss'],\n  host: {'(window:resize)' : 'onResize($event)'}\n})\nexport class TabsComponent implements OnInit, AfterContentInit  {\n\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\n\n  @Input() style: string;\n  @Input() tabMinWidth: number;\n  @Input() tabFixedWidth: number;\n\n  @ViewChild('tabsListElement') tabsListElement: ElementRef;\n\n  tabWidth: string;\n  edgeTabWidth: string;\n  tabClientWidth: number;\n\n  public groupClass = '';\n\n  ngAfterContentInit() {\n    let activeTabs = this.tabs.filter((tab)=>tab.active);\n    if (activeTabs.length === 0) {\n      this.selectTab(this.tabs.first);\n    }\n  }\n\n  selectTab(tab: TabComponent) {\n    this.tabs.toArray().forEach(tab => tab.active = false);\n    tab.active = true;\n  }\n\n  constructor(private asideService: AsideService) { }\n\n  ngOnInit() {\n    this.style = this.style;\n    this.groupClass = `${this.style}`;\n    setTimeout(()=> this.calculateWidths());\n    this.asideService.toggledSubject.asObservable().subscribe(() => this.calculateWidths());\n  }\n\n  public calculateWidths(){\n    const qty = this.tabs.length;\n    const defaultMaxWidth = 700;\n    const defaultMinTabSize = window.innerWidth < defaultMaxWidth ? 550 : 80;\n    const minWidth = this.tabMinWidth || defaultMinTabSize;\n    this.tabClientWidth = this.tabsListElement.nativeElement.clientWidth;\n    const availableWidth = this.tabClientWidth - 45;\n\n    if (window.innerWidth >= defaultMaxWidth){\n      if (qty * minWidth > availableWidth){\n        this.tabWidth = `${minWidth}px`;\n        this.edgeTabWidth = `${minWidth}px`;\n      } else {\n        const width = Math.floor(availableWidth / qty);\n        const edge = width + (availableWidth - (width * qty))/2;\n        this.tabWidth = `${width}px`;\n        this.edgeTabWidth = `${edge}px`;\n      }\n    } else {\n      if (qty * minWidth < availableWidth){\n        this.tabWidth = `${minWidth}px`;\n        this.edgeTabWidth = `${minWidth}px`;\n      }\n    }\n  }\n\n  onResize(event) {\n    if (this.tabClientWidth !== this.tabsListElement.nativeElement.clientWidth) {\n      this.calculateWidths();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul.topnav {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n  background-color: hsl(183, 72%, 45%);\n  text-align: center;\n\n  &.border {\n    border-radius: 50px !important;\n    padding-top: 10px;\n    padding-bottom: 10px;\n  }\n}\n\nul.topnav li {\n  display: inline-block;\n  margin: 0px 4px\n}\n\nul.topnav.border li {\n  display: inline-block;\n  margin: 0px 4px\n}\n\nul.topnav li a {\n  display: block;\n  color: white;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n}\n\nli:not(.active) {\n  border-style: solid;\n  border-width: thin;\n  border-color: whitesmoke;\n  border-radius: 8rem;\n}\n\nul.topnav li.active {\n  background-color: #1DACB4;\n  border-radius: 8rem;\n}\n\nul.topnav li:hover:not(.active) {background-color: #20BEC6;}\n\nul.topnav li.right {float: right;}\n\n@media screen and (max-width: 700px) {\n  ul.topnav li.right,\n  ul.topnav li {float: none;}\n}\n",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "asideService",
                        "type": "AsideService"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "asideService",
                        "type": "AsideService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterContentInit"
            ],
            "templateData": "<ul [ngClass]=\"groupClass\" class=\"topnav\" #tabsListElement>\n  <li *ngFor=\"let tab of tabs\" (click)=\"selectTab(tab)\" [class.active]=\"tab.active\"\n      [ngStyle]=\"{'width': tab === 0 || tab === tabs.length + 1 ? tabWidth : edgeTabWidth}\">\n    <a>{{tab.title}}</a>\n  </li>\n</ul>\n<ng-content></ng-content>\n"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-fb3655ccda844d812fde1a2d1ce88ed4",
            "file": "projects/ugla/src/lib/components/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-toast",
            "styleUrls": [
                "./toast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "type": "Message[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "i",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "message",
                            "type": "Message"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Message",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit} from '@angular/core';\nimport { Message, ToastService, NotificationCommand } from './toast.service';\nimport { remove } from 'lodash';\n\n@Component({\n  selector: 'ugl-toast',\n  templateUrl: './toast.component.html',\n  styleUrls: ['./toast.component.scss']\n})\nexport class ToastComponent implements OnInit {\n\n  messages: Message[] = [];\n\n  constructor(private toastService: ToastService) {}\n\n  ngOnInit() {\n    this.toastService.getEmitter().subscribe(notificationEvent => {\n\n      if (notificationEvent.command === NotificationCommand.SET) {\n        this.show(notificationEvent.notification);\n      } else if (notificationEvent.command === NotificationCommand.CLOSE) {\n        this.close(notificationEvent.notification.id);\n      } else if (notificationEvent.command === NotificationCommand.CLEAR_ALL) {\n        this.closeAll();\n      }\n    });\n  }\n\n  show(message: Message) {\n    if (message.cleanOld) {\n      this.closeAll();\n    }\n    const elementId = message.id || Math.random().toString(36).substring(3);\n    this.messages.push(message);\n    message.id = elementId;\n  }\n\n  close(i: string) {\n    remove(this.messages, this.messages.find((not) => {\n      not.triggerOnHidden();\n      return (not.id === i);\n    }));\n  }\n\n  closeAll() {\n    this.messages = [];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n\n.notification___container {\n  pointer-events: none;\n  position: fixed;\n  z-index: 999999;\n  top: 90px;\n  right: 0;\n}\n\n/* Mobile */\n@include mobile() {\n  .notification___container {\n    top: 40px;\n    left: 0;\n    right: 0;\n  }\n}\n",
                    "styleUrl": "./toast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "toastService",
                        "type": "ToastService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"notification___container\">\n  <ng-container *ngFor=\"let message of messages | reverse; index as i\">\n    <ugl-toast-item (onShow)=\"message.triggerOnShow($event)\" (close)=\"close(message.id)\" [index]=\"i\" [messageType]=\"message.type\" [message]=\"message\"\n    ></ugl-toast-item>\n  </ng-container>\n</div>\n\n\n\n"
        },
        {
            "name": "ToastItemComponent",
            "id": "component-ToastItemComponent-60dccfd9a7cc2de28a89f3f8796d4fa8",
            "file": "projects/ugla/src/lib/components/toast/toast-item/toast-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-toast-item",
            "styleUrls": [
                "./toast-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toast-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "index",
                    "line": 24,
                    "type": "number"
                },
                {
                    "name": "message",
                    "line": 13
                },
                {
                    "name": "messageType",
                    "line": 22,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter()",
                    "line": 26,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_message",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isClosing",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isOpened",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "timeout",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "autoClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "closeToast",
                    "args": [
                        {
                            "name": "messageId",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "messageId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ElementRef, AfterViewInit } from '@angular/core';\n\n@Component({\n  selector: 'ugl-toast-item',\n  templateUrl: './toast-item.component.html',\n  styleUrls: ['./toast-item.component.scss']\n})\nexport class ToastItemComponent implements OnInit, AfterViewInit {\n\n  private _message: any;\n\n  @Input()\n  get message() {\n    return this._message;\n  }\n\n  set message(newMessage) {\n    if (this._message === newMessage) { return; }\n    this._message = newMessage;\n  }\n\n  @Input() messageType: string;\n\n  @Input() index: number;\n\n  @Output() close: EventEmitter<any> = new EventEmitter();\n\n  // TODO: Fix this by TS Lint rules\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n  icon: string;\n  isOpened: boolean;\n  isClosing = false;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnInit() {\n\n    switch (this.messageType) {\n      case 'success':\n        this.icon = 'check_circle_outline';\n        break;\n      case 'error':\n        this.icon = 'highlight_off';\n        break;\n      case 'warning':\n        this.icon = 'error_outline';\n        break;\n      default:\n        this.icon = 'info_outline';\n    }\n\n    this.isOpened = !this.isClosing;\n    this.autoClose();\n  }\n\n  closeToast(messageId) {\n    this.isClosing = true;\n    this.isOpened = false;\n    clearTimeout(this.timeout);\n    this.close.emit(messageId);\n  }\n\n  autoClose() {\n    if (this.message.timeout) {\n      this.timeout = setTimeout(() => {\n        this.closeToast(this.message.id);\n      }, (this.message.timeout));\n    }\n  }\n\n  ngAfterViewInit() {\n    (this.element.nativeElement as HTMLDivElement).querySelector<HTMLBodyElement>(`#toastTitle`).focus();\n    this.onShow.emit(this.element);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../sass/index';\n\n/* The alert message box */\n.toast__container {\n  position: relative;\n  width: auto;\n  min-width: 365px;\n  margin: 0 0 16px 16px;\n  border-radius: 5px 0 0 5px;\n\n  @media print {\n    display: none;\n  }\n}\n\n.toast {\n  @include cross-browser(box-shadow, 2px 2px 5px color(_others, shadow));\n  position: relative;\n  padding: 6px 24px 6px 56px;\n  pointer-events: auto;\n  border-radius: 5px 0 0 5px;\n\n  h2 {\n    font-size: 1rem;\n    font-weight: 600;\n    margin-bottom: 0;\n    margin-top: 0;\n  }\n\n  p {\n    margin-top: 0;\n    margin-bottom: 0;\n    font-size: .875rem;\n  }\n}\n\n.info {\n  background-color: color(_aquamarine, 'medium');\n\n  h2,\n  p,\n  i {\n    color: color(_others, light);\n  }\n}\n\n.error {\n  background-color: color(_red, 'medium');\n\n  h2,\n  p,\n  i {\n    color: color(_others, light);\n  }\n}\n\n.success {\n  background-color: color(_green, 'medium');\n\n  h2,\n  p,\n  i {\n    color: color(_others, light);\n  }\n}\n\n.warning {\n  background-color: color(_yellow, 'medium');\n\n  h2,\n  p,\n  i {\n    color: color(_others, light);\n  }\n}\n\n/* The close button */\n.toast__close {\n  outline: none;\n  float: right;\n  cursor: pointer;\n  position: absolute;\n  top: 1px;\n  right: 1px;\n  border: 0;\n  width: 25px;\n  height: 25px;\n  padding: 0.4em;\n  -webkit-appearance: none;\n  background: transparent;\n\n  i {\n    font-size: 1.5em;\n    color: color(_others, light);\n  }\n\n  /* When moving the mouse over the close button */\n  &:hover {\n    background: rgba(0, 0, 0, 0.08);\n    border-radius: 50px;\n    transition: background 0s;\n  }\n\n  &:active {\n    transition: background 0.8s;\n    background: rgba(0, 0, 0, 0.16);\n  }\n}\n\n.toast__icon {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 48px;\n  height: 100%;\n  overflow: hidden;\n\n  i {\n    font-size: 88px;\n    margin-left: -35px;\n    margin-top: -20px;\n  }\n}\n\n/* Opening animation */\n.toast--show {\n  animation-duration: 1s;\n  animation-name: toastshow;\n  animation-iteration-count: 1;\n}\n\n/* Closing animation */\n.toast--hide {\n  animation-duration: 1s;\n  animation-name: toasthide;\n  animation-iteration-count: 1;\n}\n\n@keyframes toastshow {\n  from {\n    opacity: 0;\n    transform: translateX(365px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes toasthide {\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(365px);\n  }\n}\n\n/* Mobile */\n@include mobile() {\n  .toast__container {\n    margin: 0 0 8px;\n    min-width: unset;\n    width: 100%;\n  }\n\n  .toast {\n    @include cross-browser(border-radius, 0);\n    height: 100%;\n  }\n}\n",
                    "styleUrl": "./toast-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "accessors": {
                "message": {
                    "name": "message",
                    "setSignature": {
                        "name": "message",
                        "type": "void",
                        "args": [
                            {
                                "name": "newMessage",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "newMessage",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div [ngClass]=\"{'success': message.type === 'success', 'error': message.type === 'error',\n  'warning': message.type === 'warning', 'info': message.type === 'info', 'toast--show': isOpened, 'toast--hide': isClosing}\"\n     aria-describedby=\"toastDescription\" \n     aria-labelledby=\"toastTitle\" \n     role=\"alertdialog\"\n     aria-modal=\"true\"\n     class=\"toast__container\"\n     (click)=\"closeToast(message.id)\">\n  <div class=\"toast\" role=\"document\" id=\"toast-item-{{message.id}}\" tabindex=\"0\">\n    <div class=\"toast__icon\">\n      <i class=\"material-icons\" aria-hidden=\"true\">{{icon}}</i>\n    </div>\n    <h2 id=\"toastTitle\" tabindex=\"0\">{{message.title}}</h2>\n    <p id=\"toastDescription\" [innerHtml]=\"message.content\" tabindex=\"0\"></p>\n    <button id=\"toast-close-{{message.id}}\" (click)=\"closeToast(message.id)\" aria-label=\"Close\" class=\"toast__close\" tabindex=\"0\">\n      <i class=\"material-icons\" aria-hidden=\"true\">close</i>\n    </button>\n  </div>\n</div>\n\n"
        },
        {
            "name": "ToolbarComponent",
            "id": "component-ToolbarComponent-39c4310b43b9df9ce0279bbefbb0fef0",
            "file": "projects/ugla/src/lib/components/toolbar/toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-toolbar",
            "styleUrls": [
                "./toolbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toolbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hasBreadcrumb",
                    "defaultValue": "false",
                    "line": 22
                },
                {
                    "name": "title",
                    "description": "<p>Set title</p>\n",
                    "line": 20,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classes",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "theme",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Receives the theme&#39;s name</p>\n",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Toolbar</p>\n",
            "rawdescription": "Toolbar",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { UglaService } from '../../ugla.service';\n\n/**\n * Toolbar\n *\n * @example\n * <ugl-toolbar [title]=\"TITLE\"></ugl-toolbar>\n */\n@Component({\n  selector: 'ugl-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.scss']\n})\nexport class ToolbarComponent implements OnInit {\n\n  /**\n   * Set title\n   */\n  @Input() title: string;\n\n  @Input() hasBreadcrumb = false;\n\n  /**\n   * Receives the theme's name\n   */\n  public theme: string;\n\n  public classes: string;\n\n  /**\n   * Receives the component's name\n   * @param ugla: UglaService\n   */\n  constructor(private ugla: UglaService) {\n    this.theme = ugla.theme;\n  }\n\n  ngOnInit() {\n    this.classes = this.ugla.theme + ' ' + \n                  (this.hasBreadcrumb ? 'has-breadcrumb' : '');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../sass/index';\n@import './theme';\n@import './theme-white';\n@import './theme-colored';\n",
                    "styleUrl": "./toolbar.component.scss"
                }
            ],
            "stylesData": "",
            "jsdoctags": [
                {
                    "pos": 130,
                    "end": 140,
                    "flags": 0,
                    "kind": 288,
                    "atToken": {
                        "pos": 130,
                        "end": 131,
                        "flags": 0,
                        "kind": 57
                    },
                    "tagName": {
                        "pos": 131,
                        "end": 138,
                        "flags": 0,
                        "escapedText": "example"
                    },
                    "comment": "<ugl-toolbar [title]=\"TITLE\"></ugl-toolbar>"
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Receives the component&#39;s name</p>\n",
                "args": [
                    {
                        "name": "ugla",
                        "type": "UglaService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 606,
                            "end": 610,
                            "flags": 0,
                            "escapedText": "ugla"
                        },
                        "type": "UglaService",
                        "tagName": {
                            "pos": 600,
                            "end": 605,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: UglaService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"toolbar\" [ngClass]=\"classes\">\n  <h2 tabindex=\"0\">{{ title }}</h2>\n  <div class=\"content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "UglaComponent",
            "id": "component-UglaComponent-be576be3c1e50f0b693ce76e7911817c",
            "file": "projects/ugla/src/lib/ugla.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ugl-ugla",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Ugla main class</p>\n",
            "rawdescription": "Ugla main class",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n/**\n * Ugla main class\n */\n@Component({\n  selector: 'ugl-ugla',\n  template: ''\n})\nexport class UglaComponent {\n  /**\n   * @ignore\n   */\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HomePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "UglaModule"
                        },
                        {
                            "name": "UglaRulesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UglaModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UglaService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AsideComponent"
                        },
                        {
                            "name": "BackPanelComponent"
                        },
                        {
                            "name": "BannerComponent"
                        },
                        {
                            "name": "BrandComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardInfoPhotoComponent"
                        },
                        {
                            "name": "CardTimelineComponent"
                        },
                        {
                            "name": "CheckboxColumnDirective"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "DatepickerComponent"
                        },
                        {
                            "name": "FieldComponent"
                        },
                        {
                            "name": "FileUploadComponent"
                        },
                        {
                            "name": "FilterComponent"
                        },
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "GridDirective"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HyperLinkComponent"
                        },
                        {
                            "name": "LabelSpanComponent"
                        },
                        {
                            "name": "LightboxDirective"
                        },
                        {
                            "name": "ListLinksComponent"
                        },
                        {
                            "name": "ListOptionsComponent"
                        },
                        {
                            "name": "LoadingComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "PageFloatComponent"
                        },
                        {
                            "name": "PageTitleComponent"
                        },
                        {
                            "name": "PaginationComponent"
                        },
                        {
                            "name": "PaginationItemsPerPageComponent"
                        },
                        {
                            "name": "PeopleCardComponent"
                        },
                        {
                            "name": "QuoteComponent"
                        },
                        {
                            "name": "RadioComponent"
                        },
                        {
                            "name": "ReversePipe"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SimpleTableComponent"
                        },
                        {
                            "name": "SwitchComponent"
                        },
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "ToastComponent"
                        },
                        {
                            "name": "ToastItemComponent"
                        },
                        {
                            "name": "ToolbarComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        },
                        {
                            "name": "UglaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AsideComponent"
                        },
                        {
                            "name": "BackPanelComponent"
                        },
                        {
                            "name": "BannerComponent"
                        },
                        {
                            "name": "BrandComponent"
                        },
                        {
                            "name": "BreadcrumbComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "CardInfoPhotoComponent"
                        },
                        {
                            "name": "CardTimelineComponent"
                        },
                        {
                            "name": "CheckboxColumnDirective"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ClickOutsideDirective"
                        },
                        {
                            "name": "DatepickerComponent"
                        },
                        {
                            "name": "FieldComponent"
                        },
                        {
                            "name": "FileUploadComponent"
                        },
                        {
                            "name": "FilterComponent"
                        },
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "GridDirective"
                        },
                        {
                            "name": "HyperLinkComponent"
                        },
                        {
                            "name": "LabelSpanComponent"
                        },
                        {
                            "name": "LightboxDirective"
                        },
                        {
                            "name": "ListLinksComponent"
                        },
                        {
                            "name": "ListOptionsComponent"
                        },
                        {
                            "name": "LoadingComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "ModalComponent"
                        },
                        {
                            "name": "PageFloatComponent"
                        },
                        {
                            "name": "PageTitleComponent"
                        },
                        {
                            "name": "PaginationComponent"
                        },
                        {
                            "name": "PaginationItemsPerPageComponent"
                        },
                        {
                            "name": "PeopleCardComponent"
                        },
                        {
                            "name": "QuoteComponent"
                        },
                        {
                            "name": "RadioComponent"
                        },
                        {
                            "name": "ReversePipe"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SimpleTableComponent"
                        },
                        {
                            "name": "SwitchComponent"
                        },
                        {
                            "name": "TabComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "ToastComponent"
                        },
                        {
                            "name": "ToastItemComponent"
                        },
                        {
                            "name": "ToolbarComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        },
                        {
                            "name": "UglaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UglaRulesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UglaRulesService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CrDirective"
                        },
                        {
                            "name": "DeDirective"
                        },
                        {
                            "name": "EdDirective"
                        },
                        {
                            "name": "VwDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CrDirective"
                        },
                        {
                            "name": "DeDirective"
                        },
                        {
                            "name": "EdDirective"
                        },
                        {
                            "name": "VwDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla/src/lib/components/field/field.component.ts",
                "type": "any"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla-rules/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Brand.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({\n  path: '/',\n  brandName: 'Ugla'\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prd.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "FIRST_PAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla/src/lib/components/pagination/pagination.component.ts",
                "type": "number",
                "defaultValue": "1",
                "description": "<p>Constant for default first page</p>\n"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla/src/lib/components/datepicker/datepicker.component.ts",
                "type": "",
                "defaultValue": "moment_"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla/src/test.ts",
                "type": "any"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla-rules/src/test.ts",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "tabbableSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "",
                "defaultValue": "'a[href], area[href], input:not([disabled]):not([tabindex=\\'-1\\']), ' +\n  'button:not([disabled]):not([tabindex=\\'-1\\']),select:not([disabled]):not([tabindex=\\'-1\\']), ' +\n  'textarea:not([disabled]):not([tabindex=\\'-1\\']), ' +\n  'iframe, object, embed, *[tabindex]:not([tabindex=\\'-1\\']), *[contenteditable=true]'"
            },
            {
                "name": "tabbableSelectorIgnoreTabIndex",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "",
                "defaultValue": "'a[href], area[href], input:not([disabled]), ' +\n  'button:not([disabled]),select:not([disabled]), ' +\n  'textarea:not([disabled]), ' +\n  'iframe, object, embed, *[tabindex], *[contenteditable=true]'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Brand.stories.ts",
                "type": "Story<BrandComponent>",
                "defaultValue": "(args: BrandComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "uploadComponentConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/uploadComponentConfig.ts",
                "type": "object",
                "defaultValue": "{\n    name: 'file',\n    instantUpload: false,\n    imageTransformOutputQuality: 20,\n    imagePreviewHeight: 300,\n    multiple: false,\n    styleButtonRemoveItemPosition: 'center bottom',\n    labelButtonRemoveItem: '', // Empty for X icon\n    maxFileSize: '5Mb',\n    allowFileSizeValidation: true,\n    labelIdle: '<i class=\"material-icons\">insert_photo</i>',\n    acceptedFileTypes: 'image/jpeg',\n    allowImageValidateSize: false,\n    allowImagePreview: true,\n    imageValidateSizeMinWidth: 500,\n    imageValidateSizeMaxWidth: 1000,\n    imageValidateSizeMinHeight: 500,\n    imageValidateSizeMaxHeight: 1000,\n    imageValidateSizeLabelExpectedMinSize: 'O tamanho minímo é de {minWidth}px × {minHeight}px',\n    server: {\n      url: '/',\n      process: (fieldName, file, metadata, load, error, progress, abort) => {\n         console.log(file);\n      },\n      revert: '/undo',\n      restore: '/restore/',\n      load: '/load/',\n      fetch: '/fetch/',\n    }\n  }"
            },
            {
                "name": "VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ugla/src/lib/config.ts",
                "type": "string",
                "defaultValue": "'2.1.0'"
            }
        ],
        "functions": [
            {
                "name": "cycleTabs",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "event",
                        "type": ""
                    },
                    {
                        "name": "element",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "event",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "focusFirstFocusableElement",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "list",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "focusLastFocusableElement",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "list",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFocusElementList",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": ""
                    },
                    {
                        "name": "selector",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selector",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isElementFocused",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "event",
                        "type": ""
                    },
                    {
                        "name": "element",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "event",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "element",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isFocusInFirstItem",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "event",
                        "type": ""
                    },
                    {
                        "name": "list",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "event",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "list",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isFocusInLastItem",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "event",
                        "type": ""
                    },
                    {
                        "name": "list",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "event",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "list",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isVisible",
                "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Form",
                "childs": [
                    {
                        "name": "REQUIRED",
                        "value": "Required field"
                    },
                    {
                        "name": "INVALID_SELECTION",
                        "value": "Invalid selection"
                    },
                    {
                        "name": "BACK_BUTTON_LABEL",
                        "value": "Back"
                    },
                    {
                        "name": "CANCEL_BUTTON_LABEL",
                        "value": "Cancel"
                    },
                    {
                        "name": "SUBMIT_BUTTON_LABEL",
                        "value": "Submit"
                    },
                    {
                        "name": "CLOSE_BUTTON_LABEL",
                        "value": "Close"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ugla/src/lib/enum/form.enum.ts"
            },
            {
                "name": "KeyCode",
                "childs": [
                    {
                        "name": "RETURN",
                        "value": "ENTER"
                    },
                    {
                        "name": "NUMPADENTER",
                        "value": "NUMPADENTER"
                    },
                    {
                        "name": "SPACE",
                        "value": "SPACE"
                    },
                    {
                        "name": "LEFT",
                        "value": "ARROWLEFT"
                    },
                    {
                        "name": "UP",
                        "value": "ARROWUP"
                    },
                    {
                        "name": "RIGHT",
                        "value": "ARROWRIGHT"
                    },
                    {
                        "name": "DOWN",
                        "value": "ARROWDOWN"
                    },
                    {
                        "name": "TAB",
                        "value": "TAB"
                    },
                    {
                        "name": "SHIFT",
                        "value": "SHIFT"
                    },
                    {
                        "name": "ESC",
                        "value": "ESCAPE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ugla/src/lib/enum/keyCode.enum.ts"
            },
            {
                "name": "NotificationCommand",
                "childs": [
                    {
                        "name": "CLEAR_ALL",
                        "value": "clearAll"
                    },
                    {
                        "name": "CLOSE",
                        "value": "close"
                    },
                    {
                        "name": "SET",
                        "value": "set"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ugla/src/lib/components/toast/toast.service.ts"
            },
            {
                "name": "Themes",
                "childs": [
                    {
                        "name": "WHITE",
                        "value": "theme-white"
                    },
                    {
                        "name": "GRAY",
                        "value": "theme-colored-gray"
                    },
                    {
                        "name": "RED",
                        "value": "theme-colored-red"
                    },
                    {
                        "name": "PURPLE",
                        "value": "theme-colored-purple"
                    },
                    {
                        "name": "AQUAMARINE",
                        "value": "theme-colored-aquamarine"
                    },
                    {
                        "name": "GREEN",
                        "value": "theme-colored-green"
                    },
                    {
                        "name": "YELLOW",
                        "value": "theme-colored-yellow"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ugla/src/lib/enum/themes.enum.ts"
            }
        ],
        "groupedVariables": {
            "projects/ugla/src/lib/components/field/field.component.ts": [
                {
                    "name": "$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla/src/lib/components/field/field.component.ts",
                    "type": "any"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "any"
                }
            ],
            "projects/ugla/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla/src/test.ts",
                    "type": "any"
                }
            ],
            "projects/ugla-rules/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla-rules/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla-rules/src/test.ts",
                    "type": "any"
                }
            ],
            "src/stories/Brand.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Brand.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({\n  path: '/',\n  brandName: 'Ugla'\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Brand.stories.ts",
                    "type": "Story<BrandComponent>",
                    "defaultValue": "(args: BrandComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/environments/environment.prd.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prd.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "projects/ugla/src/lib/components/pagination/pagination.component.ts": [
                {
                    "name": "FIRST_PAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla/src/lib/components/pagination/pagination.component.ts",
                    "type": "number",
                    "defaultValue": "1",
                    "description": "<p>Constant for default first page</p>\n"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/ugla/src/lib/components/datepicker/datepicker.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla/src/lib/components/datepicker/datepicker.component.ts",
                    "type": "",
                    "defaultValue": "moment_"
                }
            ],
            "projects/ugla/src/lib/components/common/tab.service.ts": [
                {
                    "name": "tabbableSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "type": "",
                    "defaultValue": "'a[href], area[href], input:not([disabled]):not([tabindex=\\'-1\\']), ' +\n  'button:not([disabled]):not([tabindex=\\'-1\\']),select:not([disabled]):not([tabindex=\\'-1\\']), ' +\n  'textarea:not([disabled]):not([tabindex=\\'-1\\']), ' +\n  'iframe, object, embed, *[tabindex]:not([tabindex=\\'-1\\']), *[contenteditable=true]'"
                },
                {
                    "name": "tabbableSelectorIgnoreTabIndex",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "type": "",
                    "defaultValue": "'a[href], area[href], input:not([disabled]), ' +\n  'button:not([disabled]),select:not([disabled]), ' +\n  'textarea:not([disabled]), ' +\n  'iframe, object, embed, *[tabindex], *[contenteditable=true]'"
                }
            ],
            "src/environments/uploadComponentConfig.ts": [
                {
                    "name": "uploadComponentConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/uploadComponentConfig.ts",
                    "type": "object",
                    "defaultValue": "{\n    name: 'file',\n    instantUpload: false,\n    imageTransformOutputQuality: 20,\n    imagePreviewHeight: 300,\n    multiple: false,\n    styleButtonRemoveItemPosition: 'center bottom',\n    labelButtonRemoveItem: '', // Empty for X icon\n    maxFileSize: '5Mb',\n    allowFileSizeValidation: true,\n    labelIdle: '<i class=\"material-icons\">insert_photo</i>',\n    acceptedFileTypes: 'image/jpeg',\n    allowImageValidateSize: false,\n    allowImagePreview: true,\n    imageValidateSizeMinWidth: 500,\n    imageValidateSizeMaxWidth: 1000,\n    imageValidateSizeMinHeight: 500,\n    imageValidateSizeMaxHeight: 1000,\n    imageValidateSizeLabelExpectedMinSize: 'O tamanho minímo é de {minWidth}px × {minHeight}px',\n    server: {\n      url: '/',\n      process: (fieldName, file, metadata, load, error, progress, abort) => {\n         console.log(file);\n      },\n      revert: '/undo',\n      restore: '/restore/',\n      load: '/load/',\n      fetch: '/fetch/',\n    }\n  }"
                }
            ],
            "projects/ugla/src/lib/config.ts": [
                {
                    "name": "VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ugla/src/lib/config.ts",
                    "type": "string",
                    "defaultValue": "'2.1.0'"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ugla/src/lib/components/common/tab.service.ts": [
                {
                    "name": "cycleTabs",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "element",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusFirstFocusableElement",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusLastFocusableElement",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFocusElementList",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "element",
                            "type": ""
                        },
                        {
                            "name": "selector",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isElementFocused",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "element",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFocusInFirstItem",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "list",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFocusInLastItem",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        },
                        {
                            "name": "list",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "list",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isVisible",
                    "file": "projects/ugla/src/lib/components/common/tab.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "element",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/ugla/src/lib/enum/form.enum.ts": [
                {
                    "name": "Form",
                    "childs": [
                        {
                            "name": "REQUIRED",
                            "value": "Required field"
                        },
                        {
                            "name": "INVALID_SELECTION",
                            "value": "Invalid selection"
                        },
                        {
                            "name": "BACK_BUTTON_LABEL",
                            "value": "Back"
                        },
                        {
                            "name": "CANCEL_BUTTON_LABEL",
                            "value": "Cancel"
                        },
                        {
                            "name": "SUBMIT_BUTTON_LABEL",
                            "value": "Submit"
                        },
                        {
                            "name": "CLOSE_BUTTON_LABEL",
                            "value": "Close"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ugla/src/lib/enum/form.enum.ts"
                }
            ],
            "projects/ugla/src/lib/enum/keyCode.enum.ts": [
                {
                    "name": "KeyCode",
                    "childs": [
                        {
                            "name": "RETURN",
                            "value": "ENTER"
                        },
                        {
                            "name": "NUMPADENTER",
                            "value": "NUMPADENTER"
                        },
                        {
                            "name": "SPACE",
                            "value": "SPACE"
                        },
                        {
                            "name": "LEFT",
                            "value": "ARROWLEFT"
                        },
                        {
                            "name": "UP",
                            "value": "ARROWUP"
                        },
                        {
                            "name": "RIGHT",
                            "value": "ARROWRIGHT"
                        },
                        {
                            "name": "DOWN",
                            "value": "ARROWDOWN"
                        },
                        {
                            "name": "TAB",
                            "value": "TAB"
                        },
                        {
                            "name": "SHIFT",
                            "value": "SHIFT"
                        },
                        {
                            "name": "ESC",
                            "value": "ESCAPE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ugla/src/lib/enum/keyCode.enum.ts"
                }
            ],
            "projects/ugla/src/lib/components/toast/toast.service.ts": [
                {
                    "name": "NotificationCommand",
                    "childs": [
                        {
                            "name": "CLEAR_ALL",
                            "value": "clearAll"
                        },
                        {
                            "name": "CLOSE",
                            "value": "close"
                        },
                        {
                            "name": "SET",
                            "value": "set"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ugla/src/lib/components/toast/toast.service.ts"
                }
            ],
            "projects/ugla/src/lib/enum/themes.enum.ts": [
                {
                    "name": "Themes",
                    "childs": [
                        {
                            "name": "WHITE",
                            "value": "theme-white"
                        },
                        {
                            "name": "GRAY",
                            "value": "theme-colored-gray"
                        },
                        {
                            "name": "RED",
                            "value": "theme-colored-red"
                        },
                        {
                            "name": "PURPLE",
                            "value": "theme-colored-purple"
                        },
                        {
                            "name": "AQUAMARINE",
                            "value": "theme-colored-aquamarine"
                        },
                        {
                            "name": "GREEN",
                            "value": "theme-colored-green"
                        },
                        {
                            "name": "YELLOW",
                            "value": "theme-colored-yellow"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ugla/src/lib/enum/themes.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "HomePageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 23,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ugla-rules/src/lib/directives/cr.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CrDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ugla-rules/src/lib/directives/de.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ugla-rules/src/lib/directives/ed.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "EdDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ugla-rules/src/lib/directives/vw.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "VwDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ugla-rules/src/lib/models/application.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Application",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ugla-rules/src/lib/models/feature.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Feature",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ugla-rules/src/lib/ugla-rules.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RulesConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ugla-rules/src/lib/ugla-rules.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UglaRulesService",
                "coveragePercent": 43,
                "coverageCount": "7/16",
                "status": "medium"
            },
            {
                "filePath": "projects/ugla-rules/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla-rules/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/aside/aside.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AsideComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/aside/aside.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AsideService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/banner/banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannerComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/brand/brand.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrandComponent",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 82,
                "coverageCount": "14/17",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/cards/card-info-photo/card-info-photo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardInfoPhotoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/cards/card-timeline/card-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardTimelineComponent",
                "coveragePercent": 90,
                "coverageCount": "9/10",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/cards/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 72,
                "coverageCount": "8/11",
                "status": "good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "cycleTabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "focusFirstFocusableElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "focusLastFocusableElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getFocusElementList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isElementFocused",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isFocusInFirstItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isFocusInLastItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isVisible",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tabbableSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/common/tab.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tabbableSelectorIgnoreTabIndex",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/datepicker/datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatepickerComponent",
                "coveragePercent": 78,
                "coverageCount": "26/33",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/datepicker/datepicker.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/field/field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FieldComponent",
                "coveragePercent": 55,
                "coverageCount": "30/54",
                "status": "good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/field/field.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/file-upload/file-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploadComponent",
                "coveragePercent": 85,
                "coverageCount": "24/28",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/filter/filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterComponent",
                "coveragePercent": 73,
                "coverageCount": "11/15",
                "status": "good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 86,
                "coverageCount": "13/15",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 86,
                "coverageCount": "13/15",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/hyper-link/hyper-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HyperLinkComponent",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/label-span/label-span.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelSpanComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/lightbox/lightbox.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LightboxService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/list-links/list-links.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListLinksComponent",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/list-options/list-options.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListOptionsComponent",
                "coveragePercent": 63,
                "coverageCount": "7/11",
                "status": "good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 50,
                "coverageCount": "6/12",
                "status": "medium"
            },
            {
                "filePath": "projects/ugla/src/lib/components/loading/loading.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 26,
                "coverageCount": "5/19",
                "status": "medium"
            },
            {
                "filePath": "projects/ugla/src/lib/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 54,
                "coverageCount": "13/24",
                "status": "good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/modal/modal.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Modal",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/modal/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 45,
                "coverageCount": "5/11",
                "status": "medium"
            },
            {
                "filePath": "projects/ugla/src/lib/components/page-float/page-float.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageFloatComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/page-title/page-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageTitleComponent",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/pagination/pagination-items-per-page/pagination-items-per-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationItemsPerPageComponent",
                "coveragePercent": 100,
                "coverageCount": "11/11",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 97,
                "coverageCount": "45/46",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/pagination/pagination.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIRST_PAGE",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/panels/back-panel/back-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackPanelComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/people-card/people-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PeopleCardComponent",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/quote/quote.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuoteComponent",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 15,
                "coverageCount": "3/20",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 54,
                "coverageCount": "30/55",
                "status": "good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/switch/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SwitchComponent",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/components/tables/simple-table/simple-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimpleTableComponent",
                "coveragePercent": 33,
                "coverageCount": "3/9",
                "status": "medium"
            },
            {
                "filePath": "projects/ugla/src/lib/components/tabs/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/tabs/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/toast/pipes/reverse.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ReversePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/toast/toast-item/toast-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/toast/toast.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Message",
                "coveragePercent": 13,
                "coverageCount": "2/15",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/toast/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 36,
                "coverageCount": "4/11",
                "status": "medium"
            },
            {
                "filePath": "projects/ugla/src/lib/components/toast/toast.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToastEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/components/toolbar/toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToolbarComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/ugla/src/lib/config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/directives/checkbox-column.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CheckboxColumnDirective",
                "coveragePercent": 100,
                "coverageCount": "15/15",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/directives/click-outsite.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ClickOutsideDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/directives/grid.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "GridDirective",
                "coveragePercent": 5,
                "coverageCount": "1/20",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/directives/lightbox.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "LightboxDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/directives/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "projects/ugla/src/lib/models/aside-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AsideItem",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/auth.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Auth",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/checkbox/checkbox-column-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckboxColumnItem",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/models/checkbox/checkbox-list-column.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckboxListColumn",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/models/code-name.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CodeName",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/header.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Header",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/items-options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListOptionsItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/link.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Link",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/list.ts",
                "type": "class",
                "linktype": "classe",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/menu-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/menu.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Menu",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/options.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Options",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/people.ts",
                "type": "class",
                "linktype": "classe",
                "name": "People",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/select.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Select",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/table/table-column.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableColumn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/table/table-header.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableHeader",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/table/table-row.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableRow",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/models/table/table.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Table",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/lib/ugla.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UglaComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/ugla.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ThemeConfig",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/lib/ugla.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UglaService",
                "coveragePercent": 90,
                "coverageCount": "10/11",
                "status": "very-good"
            },
            {
                "filePath": "projects/ugla/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ugla/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home-page/home-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prd.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/uploadComponentConfig.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uploadComponentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Brand.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Brand.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}